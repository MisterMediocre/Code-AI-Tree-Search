{
  "prompt": "\nQUESTION:\nThe mayor of the Central Town wants to modernize Central Street, represented in this problem by the $(Ox)$ axis.\n\nOn this street, there are $n$ antennas, numbered from $1$ to $n$. The $i$-th antenna lies on the position $x_i$ and has an initial scope of $s_i$: it covers all integer positions inside the interval $[x_i - s_i; x_i + s_i]$.\n\nIt is possible to increment the scope of any antenna by $1$, this operation costs $1$ coin. We can do this operation as much as we want (multiple times on the same antenna if we want).\n\nTo modernize the street, we need to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna. Note that it is authorized to cover positions outside $[1; m]$, even if it's not required.\n\nWhat is the minimum amount of coins needed to achieve this modernization?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 80$ and $n \\le m \\le 100\\ 000$).\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and $s_i$ ($1 \\le x_i \\le m$ and $0 \\le s_i \\le m$).\n\nOn each position, there is at most one antenna (values $x_i$ are pairwise distinct).\n\n\n-----Output-----\n\nYou have to output a single integer: the minimum amount of coins required to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna.\n\n\n-----Examples-----\nInput\n3 595\n43 2\n300 4\n554 10\n\nOutput\n281\n\nInput\n1 1\n1 1\n\nOutput\n0\n\nInput\n2 50\n20 0\n3 1\n\nOutput\n30\n\nInput\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n\nOutput\n26\n\n\n\n-----Note-----\n\nIn the first example, here is a possible strategy:\n\n  Increase the scope of the first antenna by $40$, so that it becomes $2 + 40 = 42$. This antenna will cover interval $[43 - 42; 43 + 42]$ which is $[1; 85]$  Increase the scope of the second antenna by $210$, so that it becomes $4 + 210 = 214$. This antenna will cover interval $[300 - 214; 300 + 214]$, which is $[86; 514]$  Increase the scope of the third antenna by $31$, so that it becomes $10 + 31 = 41$. This antenna will cover interval $[554 - 41; 554 + 41]$, which is $[513; 595]$ \n\nTotal cost is $40 + 210 + 31 = 281$. We can prove that it's the minimum cost required to make all positions from $1$ to $595$ covered by at least one antenna.\n\nNote that positions $513$ and $514$ are in this solution covered by two different antennas, but it's not important.\n\n\u2014\n\nIn the second example, the first antenna already covers an interval $[0; 2]$ so we have nothing to do.\n\nNote that the only position that we needed to cover was position $1$; positions $0$ and $2$ are covered, but it's not important.\n\nTUTORIAL:\nWe can add an antenna (x = 0, s = 0). It will not modify the answer, because it would be non-optimal to increase the scope of this antenna.\n\nLet dp\u2093 be the minimum cost to cover all positions from x to m inclusive, knowing that position x is covered. We compute dp in decreasing order of x.\n\nBase case is dp\u2098 := 0.\n\nThe default transition is dp\u2093 := (m \u2212 x).\n\nIf position x + 1 is initially covered, dp\u2093 := dp\u2093\u208a\u2081\n\nOtherwise, let's consider all antennas and their initial intervals [l\u1d62; r\u1d62]. If x < l\u1d62, let  \nu = (l\u1d62 \u2212 x \u2212 1), then a possible transition is dp\u2093 := u + dp\u2098\u1d62\u2099(m, r\u1d62 + u).\n\nWe take the minimum of all these transitions. Note that we always extend intervals as less as possible, but it's optimal because:\n\n\u2022 If after using this interval i, we use another interval j (at the right of i), the time spent to extend i could have been used to extend j instead, which will be more optimal.\n\u2022 If i was the last interval used, we don't care because the default transition will take care of this case.\n\nThe final answer will be dp\u2080.\n\nThere are O(m) states and O(n) transitions, hence final complexity is O(nm) with very low constant. O(n\u00b2 \u00b7 m) can also get AC because of very low constant.\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    n, m = map(int, input().split())\n    antennas = []\n    for _ in range(n):\n        x, s = map(int, input().split())\n        antennas.append((x, s))\n    \n    dp = [float('inf')] * (m + 1)\n    dp[m] = 0\n    \n    for x in range(m - 1, -1, -1):\n        dp[x] = m - x\n        for x1, s1 in antennas:\n            if x < x1:\n                u = x1 - x - 1\n                dp[x] = min(dp[x], u + dp[m - s1])\n    \n    print(dp[0])\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0
  ],
  "train rewards": [
    0.0
  ],
  "time": 5.338639974594116,
  "sample times": 5
}