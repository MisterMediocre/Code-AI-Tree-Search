{
  "prompt": "\nQUESTION:\nUnlucky year in Berland is such a year that its number n can be represented as n = x^{a} + y^{b}, where a and b are non-negative integer numbers. \n\nFor example, if x = 2 and y = 3 then the years 4 and 17 are unlucky (4 = 2^0 + 3^1, 17 = 2^3 + 3^2 = 2^4 + 3^0) and year 18 isn't unlucky as there is no such representation for it.\n\nSuch interval of years that there are no unlucky years in it is called The Golden Age.\n\nYou should write a program which will find maximum length of The Golden Age which starts no earlier than the year l and ends no later than the year r. If all years in the interval [l, r] are unlucky then the answer is 0.\n\n\n-----Input-----\n\nThe first line contains four integer numbers x, y, l and r (2 \u2264 x, y \u2264 10^18, 1 \u2264 l \u2264 r \u2264 10^18).\n\n\n-----Output-----\n\nPrint the maximum length of The Golden Age within the interval [l, r].\n\nIf all years in the interval [l, r] are unlucky then print 0.\n\n\n-----Examples-----\nInput\n2 3 1 10\n\nOutput\n1\n\nInput\n3 5 10 22\n\nOutput\n8\n\nInput\n2 3 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the unlucky years are 2, 3, 4, 5, 7, 9 and 10. So maximum length of The Golden Age is achived in the intervals [1, 1], [6, 6] and [8, 8].\n\nIn the second example the longest Golden Age is the interval [15, 22].\n\nTUTORIAL:\nNotice that x\u1d43 for x \u2265 2 has no more than 60 powers which give numbers no greater than 10\u00b9\u2078.\n\nSo let's store all possible sums of all powers of x and y. Now the answer to the query can be obtained in linear time by checking difference between neighbouring unlucky years in sorted order.\n\nDon't forget that you should handle multiplying of such big numbers very carefully. For example, instead of writing\n\nwhile (num <= 1e18)\n    num = num * x\n\nor\n\nwhile (num * x <= 1e18)\n    num = num * x\n\nyou should write\n\nwhile (num <= 1e18 / x)\n    num = num * x\n\nto avoid getting overflow errors of 64-bit type.\n\nInteger division will work fine in that case because num \u00b7 x will never exceed 10\u00b9\u2078 if num doesn\u2019t exceed \u230a10\u00b9\u2078 / x\u230b.\n\nOverall complexity: O(n \u00b7 log n).\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    x, y, l, r = int(data[0]), int(data[1]), int(data[2]), int(data[3])\n    powers_x = set()\n    powers_y = set()\n    for i in range(61):\n        powers_x.add(x**i)\n        powers_y.add(y**i)\n    powers_x = sorted(powers_x)\n    powers_y = sorted(powers_y)\n    max_length = 0\n    for i in range(len(powers_x)):\n        for j in range(len(powers_y)):\n            if powers_x[i] + powers_y[j] >= l and powers_x[i] + powers_y[j] <= r:\n                max_length = max(max_length, i + j)\n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.023255813953488372
  ],
  "train rewards": [
    0.0
  ],
  "time": 5.995362281799316,
  "sample times": 5
}