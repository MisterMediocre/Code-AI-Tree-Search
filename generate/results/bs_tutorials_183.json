{
  "prompt": "\nQUESTION:\nAmr doesn't like Maths as he finds it really boring, so he usually sleeps in Maths lectures. But one day the teacher suspected that Amr is sleeping and asked him a question to make sure he wasn't.\n\nFirst he gave Amr two positive integers n and k. Then he asked Amr, how many integer numbers x > 0 exist such that:  Decimal representation of x (without leading zeroes) consists of exactly n digits;  There exists some integer y > 0 such that:   $y \\operatorname{mod} k = 0$;  decimal representation of y is a suffix of decimal representation of x.  \n\nAs the answer to this question may be pretty huge the teacher asked Amr to output only its remainder modulo a number m.\n\nCan you help Amr escape this embarrassing situation?\n\n\n-----Input-----\n\nInput consists of three integers n, k, m (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 100, 1 \u2264 m \u2264 10^9).\n\n\n-----Output-----\n\nPrint the required number modulo m.\n\n\n-----Examples-----\nInput\n1 2 1000\n\nOutput\n4\nInput\n2 2 1000\n\nOutput\n45\nInput\n5 3 1103\n\nOutput\n590\n\n\n-----Note-----\n\nA suffix of a string S is a non-empty string that can be obtained by removing some number (possibly, zero) of first characters from S.\n\nTUTORIAL:\nHint: Dynamic programming problem. To handle repetitions we have to construct the number from right to the left and calculate the answer when we reach a number equivalent to 0 modulo k.\n\nSolution: Let's define count(i, j) as a recursive function that calculates the number of numbers consisting of n digits satisfying the conditions of the problem and with a specific suffix of length i, S\u1d62 such that S\u1d62 \u2261 j (mod k).\n\nWe want to avoid repetition so by constructing the number from the right to the left when we reach a state with j = 0 with suffix \u2260 0 we return the answer immediately so any other suffix that contains this suffix won\u2019t be calculated.\n\nSo the base cases are count(n, 0) = 1, count(i, 0) = 9 * 10\u207f\u207b\u2071\u207b\u00b9 : i < n.\n\nSo state transitions will be  \ncount(i, j) = \u2211\u208d\u2093\u208c\u2080 \u209c\u2092 \u2089\u208e count(i + 1, (j + (x * 10\u2071)) % k)  \n(We add a digit to the left).\n\nAnd we can handle j = 0 case coming from a zero suffix easily with a boolean variable we set to true when we use a digit \u2260 0 in constructing the number.\n\nTime complexity: O(n * k)\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    n, k, m = map(int, input().split())\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[n][0] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i + 1][0]\n            else:\n                for x in range(1, 10):\n                    dp[i][j] = (dp[i][j] + dp[i + 1][(j + (x * 10 ** i)) % k]) % m\n    print(dp[0][0])\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0
  ],
  "train rewards": [
    0.0
  ],
  "time": 4.8888468742370605,
  "sample times": 5
}