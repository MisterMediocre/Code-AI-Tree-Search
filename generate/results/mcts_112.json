{
  "prompt": "\nQUESTION:\nAbsent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    return False\n                if cubes[j][i] == 6:\n                    return False\n                if cubes[i][j] == 9:\n                    used_digits.add('6')\n                if cubes[j][i] == 9:\n                    used_digits.add('6')\n                if cubes[i][j] == 0:\n                    used_digits.add('0')\n                if cubes[j][i] == 0:\n                    used_digits.add('0')\n                if cubes[i][j] == 1:\n                    used_digits.add('1')\n                if cubes[j][i] == 1:\n                    used_digits.add('1')\n                if cubes[i][j] == 2:\n                    used_digits.add('2')\n                if cubes[j][i] == 2:\n                    used_digits.add('2')\n                if cubes[i][j] == 3:\n                    used_digits.add('3')\n                if cubes[j][i] == 3:\n                    used_digits.add('3')\n                if cubes[i][j] == 4:\n                    used_digits.add('4')\n                if cubes[j][i] == 4:\n                    used_digits.add('4')\n                if cubes[i][j] == 5:\n                    used_digits.add('5')\n                if cubes[j][i] == 5:\n                    used_digits.add('5')\n                if cubes[i][j] == 7:\n                    used_digits.add('7')\n                if cubes[j][i] == 7:\n                    used_digits.add('7')\n                if cubes[i][j] == 8:\n                    used_digits.add('8')\n                if cubes[j][i] == 8:\n                    used_digits.add('8')\n                if cubes[i][j] == 9:\n                    used_digits.add('9')\n                if cubes[j][i] == 9:\n                    used_digits.add('9')\n\n        return len(used_digits) <= 9\n\n    max_x = 0\n    for x in range(1, 1000000):\n        if can_make_number(x):\n            max_x = x\n            break\n\n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    return False\n                if cubes[j][i] == 6:\n                    return False\n                if cubes[i][j] == 9:\n                    used_digits.add('6')\n                if cubes[j][i] == 9:\n                    used_digits.add('6')\n                if cubes[i][j] == 0:\n                    used_digits.add('0')\n                if cubes[j][i] == 0:\n                    used_digits.add('0')\n        \n        digits = sorted([str(digit) for digit in range(10) if digit not in used_digits])\n        num_str = ''.join(digits)\n        return num_str != '0' and len(num_str) <= x\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, sys.stdin.readline().split())))\n    \n    def can_make_number(x):\n        used_digits = [False] * 10\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    if cubes[j][i] != 9:\n                        return False\n                elif cubes[i][j] == 9:\n                    if cubes[j][i] != 6:\n                        return False\n                else:\n                    used_digits[cubes[i][j]] = True\n        \n        for i in range(1, x + 1):\n            if not used_digits[i]:\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 1000001):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def can_make_number(num):\n        for cube in cubes:\n            num_str = ''.join(str(digit) for digit in cube)\n            if num_str.startswith('0'):\n                return False\n            if int(num_str) > num:\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 1000001):\n        if can_make_number(i):\n            max_x = i\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def can_make_number(num):\n        for cube in cubes:\n            num_str = ''.join(str(digit) for digit in cube)\n            if num_str.startswith('0'):\n                return False\n            if int(num_str) > num:\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 1000001):\n        if can_make_number(i):\n            max_x = i\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[i][_] == 6:\n                    return False\n                elif cubes[i][_] == 9:\n                    return True\n                if cubes[i][_] in used_digits:\n                    return False\n                used_digits.add(cubes[i][_])\n        \n        digits = sorted(list(used_digits))\n        num_str = ''.join(str(digit) for digit in digits)\n        return num_str.isdigit() and num_str[0] != '0'\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def parse_input():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    return n, cubes\n\ndef find_max_number(n, cubes):\n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if str(i) in ''.join(map(str, cubes[j])):\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i)\n    return max_number\n\ndef main():\n    n, cubes = parse_input()\n    result = find_max_number(n, cubes)\n    print(result)\n\nif True:\n    main()",
    "def solve(n, cubes):\n    digits = [set(range(10)) for _ in range(6)]\n    for cube in cubes:\n        for i in range(6):\n            digits[i].discard(cube[i])\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 0:\n                return False\n        return True\n    \n    def get_next_digit(num):\n        for i in range(6):\n            if num[i] != 0:\n                return i\n        return -1\n    \n    def dfs(num):\n        if len(num) == 6:\n            if can_make_number(num):\n                return int(''.join(map(str, num)))\n            return float('-inf')\n        \n        max_num = float('-inf')\n        for i in range(6):\n            if digits[i]:\n                digits[i].remove(num[-1])\n                num.append(i)\n                max_num = max(max_num, dfs(num))\n                digits[i].add(num.pop())\n        return max_num\n    \n    return dfs([0]*6)\n\nif True:\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    print(solve(n, cubes))",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cubes = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits or digit == 9 and 6 in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        \n        return True\n    \n    max_x = 0\n    for i in range(1, 10**n + 1):\n        if can_make_number(i):\n            max_x = i\n    \n    print(max_x)\n\nif True:\n    solve()",
    "```python\ndef solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    \n    for _ in range(6 * n):\n        for i in range(n):\n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits[i]\n                \n                break\n            \n            if len(digits[i]) != 1:\n                continue\n            \n            for j in range(6):\n                if digits[i][j] == 0:\n                    continue\n                \n                for k in range(i + 1, n):\n                    if digits[k][j] == 0:\n                        continue\n                    \n                    if len(digits[i]) > len(digits[k]):\n                        digits[i], digits[k] = digits[k], digits[i]\n                    \n                    break\n                \n                if len(digits[i]) < len(digits[k]):\n                    digits[i], digits[k] = digits[k], digits",
    "from typing import List\n\ndef solve(n: int, cubes: List[List[int]]) -> int:\n    def can_make_number(x: int) -> bool:\n        digits = [str(i) for i in range(10)]\n        for _ in range(6):\n            for i in range(6):\n                if str(cubes[_][i]) not in digits:\n                    return False\n                digits.remove(str(cubes[_][i]))\n        return True\n\n    max_x = 0\n    for x in range(1, 10**n + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    return max_x\n\nif True:\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    print(solve(n, cubes))",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        digits = set(str(x))\n        for cube in cubes:\n            for face in range(6):\n                if str(cube[face]) not in digits:\n                    return False\n        return True\n    \n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    def is_valid(x):\n        digits = str(x)\n        for i in range(6):\n            for j in range(i+1, 6):\n                if abs(int(digits[i]) - int(digits[j])) == 3:\n                    return False\n        return True\n    \n    max_x = 0\n    for _ in range(n):\n        cube = [int(digit) for digit in input().split()]\n        if is_valid(max_x + 1):\n            max_x += 1\n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def parse_cubes(cubes):\n    return [int(''.join(map(str, cube))) for cube in cubes]\n\ndef find_max_number(cubes):\n    digits = set()\n    for cube in cubes:\n        for digit in str(cube):\n            digits.add(digit)\n    \n    max_number = 0\n    for num in range(1, 10**len(digits)):\n        if all(int(digit) in digits for digit in str(num)):\n            max_number = max(max_number, num)\n    \n    return max_number\n\ndef main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    result = find_max_number(parse_cubes(cubes))\n    print(result)\n\nif True:\n    main()",
    "def main():\n    # Read input\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    # Function to check if a number can be formed using the cubes\n    def can_form_number(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6' and digits[(i + 1) % 6] != '9':\n                return False\n            elif digits[i] == '9' and digits[(i + 1) % 6] != '6':\n                return False\n        return True\n\n    # Find the maximum number x\n    max_x = 0\n    for num in range(1, 10**n):\n        if can_form_number(num):\n            max_x = num\n\n    # Print the result\n    print(max_x)\n\nif True:\n    main()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, sys.stdin.readline().split())))\n    \n    def can_make_number(x):\n        used_digits = [False] * 10\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    if cubes[j][i] != 9:\n                        return False\n                elif cubes[i][j] == 9:\n                    if cubes[j][i] != 6:\n                        return False\n                else:\n                    used_digits[cubes[i][j]] = True\n        \n        for i in range(1, x + 1):\n            if not used_digits[i]:\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 1000001):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[i][_] == 6:\n                    return False\n                elif cubes[i][_] == 9:\n                    return True\n                if cubes[i][_] in used_digits:\n                    return False\n                used_digits.add(cubes[i][_])\n        \n        digits = sorted(list(used_digits))\n        num_str = ''.join(str(digit) for digit in digits)\n        return num_str.isdigit() and num_str[0] != '0' and len(num_str) <= x\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    n = int(data[0])\n    cubes = [list(map(int, data[i+1].split())) for i in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[_][i] == 6:\n                    return False\n                if cubes[_][i] == 9:\n                    return True\n                if cubes[_][i] != 0 and cubes[_][i] not in used_digits:\n                    used_digits.add(cubes[_][i])\n        \n        for num in range(1, x + 1):\n            digits = str(num)\n            if len(digits) > 6:\n                return False\n            if any(digit not in used_digits for digit in digits):\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 1000001):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    main()",
    "from collections import defaultdict\n\ndef solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits:\n                return False\n            elif digit == 9 and 6 in used_digits:\n                return False\n            if digit in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        return True\n\n    max_number = 0\n    for i in range(1, 10**n + 1):\n        if can_make_number(i):\n            max_number = i\n\n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    data = sys.stdin.read().splitlines()\n    n = int(data[0])\n    cubes = [list(map(int, data[i+1].split())) for i in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[_][i] == 6:\n                    return False\n                if cubes[_][i] == 9:\n                    return True\n                if cubes[_][i] != 0 and cubes[_][i] not in used_digits:\n                    used_digits.add(cubes[_][i])\n        \n        digits = sorted(list(used_digits))\n        num_str = ''.join(str(digit) for digit in digits)\n        return num_str.isdigit() and num_str[0] != '0'\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "import sys\nfrom typing import List\n\ndef solve(n: int, cubes: List[List[int]]) -> int:\n    def can_make_number(x: int) -> bool:\n        digits = [str(i) for i in range(10)]\n        for _ in range(6):\n            for i in range(6):\n                if str(cubes[_][i]) not in digits:\n                    return False\n                digits.remove(str(cubes[_][i]))\n        return True\n\n    max_x = 0\n    for x in range(1, 10**n + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    return max_x\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    cubes = [[int(digit) for digit in line] for line in input_data[1:n+1]]\n    result = solve(n, cubes)\n    print(result)",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    return False\n                if cubes[j][i] == 6:\n                    return False\n                if cubes[i][j] == 9:\n                    used_digits.add('6')\n                if cubes[j][i] == 9:\n                    used_digits.add('6')\n                if cubes[i][j] == 0:\n                    used_digits.add('0')\n                if cubes[j][i] == 0:\n                    used_digits.add('0')\n        \n        digits = [str(i) for i in range(10)]\n        for d in digits:\n            if d not in used_digits:\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    def get_max_number(cubes):\n        max_num = 0\n        for cube in cubes:\n            num_str = ''.join(map(str, cube))\n            if num_str[0] != '0':\n                max_num = max(max_num, int(num_str))\n        return max_num\n\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cube = list(map(int, input().split()))\n        cubes.append(cube)\n\n    max_num = get_max_number(cubes)\n    print(max_num)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.append(list(map(int, input().split())))\n    \n    max_num = 0\n    for i in range(1, 10):\n        found = False\n        for d in digits:\n            num = int(''.join(str(d[j]) for j in range(6)))\n            if num == i:\n                found = True\n                break\n        if found:\n            max_num = i\n    \n    return max_num if max_num != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = {}\n    for _ in range(n):\n        cube = tuple(map(int, input().split()))\n        for i in range(6):\n            if cube[i] not in digits:\n                digits[cube[i]] = []\n            digits[cube[i]].append(i)\n    \n    def can_make_number(num):\n        num_str = str(num)\n        if num_str[0] == '0':\n            return False\n        \n        for i in range(len(num_str)):\n            if num_str[i] not in digits or len(digits[num_str[i]]) == 0:\n                return False\n            \n            face = digits[num_str[i]][0]\n            if face % 2 == 0:\n                if i > 0 and num_str[i-1] != '6' or i < len(num_str)-1 and num_str[i+1] != '6':\n                    return False\n            else:\n                if i > 0 and num_str[i-1] != '9' or i < len(num_str)-1 and num_str[i+1] != '9':\n                    return False\n        \n        return True\n    \n    max_num = 0\n    for num in range(1, 10**n):\n        if can_make_number(num):\n            max_num = max(max_num, num)\n    \n    return max_num if max_num != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [0] * 10\n    for _ in range(n):\n        for i in range(6):\n            digits[int(input().split()[i])] += 1\n    \n    max_num = 0\n    for i in range(9, -1, -1):\n        if digits[i]:\n            max_num = 10 ** i + max_num\n            digits[i] -= 1\n            break\n    \n    return max_num if max_num else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    def get_max_number(cubes):\n        max_num = 0\n        for i in range(6):\n            num = int(''.join(map(str, cubes[i])))\n            if num > max_num:\n                max_num = num\n        return max_num\n\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    max_num = get_max_number(cubes)\n    if max_num == 0:\n        return 0\n    else:\n        return max_num - 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [set() for _ in range(10)]\n    for _ in range(n):\n        for i in range(6):\n            digits[int(input().split()[i])].add(i)\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in digits[i]:\n                if used[d]:\n                    return False\n                used[d] = True\n        \n        for i in range(1, x + 1):\n            if str(i).startswith('0'):\n                return False\n        \n        return True\n    \n    low, high = 1, 10**n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if can_make(mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high if high != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cube = list(map(int, input().split()))\n        cubes.append(cube)\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    max_num = 0\n    for i in range(1, 10**n):\n        if can_make_number(i):\n            max_num = i\n    \n    return max_num if max_num else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if digits[i][j] == 6:\n                    if digits[j][i] != 9:\n                        return False\n                elif digits[i][j] == 9:\n                    if digits[j][i] != 6:\n                        return False\n                else:\n                    used_digits.add(digits[i][j])\n        \n        for num in range(1, x + 1):\n            str_num = str(num)\n            if len(str_num) > 6:\n                return False\n            if any(digit not in used_digits for digit in str_num):\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 1000001):\n        if can_make_number(x):\n            max_x = x\n    \n    return max_x if max_x != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    def can_make_number(x):\n        digits = [str(i) for i in range(10)]\n        for _ in range(6):\n            for i in range(n):\n                if str(digits[x % 10]) not in str(cubes[i][_]):\n                    return False\n                x //= 10\n        return True\n\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n\n    print(max_x if max_x else 0)\n\nif True:\n    solve(int(input()))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        cube = list(map(int, input().split()))\n        digits.append(cube)\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if str(i) in ''.join(map(str, digits[j])):\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i * 10**(n-1))\n    \n    return max_number if max_number > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.extend(input().split())\n    \n    max_num = 0\n    for i in range(1, 10):\n        found = False\n        for d in digits:\n            if str(i) in d:\n                found = True\n                break\n        if found:\n            max_num = max(max_num, int(d))\n    \n    return max_num if max_num > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.append([int(digit) for digit in input().split()])\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if digits[j][0] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        for k in range(1, 10):\n            if digits[k][1] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        for l in range(1, 10):\n            if digits[l][2] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        for m in range(1, 10):\n            if digits[m][3] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        for n in range(1, 10):\n            if digits[n][4] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        for o in range(1, 10):\n            if digits[o][5] == i:\n                found = True\n                break\n        if not found:\n            continue\n        \n        max_number = max(max_number, i * 100000 + i * 10000 + i * 1000 + i * 100 + i * 10 + i)\n    \n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = {}\n    for i in range(1, 10):\n        for j in range(6):\n            if str(i) not in digits:\n                digits[str(i)] = []\n            digits[str(i)].append((i, j))\n    \n    max_num = 0\n    for _ in range(n):\n        num = 0\n        for i in range(6):\n            face = input().split()\n            for d in face:\n                if d in digits:\n                    num *= 10\n                    num += digits[d][0]\n        \n        if num > max_num:\n            max_num = num\n    \n    return max_num if max_num != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        digits.append(row)\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if str(i) in ''.join(map(str, digits[j])):\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i * (10**(n-1)))\n    \n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n, cubes):\n    def can_make_number(x):\n        digits = [str(i) for i in range(1, x + 1)]\n        for i in range(n):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[(i + 1) % n][j] != '9':\n                    return False\n                elif cubes[i][j] == '9' and cubes[(i + 1) % n][j] != '6':\n                    return False\n        return ''.join(digits) in ''.join(''.join(str(cubes[i][j]) for j in range(6)) for i in range(n))\n\n    low, high = 1, 10 ** 6\n    while low <= high:\n        mid = (low + high) // 2\n        if can_make_number(mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high if high < 10 ** 6 else 0\n\nif True:\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    print(solve(n, cubes))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.append(input().split())\n    \n    max_num = 0\n    for i in range(1, 10):\n        found = False\n        for d in digits:\n            if str(i) in d:\n                found = True\n                break\n        if found:\n            max_num = max(max_num, int(''.join(d)))\n    \n    return max_num if max_num > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.extend(map(int, input().split()))\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if digits[j] == i:\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i)\n    \n    return max_number if max_number > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = {}\n    for _ in range(n):\n        num = tuple(map(int, input().split()))\n        for i in range(6):\n            if num[i] not in digits:\n                digits[num[i]] = []\n            digits[num[i]].append(i)\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in digits[x][i]:\n                if used[d]:\n                    return False\n                used[d] = True\n        \n        return True\n    \n    x = 9\n    while not can_make(x):\n        x -= 1\n    \n    return x if x > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = {}\n    for _ in range(n):\n        digits.update({str(i): [int(j) for j in input().split()] for i in range(10)})\n    \n    def can_make(x):\n        for i in range(1, x + 1):\n            num_str = str(i)\n            for j in range(len(num_str)):\n                if num_str[j] == '6' and '9' in digits[num_str[j]]:\n                    return False\n                elif num_str[j] == '9' and '6' in digits[num_str[j]]:\n                    return False\n            for k in range(6):\n                if digits[k][num_str[0]] != digits[k][num_str[-1]]:\n                    return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 1000001):\n        if can_make(i):\n            max_x = i\n            break\n    \n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.extend(list(map(int, input().split())))\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            if digits[j] == i:\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i)\n    \n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    \n    for _ in range(n):\n        cube = list(map(int, input().split()))\n        cubes.append(cube)\n    \n    max_number = 0\n    \n    for i in range(1, 10):\n        found = False\n        \n        for cube in cubes:\n            num_str = ''.join(str(digit) for digit in cube)\n            \n            if num_str.startswith(str(i)) and '6' not in num_str and '9' not in num_str:\n                found = True\n                break\n        \n        if found:\n            max_number = max(max_number, i * 9 + sum(cube))\n    \n    return max_number if max_number > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        faces = list(map(int, input().split()))\n        cubes.append(faces)\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    max_num = 0\n    for i in range(1, 10**n):\n        if can_make_number(str(i)):\n            max_num = i\n    \n    return max_num if max_num else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append([int(digit) for digit in input().split()])\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for face in range(6):\n                if cubes[_][face] == 6:\n                    return False\n                elif cubes[_][face] == 9:\n                    used_digits.add(6)\n                else:\n                    used_digits.add(cubes[_][face])\n        \n        for num in range(1, x + 1):\n            digits = str(num)\n            if len(digits) > 6:\n                return False\n            if any(digit not in used_digits for digit in digits):\n                return False\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 100000):  # Arbitrary large limit\n        if can_make_number(x):\n            max_x = x\n    \n    return max_x if max_x != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cube = [int(digit) for digit in input().split()]\n        cubes.append(cube)\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(len(digits)):\n            if digits[i] == '6' and '9' in digits:\n                return False\n            if digits[i] == '9' and '6' in digits:\n                return False\n        return True\n    \n    max_x = 0\n    for num in range(1, 10**n + 1):\n        if can_make_number(num):\n            max_x = num\n            break\n    \n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cube = tuple(map(int, input().split()))\n        cubes.append(cube)\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    max_num = 0\n    for i in range(1, 10**n):\n        if can_make_number(str(i)):\n            max_num = i\n    \n    return max_num if max_num else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n, cubes):\n    max_num = 0\n    for i in range(1, 10):\n        found = False\n        for cube in cubes:\n            num_str = ''.join(map(str, cube))\n            if num_str.startswith(str(i)):\n                found = True\n                break\n        if found:\n            max_num = max(max_num, i)\n    return max_num\n\nif True:\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, cubes))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[i][_] == 6:\n                    return False\n                elif cubes[i][_] == 9:\n                    return True\n                if cubes[i][_] in used_digits:\n                    return False\n                used_digits.add(cubes[i][_])\n        \n        digits = sorted([d for d in used_digits if d != 0])\n        num_str = ''.join(str(d) for d in digits)\n        return int(num_str) <= x\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n    \n    return max_x if max_x > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_digits = [False] * 10\n        for _ in range(6):\n            for d in cubes[_]:\n                if d == 6 or d == 9:\n                    continue\n                if used_digits[d]:\n                    return False\n                used_digits[d] = True\n        \n        for _ in range(6):\n            for d in cubes[_]:\n                if d == 6 or d == 9:\n                    continue\n                if not used_digits[d]:\n                    return False\n        \n        return True\n    \n    x = 0\n    while True:\n        if can_make_number(x + 1):\n            break\n        x += 1\n    \n    return x if x > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for cube in cubes:\n            num_str = ''.join(str(digit) for digit in cube)\n            if num_str.startswith(str(i)) and '6' not in num_str and '9' not in num_str:\n                found = True\n                break\n        if found:\n            max_number = max(max_number, i * 9 + sum(cube))\n    \n    return max_number if max_number > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2916666666666667,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.2916666666666667,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.08333333333333333,
    0.0,
    0.0,
    0.08333333333333333,
    0.041666666666666664,
    0.0,
    0.0,
    0.0625,
    0.0,
    0.08333333333333333,
    0.0,
    0.0,
    0.041666666666666664
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.08333333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.2708333333333333,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0625,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.20833333333333334,
    0.0,
    0.0,
    0.20833333333333334,
    0.2708333333333333,
    0.0,
    0.20833333333333334,
    0.16666666666666666,
    0.0,
    0.125,
    0.0,
    0.0,
    0.2708333333333333
  ],
  "time": [
    13.607720851898193,
    30.596262454986572,
    46.47130584716797,
    61.06157970428467,
    75.58162450790405,
    90.93540835380554,
    105.08627343177795,
    111.97617387771606,
    116.5567786693573,
    156.09908509254456,
    160.99826097488403,
    164.37618446350098,
    177.86098098754883,
    182.45675206184387,
    197.68961143493652,
    203.58624839782715,
    219.01256465911865,
    235.2691686153412,
    250.48770785331726,
    256.5640435218811,
    271.96813321113586,
    278.4804050922394,
    291.74433279037476,
    295.33118772506714,
    303.19378423690796,
    306.5340373516083,
    310.1710765361786,
    315.8055422306061,
    319.990602016449,
    326.45432806015015,
    340.69974160194397,
    354.1754951477051,
    357.2924656867981,
    366.6968836784363,
    371.03804326057434,
    374.62438225746155,
    381.4546854496002,
    394.4099590778351,
    397.4172434806824,
    401.5188672542572,
    407.10739493370056,
    410.1541223526001,
    414.57029819488525,
    418.8316969871521,
    424.75653648376465,
    433.77900528907776,
    437.9452269077301,
    441.263370513916,
    446.60708951950073,
    461.79504776000977,
    475.4754264354706
  ],
  "sample times": 51
}