{
  "prompt": "\nQUESTION:\nThe Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.\n\n\n-----Input-----\n\nThe single line contains three integers r, s and p (1 \u2264 r, s, p \u2264 100)\u00a0\u2014 the original number of individuals in the species of rock, scissors and paper, respectively.\n\n\n-----Output-----\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n0.333333333333 0.333333333333 0.333333333333\n\nInput\n2 1 2\n\nOutput\n0.150000000000 0.300000000000 0.550000000000\n\nInput\n1 1 3\n\nOutput\n0.057142857143 0.657142857143 0.285714285714\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    \n    # Calculate the probabilities using the formula derived from combinatorics\n    prob_rock = (r * (r - 1)) / (total * (total - 1))\n    prob_scissors = (s * (s - 1)) / (total * (total - 1))\n    prob_paper = (p * (p - 1)) / (total * (total - 1))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve():\n    r, s, p = map(int, input().split())\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "import math\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    \n    return round(prob_rock, 9), round(prob_scissors, 9), round(prob_paper, 9)\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def main():\n    r, s, p = map(int, input().split())\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "import sys\nfrom fractions import Fraction\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    \n    # Calculate the probability of each species being the last survivor\n    prob_rock = Fraction(r * (r - 1) * (r - 2), total * (total - 1) * (total - 2))\n    prob_scissors = Fraction(s * (s - 1) * (s - 2), total * (total - 1) * (total - 2))\n    prob_paper = Fraction(p * (p - 1) * (p - 2), total * (total - 1) * (total - 2))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def bad_luck_island(r, s, p):\n    total = r + s + p\n    prob_rock = (r * (s + p)) / total\n    prob_scissors = (s * (r + p)) / total\n    prob_paper = (p * (r + s)) / total\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = bad_luck_island(r, s, p)\n    print(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock = (r * s + r * p) / (r * s + r * p + s * p)\n    prob_scissors = (s * r + s * p) / (r * s + r * p + s * p)\n    prob_paper = (p * r + p * s) / (r * s + r * p + s * p)\n    \n    # Print the probabilities\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probabilities of each species surviving\n    prob_rock = (r * (s + p)) / total\n    prob_scissors = (s * (r + p)) / total\n    prob_paper = (p * (r + s)) / total\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "import sys\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, sys.stdin.read().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    def prob(r, s, p):\n        if r == 0 or s == 0 or p == 0:\n            return 0\n        elif r == 1 and s == 1 and p == 1:\n            return 1\n        else:\n            return (prob(r-1, s, p) + prob(r, s-1, p) + prob(r, s, p-1)) / 3\n    \n    return [prob(r, s, p), prob(s, p, r), prob(p, r, s)]\n\nif True:\n    r, s, p = map(int, input().split())\n    print(*solve(r, s, p))",
    "import sys\n\ndef main():\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Calculate the probabilities using the formula derived from combinatorial analysis\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    \n    # Print the probabilities with the required precision\n    print(f\"{prob_rock:.9f} {prob_scissors:.9f} {prob_paper:.9f}\")\n\nif True:\n    main()",
    "from typing import *\nimport math\n\ndef solve(r: int, s: int, p: int) -> List[float]:\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return [prob_rock, prob_scissors, prob_paper]\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    # Initialize the probabilities\n    prob_rock = r / (r + s + p)\n    prob_scissors = s / (r + s + p)\n    prob_paper = p / (r + s + p)\n\n    # Iterate until there's only one species left\n    while True:\n        # Calculate the new probabilities based on the current ones\n        new_prob_rock = (prob_scissors * prob_paper) / ((prob_scissors + prob_paper) * (prob_scissors + prob_paper))\n        new_prob_scissors = (prob_rock * prob_paper) / ((prob_rock + prob_paper) * (prob_rock + prob_paper))\n        new_prob_paper = (prob_rock * prob_scissors) / ((prob_rock + prob_scissors) * (prob_rock + prob_scissors))\n\n        # Check if the probabilities have converged\n        if abs(new_prob_rock - prob_rock) < 1e-9 and abs(new_prob_scissors - prob_scissors) < 1e-9 and abs(new_prob_paper - prob_paper) < 1e-9:\n            break\n\n        # Update the probabilities\n        prob_rock = new_prob_rock\n        prob_scissors = new_prob_scissors\n        prob_paper = new_prob_paper\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(*result)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "import sys\nfrom math import pow\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = pow((r / total), 2)\n    prob_scissors = pow((s / total), 2)\n    prob_paper = pow((p / total), 2)\n    \n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    input_data = sys.stdin.read().split()\n    r, s, p = map(int, input_data)\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    def simulate():\n        while True:\n            x, y = random.sample(range(1, r + s + p + 1), 2)\n            if x != y:\n                return x == 1\n\n    def calculate_probability(r, s, p):\n        total_simulations = 1000000\n        successful_simulations = sum(simulate() for _ in range(total_simulations))\n        return successful_simulations / total_simulations\n\n    return calculate_probability(r, s, p)\n\nif True:\n    import sys\n    input_data = sys.stdin.read().strip()\n    r, s, p = map(int, input_data.split())\n    result = solve(r, s, p)\n    print(result)",
    "import sys\n\ndef calculate_probabilities(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return prob_rock, prob_scissors, prob_paper\n\ndef main():\n    input_data = sys.stdin.read().strip()\n    r, s, p = map(int, input_data.split())\n    result = calculate_probabilities(r, s, p)\n    print(*result)\n\nif True:\n    main()",
    "import math\n\ndef solve():\n    r, s, p = map(int, input().split())\n    total = r + s + p\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rock = (r / total) * ((r - 1) / (total - 1))\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors = (s / total) * ((s - 1) / (total - 1))\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper = (p / total) * ((p - 1) / (total - 1))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve():\n    from fractions import Fraction\n    r, s, p = map(int, input().split())\n    total = r + s + p\n    prob_rock = Fraction(r, total)\n    prob_scissors = Fraction(s, total)\n    prob_paper = Fraction(p, total)\n    \n    # Calculate the probability that the rock will be the only surviving species\n    prob_rock_only = prob_rock * (prob_scissors + prob_paper)\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors_only = prob_scissors * (prob_rock + prob_paper)\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper_only = prob_paper * (prob_rock + prob_scissors)\n    \n    print(prob_rock_only, prob_scissors_only, prob_paper_only)\n\nif True:\n    solve()",
    "import sys\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    def probability(r, s, p):\n        if r == 0 or s == 0 or p == 0:\n            return 0\n        elif r == 1 and s == 1 and p == 1:\n            return 1\n        else:\n            return (r * probability(s, p, 0) + s * probability(r, p, 0) + p * probability(r, s, 0)) / (r + s + p)\n    \n    return [probability(r, s, 0), probability(r, s, 1), probability(r, s, 2)]\n\nif True:\n    r, s, p = map(int, input().split())\n    print(*solve(r, s, p))",
    "import math\n\ndef main():\n    r, s, p = map(int, input().split())\n    prob_rock = math.pow(r / (r + s + p), 2)\n    prob_scissors = math.pow(s / (r + s + p), 2)\n    prob_paper = math.pow(p / (r + s + p), 2)\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "def solve(r, s, p):\n    # Calculate the probabilities using the formula derived from combinatorial analysis\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input values\nr, s, p = map(int, input().split())\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(r, s, p)\n\n# Print the results\nprint(prob_rock, prob_scissors, prob_paper)",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(r: int, s: int, p: int) -> Tuple[float, float, float]:\n    # Initialize the probabilities\n    prob_rock = prob_scissors = prob_paper = 1.0\n    \n    # Iterate until there's only one species left\n    while True:\n        # Calculate the new probabilities based on the current ones\n        new_prob_rock = (prob_scissors + prob_paper) / 2\n        new_prob_scissors = (prob_rock + prob_paper) / 2\n        new_prob_paper = (prob_rock + prob_scissors) / 2\n        \n        # Check if there's only one species left\n        if new_prob_rock == 1.0 or new_prob_scissors == 1.0 or new_prob_paper == 1.0:\n            break\n        \n        # Update the probabilities\n        prob_rock = new_prob_rock\n        prob_scissors = new_prob_scissors\n        prob_paper = new_prob_paper\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input from stdin\ninput_data = sys.stdin.read().strip()\nr, s, p = map(int, input_data.split())\n\n# Solve the problem\nresult = solve(r, s, p)\n\n# Print the result\nprint(*result)",
    "import math\n\ndef calculate_probabilities(r, s, p):\n    total_individuals = r + s + p\n    probabilities = [0] * 3\n    \n    # Calculate the probability that the rock species will be the only surviving species\n    if r > 0:\n        probabilities[0] = (r / total_individuals) * ((r - 1) / (total_individuals - 1))\n    \n    # Calculate the probability that the scissors species will be the only surviving species\n    if s > 0:\n        probabilities[1] = (s / total_individuals) * ((s - 1) / (total_individuals - 1))\n    \n    # Calculate the probability that the paper species will be the only surviving species\n    if p > 0:\n        probabilities[2] = (p / total_individuals) * ((p - 1) / (total_individuals - 1))\n    \n    return probabilities\n\ndef main():\n    r, s, p = map(int, input().split())\n    probabilities = calculate_probabilities(r, s, p)\n    print(*probabilities)\n\nif True:\n    main()",
    "def solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rock = (r / total) * ((r - 1) / (total - 1))\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors = (s / total) * ((s - 1) / (total - 1))\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper = (p / total) * ((p - 1) / (total - 1))\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    r, s, p = data\n    prob_r = (r * (r - 1)) / ((r + s + p) * (r + s + p - 1))\n    prob_s = (s * (s - 1)) / ((r + s + p) * (r + s + p - 1))\n    prob_p = (p * (p - 1)) / ((r + s + p) * (r + s + p - 1))\n    print(prob_r, prob_s, prob_p)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    # Initialize probabilities\n    prob_rock = r / (r + s + p)\n    prob_scissors = s / (r + s + p)\n    prob_paper = p / (r + s + p)\n\n    # Iterate until only one species remains\n    while True:\n        # Calculate new probabilities based on the current ones\n        new_prob_rock = (prob_scissors * prob_paper) / ((prob_scissors + prob_paper) * (prob_scissors + prob_paper))\n        new_prob_scissors = (prob_rock * prob_paper) / ((prob_rock + prob_paper) * (prob_rock + prob_paper))\n        new_prob_paper = (prob_rock * prob_scissors) / ((prob_rock + prob_scissors) * (prob_rock + prob_scissors))\n\n        # Check if only one species remains\n        if new_prob_rock == 1 or new_prob_scissors == 1 or new_prob_paper == 1:\n            break\n\n        # Update probabilities\n        prob_rock = new_prob_rock\n        prob_scissors = new_prob_scissors\n        prob_paper = new_prob_paper\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = (r / total) * ((s + p) / (total - 1))\n    prob_s = (s / total) * ((r + p) / (total - 1))\n    prob_p = (p / total) * ((r + s) / (total - 1))\n    return prob_r, prob_s, prob_p\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    # Calculate the probability of each species surviving\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve(r,s,p):\n    total = r + s + p\n    prob_rock = (r * (s + p)) / total\n    prob_scissors = (s * (r + p)) / total\n    prob_paper = (p * (r + s)) / total\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    if total == 1:\n        return [1, 0, 0]\n    \n    # Calculate the probabilities using the formula derived from combinatorics\n    prob_rock = (r * (r - 1)) / ((total * (total - 1)))\n    prob_scissors = (s * (s - 1)) / ((total * (total - 1)))\n    prob_paper = (p * (p - 1)) / ((total * (total - 1)))\n    \n    return [prob_rock, prob_scissors, prob_paper]\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(' '.join(map(str, result)))",
    "def solve():\n    import sys\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    # Calculate the probability that the first species will be the only survivor\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    # Calculate the probability that the second species will be the only survivor\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    # Calculate the probability that the third species will be the only survivor\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "import math\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rock = (r / total) * ((r - 1) / (total - 1))\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors = (s / total) * ((s - 1) / (total - 1))\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper = (p / total) * ((p - 1) / (total - 1))\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def main():\n    def solve(r, s, p):\n        total = r + s + p\n        prob_rock = (r / total) * ((s + p) / (total - 1))\n        prob_scissors = (s / total) * ((r + p) / (total - 1))\n        prob_paper = (p / total) * ((r + s) / (total - 1))\n        return prob_rock, prob_scissors, prob_paper\n    \n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    input = sys.stdin.read().strip()\n    data = list(map(int, input.split()))\n    r, s, p = data\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock = (r * s + r * p) / (r * s + r * p + s * p)\n    prob_scissors = (s * r + s * p) / (r * s + r * p + s * p)\n    prob_paper = (p * r + p * s) / (r * s + r * p + s * p)\n    \n    # Print the probabilities\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "def solve(r, s, p):\n    def prob(n, k):\n        return n * (n - 1) / (k * (k - 1))\n    \n    # Calculate the probability that the first species will be the only survivor\n    prob_rock = prob(r, r + s + p)\n    \n    # Calculate the probability that the second species will be the only survivor\n    prob_scissors = prob(s, r + s + p)\n    \n    # Calculate the probability that the third species will be the only survivor\n    prob_paper = prob(p, r + s + p)\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\nr, s, p = map(int, input().split())\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(r, s, p)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    # Calculate probabilities using the formula derived from combinatorial analysis\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input values\nr, s, p = map(int, input().split())\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(r, s, p)\n\n# Print the results\nprint(prob_rock, prob_scissors, prob_paper)",
    "from fractions import Fraction\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = Fraction(r, total)\n    prob_scissors = Fraction(s, total)\n    prob_paper = Fraction(p, total)\n\n    # Calculate the probability that the rock will be the last survivor\n    prob_rock_last = prob_rock * (prob_scissors + prob_paper)\n\n    # Calculate the probability that the scissors will be the last survivor\n    prob_scissors_last = prob_scissors * (prob_rock + prob_paper)\n\n    # Calculate the probability that the paper will be the last survivor\n    prob_paper_last = prob_paper * (prob_rock + prob_scissors)\n\n    return prob_rock_last, prob_scissors_last, prob_paper_last\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    \n    # Calculate the probability that the rock species will be the only surviving species\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    \n    # Calculate the probability that the scissors species will be the only surviving species\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    \n    # Calculate the probability that the paper species will be the only surviving species\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(*input_data)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve():\n    r, s, p = map(int, input().split())\n    \n    # Calculate the probabilities using the formula derived from combinatorial analysis\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    def simulate(r, s, p):\n        while True:\n            pairs = [(r, s), (s, p), (p, r)]\n            killed = False\n            for i, j in pairs:\n                if i > j:\n                    killed = True\n                    break\n            if not killed:\n                return r, s, p\n            r -= 1\n            s -= 1\n            p -= 1\n\n    result = simulate(r, s, p)\n    return result[0] / sum(result)\n\nif True:\n    r, s, p = map(int, input().split())\n    print(solve(r, s, p))",
    "import sys\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probabilities\n    prob_rock = (r * (s + p)) / (total * (total - 1))\n    prob_scissors = (s * (r + p)) / (total * (total - 1))\n    prob_paper = (p * (r + s)) / (total * (total - 1))\n    \n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    # Read input\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Solve the problem\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    \n    # Print the output\n    print(prob_rock, prob_scissors, prob_paper)",
    "import math\n\ndef solve(r, s, p):\n    def prob(r, s, p):\n        if r == 0 or s == 0 or p == 0:\n            return 0\n        elif r == 1 and s == 1 and p == 1:\n            return 1\n        else:\n            return (r * prob(s, p, r) + s * prob(r, p, s) + p * prob(r, s, p)) / (r + s + p)\n\n    return [prob(r, s, p), prob(s, r, p), prob(p, r, s)]\n\nif True:\n    r, s, p = map(int, input().split())\n    print(*solve(r, s, p))",
    "import sys\n\ndef solve(r, s, p):\n    if r == 0 or s == 0 or p == 0:\n        return [0, 0, 0]\n    \n    # Calculate the probabilities using the formula derived from combinatorial analysis\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    \n    return [prob_rock, prob_scissors, prob_paper]\n\nif True:\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    result = solve(*data)\n    print(' '.join(map(str, result)))",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    r, s, p = map(int, data)\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    \n    # Print the probabilities with the required precision\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "def badluck_island(r, s, p):\n    total = r + s + p\n    prob_rock = (r * (s + p)) / total\n    prob_scissors = (s * (r + p)) / total\n    prob_paper = (p * (r + s)) / total\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = badluck_island(r, s, p)\n    print(*result)",
    "import sys\n\ndef main():\n    data = list(map(int, sys.stdin.read().split()))\n    r, s, p = data\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock = (r * s + r * p) / (r * s + r * p + s * p)\n    prob_scissors = (s * r + s * p) / (r * s + r * p + s * p)\n    prob_paper = (p * r + p * s) / (r * s + r * p + s * p)\n    \n    # Print the probabilities\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    main()",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = r / total\n    prob_scissors = s / total\n    prob_paper = p / total\n    \n    # Calculate the probability that the rock will be the last survivor\n    prob_rock_last = prob_rock * (prob_scissors + prob_paper)\n    \n    # Calculate the probability that the scissors will be the last survivor\n    prob_scissors_last = prob_scissors * (prob_rock + prob_paper)\n    \n    # Calculate the probability that the paper will be the last survivor\n    prob_paper_last = prob_paper * (prob_rock + prob_scissors)\n    \n    return prob_rock_last, prob_scissors_last, prob_paper_last\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.020833333333333332,
    0.0,
    0.020833333333333332,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.020833333333333332,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    3.5529139041900635,
    7.113093137741089,
    10.07081127166748,
    13.847121477127075,
    16.943270444869995,
    21.479319095611572,
    24.73399591445923,
    28.850709199905396,
    32.701966524124146,
    36.11537408828735,
    39.82789468765259,
    55.580676317214966,
    59.394867181777954,
    66.91913628578186,
    70.19262051582336,
    73.2913064956665,
    77.10552525520325,
    90.87768912315369,
    94.99281239509583,
    99.54282212257385,
    102.61498355865479,
    106.51631474494934,
    109.04530024528503,
    112.92620801925659,
    119.578937292099,
    127.22956848144531,
    132.4037115573883,
    135.89263153076172,
    142.71402788162231,
    155.57338452339172,
    159.2222626209259,
    162.05403995513916,
    166.000741481781,
    169.00153732299805,
    173.3907675743103,
    178.3663101196289,
    181.99396204948425,
    186.01924109458923,
    190.69428491592407,
    194.95553970336914,
    199.7958526611328,
    204.35553336143494,
    207.32630920410156,
    210.8490698337555,
    225.29916763305664,
    229.12002277374268,
    235.28076124191284,
    238.8725733757019,
    241.9002754688263,
    245.6240758895874,
    249.86492609977722
  ],
  "sample times": 51
}