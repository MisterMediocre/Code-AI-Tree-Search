{
  "prompt": "\nQUESTION:\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4 2\n11 0 0 14\n5 4\n\nOutput\nYes\n\nInput\n6 1\n2 3 0 8 9 10\n5\n\nOutput\nNo\n\nInput\n4 1\n8 94 0 4\n89\n\nOutput\nYes\n\nInput\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < len(a):\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if a == sorted(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    def check_sequence(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n    \n    def find_non_increasing_subseq(seq):\n        non_increasing = []\n        for num in seq:\n            while non_increasing and num >= non_increasing[-1]:\n                non_increasing.pop()\n            non_increasing.append(num)\n        return non_increasing\n    \n    def replace_zeros_with_b(a, b):\n        non_increasing = find_non_increasing_subseq(b)\n        result = [num if num != 0 else non_increasing.pop(0) for num in a]\n        return result\n    \n    result = replace_zeros_with_b(a, b)\n    if check_sequence(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b.pop(0))\n        else:\n            result.append(a[i])\n    \n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def check_sequence(n, k, a, b):\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    \n    for num in b:\n        count_b[num] += 1\n    \n    # Check if there are any numbers in a that are not in b\n    for i in range(1, 201):\n        if count_a[i] > count_b[i]:\n            return False\n    \n    # Check if there are any numbers in b that are not in a\n    for i in range(1, 201):\n        if count_b[i] > count_a[i]:\n            return False\n    \n    # Check if the sequence is increasing\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            return False\n    \n    return True\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if check_sequence(n, k, a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve(n, k, a, b):\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    \n    for num in b:\n        count_b[num] += 1\n    \n    # Check if there are enough numbers in b to replace all zeros in a\n    if sum(count_a[i] > 0 for i in range(1, 201)) < k:\n        return \"No\"\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(k):\n        if count_b[b[i]] == 0:\n            return \"No\"\n        \n        count_b[b[i]] -= 1\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            return \"No\"\n    \n    return \"Yes\"\n\n# Read input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Solve the problem\nprint(solve(n, k, a, b))",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b.pop(0))\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n\n    # Check if there are enough numbers in b to replace all zeros in a\n    if sum(count_a[i] > 0 for i in range(1, 201)) < k:\n        return \"No\"\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest number in b that hasn't been used yet\n            for j in range(1, 201):\n                if count_b[j] > 0:\n                    a[i] = j\n                    count_b[j] -= 1\n                    break\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n    \n    # Check if there are any numbers in a that are not in b\n    for i in range(201):\n        if count_a[i] > count_b[i]:\n            return \"No\"\n    \n    # Check if there are any numbers in b that are not in a\n    for i in range(201):\n        if count_b[i] > count_a[i]:\n            return \"No\"\n    \n    # Check if there are any numbers in a that are greater than those in b\n    for i in range(201):\n        if count_a[i] > count_b[i] and count_a[i] != 0:\n            return \"No\"\n    \n    # Check if there are any numbers in b that are greater than those in a\n    for i in range(201):\n        if count_b[i] > count_a[i] and count_b[i] != 0:\n            return \"No\"\n    \n    # If all checks pass, the sequence can be replaced without making it increasing\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n\n    # Check if there are enough numbers in b to replace all zeros in a\n    if sum(count_a[i] > 0 for i in range(1, 201)) < k:\n        return \"No\"\n\n    # Try to replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest number in b that hasn't been used yet\n            min_num = min([num for num in b if count_b[num] > 0])\n            result.append(min_num)\n            count_b[min_num] -= 1\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Find the maximum value in b\n    max_b = max(b)\n    \n    # Check if all values in a are less than or equal to max_b\n    if all(a[i] <= max_b for i in range(n)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if the sum of all elements in a is less than or equal to the sum of all elements in b\n    if sum(a) > sum(b):\n        return \"No\"\n    \n    # Sort the elements in a and b\n    a.sort()\n    b.sort()\n    \n    # Iterate through the elements in a\n    for i in range(n):\n        # If the current element in a is greater than the corresponding element in b, return \"No\"\n        if a[i] > b[i]:\n            return \"No\"\n        \n        # If the current element in a is equal to the corresponding element in b, skip it\n        elif a[i] == b[i]:\n            continue\n        \n        # Otherwise, replace the current element in a with the next available element in b\n        else:\n            j = i + 1\n            while j < n and a[j] <= b[i]:\n                j += 1\n            if j == n:\n                return \"No\"\n            a[i], a[j - 1] = a[j - 1], a[i]\n    \n    # Return \"Yes\" if the resulting sequence is not increasing\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Find the maximum value in b\n    max_b = max(b)\n\n    # Check if all values in a are less than or equal to max_b\n    if any(a[i] > max_b for i in range(n)):\n        return \"No\"\n\n    # Sort b in descending order\n    b.sort(reverse=True)\n\n    # Try replacing zeros in a with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            a[i] = b.pop()\n\n    # Check if the resulting sequence is not increasing\n    if all(a[i] <= a[i + 1] for i in range(n - 1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n    \n    # Find the maximum value in b\n    max_b = max(b)\n    \n    # Create a new sequence where each zero is replaced by a non-zero value from b\n    new_sequence = []\n    for i in range(n):\n        if a[i] == 0:\n            new_sequence.append(max_b)\n        else:\n            new_sequence.append(a[i])\n    \n    # Check if the new sequence is increasing\n    if new_sequence == sorted(new_sequence):\n        return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if the sum of all elements in a is less than or equal to the sum of all elements in b\n    if sum(a) > sum(b):\n        return \"No\"\n\n    # Sort the elements in a and b\n    a.sort()\n    b.sort()\n\n    # Iterate through the elements in a\n    for i in range(n):\n        # If the current element in a is greater than the corresponding element in b, return \"No\"\n        if a[i] > b[i]:\n            return \"No\"\n\n    # If all elements in a are less than or equal to the corresponding elements in b, return \"Yes\"\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a new sequence where each zero is replaced by a unique element from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(max_b)\n            max_b -= 1\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if result == sorted(result):\n        return \"No\"\n    else:\n        return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are any duplicates in a or b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n    \n    # Find the maximum value in a\n    max_a = max(a)\n    \n    # Create a set of all numbers from 1 to max_a\n    num_set = set(range(1, max_a + 1))\n    \n    # Try to find a valid replacement for each zero in a\n    for i in range(k):\n        if a[i] == 0:\n            # If the current number in b is already used, try the next one\n            while b[i] in num_set:\n                i += 1\n                if i >= k:\n                    return \"No\"\n            num_set.remove(b[i])\n            a[i] = b[i]\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique elements in b to replace all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b.pop(0))\n        else:\n            result.append(a[i])\n    \n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are any duplicates in a or b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a set of all numbers from 1 to max_a\n    num_set = set(range(1, max_a + 1))\n\n    # Iterate through the sequence a\n    for i in range(n):\n        if a[i] == 0:\n            # If the current element is zero, check if we have enough unique numbers left\n            if len(num_set) < k:\n                return \"No\"\n            # Replace the zero with a unique number from the set\n            a[i] = next(iter(num_set))\n            # Remove the used number from the set\n            num_set.remove(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough distinct numbers in b to replace all zeros in a\n    distinct_b = set(b)\n    if len(distinct_b) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            if b[0] not in distinct_b:\n                print(\"No\")\n                return\n            else:\n                distinct_b.remove(b[0])\n                a[i] = b[0]\n                b.pop(0)\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there's enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b.pop(0))\n        else:\n            result.append(a[i])\n    \n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique elements in b to replace all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b.pop(0))\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    \n    for num in b:\n        count_b[num] += 1\n    \n    for i in range(n):\n        if a[i] == 0:\n            if count_b[b[i]] > 0:\n                count_b[b[i]] -= 1\n            else:\n                return \"No\"\n    \n    for i in range(n):\n        if a[i] != 0:\n            if count_a[a[i]] > 0:\n                count_a[a[i]] -= 1\n            else:\n                return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough distinct numbers in b to replace all zeros in a\n    distinct_b = set(b)\n    if len(distinct_b) < k:\n        return \"No\"\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            if b[0] not in distinct_b:\n                return \"No\"\n            else:\n                distinct_b.remove(b[0])\n                a[i] = b[0]\n                b.pop(0)\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try all possible replacements\n    for i in range(n):\n        if a[i] == 0:\n            # Replace with a unique number from b\n            for j in range(k):\n                if b[j] not in a[:i]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there's enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < k:\n        return \"No\"\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available number in b\n            min_b = min(b)\n            # Replace the zero with the smallest available number\n            a[i] = min_b\n            # Remove the replaced number from b\n            b.remove(min_b)\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are more zeros than available numbers in b\n    if sum(a) < len(b):\n        return \"No\"\n    \n    # Sort b in descending order\n    b.sort(reverse=True)\n    \n    # Try replacing zeros with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            a[i] = b.pop()\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Find the smallest number in b that is greater than all elements in a\n    min_b = float('inf')\n    for num in b:\n        if num > max(a):\n            min_b = num\n            break\n\n    # Replace zeros in a with the smallest number found\n    for i in range(k):\n        if a[i] == 0:\n            a[i] = min_b\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if len(b) != k:\n        return \"No\"\n    \n    # Check if all numbers in b are unique\n    if len(set(b)) < len(b):\n        return \"No\"\n    \n    # Check if all numbers in a are unique\n    if len(set(a)) < len(a):\n        return \"No\"\n    \n    # Check if there are any duplicates between a and b\n    for i in range(n):\n        if a[i] == 0 and b[i % k] == 0:\n            return \"No\"\n    \n    # Check if the sequence is increasing\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there's a zero in a\n    if 0 not in a:\n        print(\"No\")\n        return\n    \n    # Find the maximum value in b\n    max_b = max(b)\n    \n    # Create a set to store unique values from b\n    unique_b = set(b)\n    \n    # Iterate through a and replace zeros with values from b\n    for i in range(n):\n        if a[i] == 0:\n            # Check if the current value in b is less than or equal to the maximum value in a\n            if b[i] <= max_b:\n                a[i] = b[i]\n                unique_b.remove(b[i])\n            else:\n                print(\"No\")\n                return\n    \n    # Check if all values in b have been used\n    if len(unique_b) != 0:\n        print(\"No\")\n        return\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are duplicate numbers in a or b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a set of all possible values in b\n    possible_values = set(b)\n\n    # Iterate through each element in a\n    for i in range(n):\n        # If the current element is zero, find a non-zero value from b\n        if a[i] == 0:\n            # Check if there are enough unique values left in b\n            if len(possible_values) < max_a + 1:\n                return \"No\"\n            \n            # Remove the found value from b\n            possible_values.remove(max_a + 1)\n        \n        # If the current element is not zero, check if it is less than the next element\n        elif a[i] >= a[i+1]:\n            return \"No\"\n\n    # If all checks pass, the sequence is not increasing\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b to cover all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available number in b\n            min_b = min(b)\n            # Replace the zero with the smallest available number\n            a[i] = min_b\n            # Remove the replaced number from b\n            b.remove(min_b)\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b to cover all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available number in b\n            min_b = min(b)\n            # Replace the zero with the smallest available number\n            a[i] = min_b\n            # Remove the replaced number from b\n            b.remove(min_b)\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check for duplicates in a and b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n    \n    # Find the maximum value in a\n    max_a = max(a)\n    \n    # Create a set of all numbers from 1 to max_a\n    num_set = set(range(1, max_a + 1))\n    \n    # Try to find a valid replacement for each zero in a\n    for i in range(k):\n        if a[i] == 0:\n            # If the current number in b is already used, try the next one\n            while b[i] in num_set:\n                i += 1\n                if i >= k:\n                    return \"No\"\n            num_set.remove(b[i])\n            a[i] = b[i]\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough elements in b to replace all zeros in a\n    if len(b) < sum(a):\n        return \"No\"\n    \n    # Sort b in ascending order\n    b.sort()\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element in b that is greater than the current zero in a\n            j = bisect.bisect_left(b, a[i])\n            if j < len(b):\n                a[i] = b[j]\n            else:\n                return \"No\"\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b to fill all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Try to replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available number in b\n            min_b = min(b)\n            # Replace the zero with the smallest available number\n            a[i] = min_b\n            # Remove the replaced number from b\n            b.remove(min_b)\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    count_a = [0] * 201\n    count_b = [0] * 201\n\n    for num in a:\n        count_a[num] += 1\n\n    for num in b:\n        count_b[num] += 1\n\n    for i in range(n):\n        if a[i] == 0:\n            if count_b[b[i]] > 0:\n                count_b[b[i]] -= 1\n            else:\n                return \"No\"\n    \n    for i in range(n):\n        if a[i] != 0:\n            if count_a[a[i]] > 0:\n                count_a[a[i]] -= 1\n            else:\n                return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there is any duplicate element in a or b\n    if len(set(a)) != n or len(set(b)) != k:\n        return \"No\"\n    \n    # Find the maximum value in a\n    max_a = max(a)\n    \n    # Create a new sequence where each zero is replaced by a unique element from b\n    result = [b[i] if a[i] == 0 else a[i] for i in range(n)]\n    \n    # Check if the resulting sequence is not increasing\n    if all(result[i] <= result[i+1] for i in range(n-1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b to fill all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try to replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available number in b\n            min_b = min(b)\n            # Replace the zero with the smallest available number\n            a[i] = min_b\n            # Remove the replaced number from b\n            b.remove(min_b)\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough elements in b to replace all zeros in a\n    if len(b) < sum(a):\n        return \"No\"\n\n    # Sort b in ascending order\n    b.sort()\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element in b that is greater than the current zero in a\n            j = bisect.bisect_left(b, a[i])\n            if j < len(b):\n                a[i] = b[j]\n            else:\n                return \"No\"\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if all numbers in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n    \n    # Find the maximum value in a\n    max_a = max(a)\n    \n    # Create a new sequence where each zero is replaced by a unique number from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(max_b)\n            max_b -= 1\n        else:\n            result.append(a[i])\n    \n    # Check if the resulting sequence is increasing\n    if result == sorted(result):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    def check_sequence(seq):\n        return all(seq[i] <= seq[i + 1] for i in range(n - 1))\n\n    def find_non_increasing_index(seq):\n        for i in range(n - 1, -1, -1):\n            if seq[i] > seq[i + 1]:\n                return i\n        return -1\n\n    def replace_zeros_with_b(a, b):\n        non_increasing_index = find_non_increasing_index(a)\n        if non_increasing_index == -1:\n            return False\n\n        for i in range(non_increasing_index + 1, n):\n            if b[0] < a[i]:\n                a[i] = b.pop(0)\n                break\n\n        return True\n\n    if replace_zeros_with_b(a, b):\n        if check_sequence(a):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique elements in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in a[:i]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there is any duplicate element in a or b\n    if len(set(a)) != n or len(set(b)) != k:\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a new sequence where each zero is replaced by the largest available non-zero value\n    result = [max_a if x == 0 else x for x in a]\n\n    # Check if the resulting sequence is increasing\n    if all(result[i] <= result[i + 1] for i in range(n - 1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def check_sequence(a, b):\n    n = len(a)\n    k = a.count(0)\n    if k > len(b):\n        return False\n    \n    # Create a set of unique numbers from a and b\n    unique_numbers = set(a + b)\n    \n    # Check if all numbers in a and b are unique\n    if len(unique_numbers) != n + k:\n        return False\n    \n    # Sort the combined list of numbers\n    sorted_numbers = sorted(a + b)\n    \n    # Check if the sorted list is strictly increasing\n    for i in range(n - 1):\n        if sorted_numbers[i] >= sorted_numbers[i + 1]:\n            return False\n    \n    return True\n\ndef main():\n    input_data = input().split()\n    n, k = map(int, input_data[0:2])\n    a = list(map(int, input_data[2:n+2]))\n    b = list(map(int, input_data[n+2:]))\n    \n    result = check_sequence(a, b)\n    print(\"Yes\" if result else \"No\")\n\nif True:\n    main()",
    "def check_sequence(a, b):\n    # Check if the sequence is already non-increasing\n    if all(a[i] >= a[i+1] for i in range(len(a)-1)):\n        return False\n    \n    # Create a set of unique elements from a and b\n    unique_elements = set(a + b)\n    \n    # Check if there are duplicates in the set\n    if len(unique_elements) != len(a + b):\n        return False\n    \n    # Replace zeros in a with elements from b\n    result = [b[i] if a[i] == 0 else a[i] for i in range(len(a))]\n    \n    # Check if the resulting sequence is non-increasing\n    if all(result[i] >= result[i+1] for i in range(len(result)-1)):\n        return True\n    \n    return False\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if check_sequence(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique elements in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Find the smallest element in b that is greater than all elements in a\n    min_b = float('inf')\n    for i in range(k):\n        if b[i] > max(a):\n            min_b = b[i]\n            break\n\n    # Replace zeros in a with the smallest element found\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = min_b\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check for duplicates in a and b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a set of all numbers from 1 to max_a\n    num_set = set(range(1, max_a + 1))\n\n    # Try to find a valid replacement for each zero in a\n    for i in range(k):\n        if a[i] == 0:\n            # If the current number in b is already used, skip it\n            if b[i] in num_set:\n                continue\n            # Otherwise, add it to the set of used numbers\n            num_set.add(b[i])\n            # Replace the zero in a with the current number in b\n            a[i] = b[i]\n\n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique elements in b to cover all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest available element from b\n            min_b = min(b)\n            # Replace the zero with the smallest available element\n            a[i] = min_b\n            # Remove the replaced element from b\n            b.remove(min_b)\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if all numbers in a and b are unique except for 0\n    if len(set(a + b)) != len(a + b) - 1:\n        return \"No\"\n\n    # Find the maximum value in a\n    max_a = max(a)\n\n    # Create a set to store the values we have already used\n    used_values = set()\n\n    # Try to replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest value greater than the current maximum in b\n            next_value = min(b[b.index(max_a) + 1:])\n            # Add the next value to the used set and update a[i]\n            used_values.add(next_value)\n            a[i] = next_value\n            # Update the maximum value in a\n            max_a = max(max_a, next_value)\n\n    # Check if the resulting sequence is not increasing\n    if a[0] > a[1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough distinct numbers in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try all possible replacements\n    for i in range(n):\n        if a[i] == 0:\n            # Replace with a distinct number from b\n            for j in range(k):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if a[0] > a[1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b\n    if len(b) < n - k:\n        print(\"No\")\n        return\n    \n    # Sort b to find the smallest possible replacement\n    b.sort()\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest possible replacement from b\n            for j in range(k):\n                if b[j] > a[i]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if all(a[i] <= a[i + 1] for i in range(n - 1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.14893617021276595,
    0.0,
    0.8723404255319149,
    0.14893617021276595,
    0.2978723404255319,
    0.8723404255319149,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8723404255319149,
    0.0,
    0.8723404255319149,
    0.8723404255319149,
    0.8723404255319149,
    0.0,
    0.0,
    0.8723404255319149,
    0.0,
    0.0,
    0.8085106382978723,
    0.0,
    0.23404255319148937,
    0.0,
    0.723404255319149,
    0.723404255319149,
    0.0,
    0.0,
    0.723404255319149,
    0.0,
    0.0,
    0.723404255319149,
    0.0,
    0.0,
    0.0,
    0.1276595744680851,
    0.0,
    0.851063829787234,
    0.10638297872340426,
    0.8297872340425532,
    0.0,
    0.723404255319149,
    0.0,
    0.3617021276595745,
    0.2765957446808511
  ],
  "train rewards": [
    0.2765957446808511,
    0.0,
    0.8297872340425532,
    0.2765957446808511,
    0.3404255319148936,
    0.8297872340425532,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8297872340425532,
    0.0,
    0.8297872340425532,
    0.8297872340425532,
    0.8297872340425532,
    0.0,
    0.0,
    0.8297872340425532,
    0.0,
    0.0,
    0.6808510638297872,
    0.0,
    0.14893617021276595,
    0.0,
    0.7659574468085106,
    0.7659574468085106,
    0.0,
    0.0,
    0.7659574468085106,
    0.0,
    0.0,
    0.7659574468085106,
    0.0,
    0.0,
    0.0,
    0.1702127659574468,
    0.0,
    0.723404255319149,
    0.10638297872340426,
    0.7021276595744681,
    0.0,
    0.7659574468085106,
    0.0,
    0.5106382978723404,
    0.3191489361702128
  ],
  "time": [
    10.322853326797485,
    16.594234704971313,
    21.09701633453369,
    28.56050729751587,
    35.67822074890137,
    39.38504600524902,
    47.35744118690491,
    55.505932331085205,
    62.20603919029236,
    64.53913593292236,
    71.37448596954346,
    75.90163993835449,
    79.9562156200409,
    84.10126066207886,
    88.17245435714722,
    94.43438220024109,
    97.95374774932861,
    104.01282501220703,
    108.41240191459656,
    112.00450038909912,
    115.505117893219,
    120.1771650314331,
    124.70192646980286,
    128.33704662322998,
    132.63441014289856,
    136.3906648159027,
    140.549480676651,
    145.26950335502625,
    151.59902811050415,
    157.95616269111633,
    162.19713830947876,
    166.3952054977417,
    172.68405032157898,
    177.696053981781,
    181.911283493042,
    186.56875824928284,
    190.82623028755188,
    195.24364399909973,
    200.36607480049133,
    204.65377521514893,
    210.6108238697052,
    214.4699227809906,
    218.54302740097046,
    224.88011240959167,
    231.3498980998993,
    235.6312644481659,
    241.7984664440155,
    246.04547214508057,
    252.3067901134491,
    256.010865688324,
    260.4444932937622
  ],
  "sample times": 51
}