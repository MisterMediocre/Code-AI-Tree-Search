{
  "prompt": "\nQUESTION:\nThis morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.\n\nHe decided to accomplish this by closing every $k$-th ($2 \\leq k \\leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \\cdot k$ that satisfy the following condition: $1 \\leq c \\leq n$ and $i$ is an integer (it may be positive, negative or zero).\n\nFor example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.\n\nAfter closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq k < n \\leq 100$) \u2014 the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n\n\n-----Examples-----\nInput\n4 2\n1 1 -1 1\n\nOutput\n2\n\nInput\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.\n\nIn the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k):\n    tabs = [int(input()) for _ in range(n)]\n    e, s = sum(tabs), 0\n    for i in range(1, n):\n        if i % k == 0:\n            tabs[i] = 0\n            s += 1\n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    return max_diff\n\nif True:\n    solve()",
    "def max_diff(n, k, tabs):\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Calculate and print the result\nprint(max_diff(n, k, tabs))",
    "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    tabs = list(map(int, sys.stdin.readline().split()))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k, tabs):\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = 0\n    \n    for b in range(1, n):\n        count_e = 0\n        count_s = 0\n        \n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tabs))",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(1, n // k + 1):\n        e -= sum(tabs[(i * k - 1):i * k])\n        s -= sum(tabs[(i * k):i * k + 1])\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_network_tabs = [-1] * n\n    \n    # Close every k-th tab\n    for i in range(1, n):\n        if i % k == 0:\n            info_tabs[i - 1] = 0\n            social_network_tabs[i - 1] = 0\n    \n    # Calculate the amount of remaining tabs of different types\n    e = sum(info_tabs)\n    s = sum(social_network_tabs)\n    \n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ninfo_tabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k):\n    # Read the input\n    info = list(map(int, input().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = sum(info)\n    s = len([i for i in info if i == -1])\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    return max_diff\n\n# Main function to handle multiple test cases\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        result = solve(n, k)\n        print(result)\n\nif True:\n    main()",
    "def main():\n    # Read input\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = sum(tab_types)\n    s = len([tab for tab in tab_types if tab == -1])\n    \n    # Close every k-th tab starting from the first one\n    for i in range(1, n):\n        if i % k == 0:\n            e -= tab_types[i - 1]\n            s += tab_types[i - 1]\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    # Print the result\n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k, tab_types):\n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    max_diff = 0\n    \n    for b in range(1, n):\n        count_e = 0\n        count_s = 0\n        \n        for i in range(b, n, k):\n            if tab_types[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntab_types = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tab_types))",
    "def max_difference(n, k, tabs):\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Calculate and print the result\nprint(max_difference(n, k, tabs))",
    "def solve(n, k):\n    tabs_info = [int(input()) for _ in range(n)]\n    e, s = sum(tabs_info), 0\n    \n    for i in range(1, n):\n        if i % k == 0:\n            if tabs_info[i - 1] == 1:\n                e -= 1\n            else:\n                s += 1\n                \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def main():\n    import sys\n\n    def solve(n, k):\n        tabs = list(map(int, sys.stdin.readline().split()))\n        e = sum(1 for t in tabs if t == 1)\n        s = sum(1 for t in tabs if t == -1)\n        \n        max_diff = 0\n        for b in range(1, n):\n            count_e = count_s = 0\n            for i in range(b, n, k):\n                if tabs[i] == 1:\n                    count_e += 1\n                else:\n                    count_s += 1\n            \n            max_diff = max(max_diff, abs(count_e - count_s))\n        \n        return max_diff\n\n    n, k = map(int, sys.stdin.readline().split())\n    print(solve(n, k))\n\nif True:\n    main()",
    "def max_abs_diff(n, k, tabs):\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Calculate and print the result\nprint(max_abs_diff(n, k, tabs))",
    "def solve(n, k, tab_info):\n    e = sum(1 for info in tab_info if info == 1)\n    s = sum(1 for info in tab_info if info == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        count_e = 0\n        count_s = 0\n        for i in range(b, n, k):\n            if tab_info[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntab_info = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tab_info))",
    "def main():\n    import sys\n    \n    # Read input\n    input_data = sys.stdin.read().split()\n    \n    # Parse input\n    n, k = map(int, input_data[0].split())\n    tab_types = list(map(int, input_data[1].split()))\n    \n    # Initialize counters\n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    # Close tabs\n    for i in range(1, n):\n        if i % k == 0:\n            if tab_types[i - 1] == 1:\n                e -= 1\n            else:\n                s -= 1\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    # Print the result\n    print(max_diff)\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n, k = int(data[0]), int(data[1])\n    tabs = list(map(int, data[2:]))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    # Initialize counters for test and social network tabs\n    e = 0\n    s = 0\n    \n    # Iterate through each tab\n    for i in range(1, n + 1):\n        # If the tab has test information, increment the counter for test tabs\n        if i % k == 0:\n            e += 1\n        else:\n            # Otherwise, decrement the counter for social network tabs\n            s -= 1\n    \n    # Calculate the maximum absolute difference\n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k, tabs):\n    test_tabs = [tab for tab in tabs if tab == 1]\n    social_network_tabs = [tab for tab in tabs if tab == -1]\n    \n    e = len(test_tabs)\n    s = len(social_network_tabs)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k, tabs)\n\n# Print the result\nprint(result)",
    "def solve(n, k, tabs):\n    e, s = 0, 0\n    for i in range(1, n+1):\n        if tabs[i-1] == 1:\n            e += 1\n        else:\n            s += 1\n    return max(abs(e-s), abs(s-e))\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tabs))",
    "def solve(n, k):\n    tabs = [1 if i % 2 == 0 else -1 for i in range(1, n+1)]\n    e = sum(tabs[i] for i in range(0, n, k))\n    s = sum(tabs[i] for i in range(k, n, k))\n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    result = solve(n, k)\n    print(result)",
    "def main():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tab_types[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve():\n    import sys\n\n    # Read input\n    n, k = map(int, sys.stdin.readline().split())\n    tab_types = list(map(int, sys.stdin.readline().split()))\n\n    # Initialize counters for test and social network tabs\n    e = sum(tab_types)\n    s = len([t for t in tab_types if t == -1])\n\n    # Close every k-th tab\n    for i in range(1, n):\n        if i % k == 0:\n            if tab_types[i - 1] == 1:\n                e -= 1\n            else:\n                s -= 1\n\n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n\n    # Print the result\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs = list(map(int, input().split()))\n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        max_diff = max(max_diff, abs(count_e - count_s))\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve():\n    n, k = map(int, input().split())\n    types = list(map(int, input().split()))\n    \n    e = sum(1 for t in types if t == 1)\n    s = sum(1 for t in types if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs = [int(x) for x in input().split()]\n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve():\n    # Read input\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = sum(tab_types)\n    s = len([t for t in tab_types if t == -1])\n    \n    # Close every k-th tab starting from the first one\n    for i in range(1, n):\n        if i % k == 0:\n            if tab_types[i - 1] == 1:\n                e -= 1\n            else:\n                s -= 1\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    # Print the result\n    print(max_diff)\n\n# Call the solve function\nsolve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    \n    def parse_input(input):\n        lines = input().split('\\n')\n        n, k = map(int, lines[0].split())\n        tab_types = list(map(int, lines[1].split()))\n        return n, k, tab_types\n    \n    def calculate_remaining_tabs(tab_types, k):\n        e = sum(1 for t in tab_types if t == 1)\n        s = sum(1 for t in tab_types if t == -1)\n        return e, s\n    \n    def find_max_difference(n, k, tab_types):\n        max_diff = 0\n        for b in range(1, n):\n            e, s = calculate_remaining_tabs(tab_types[:b] + tab_types[b+k:], k)\n            diff = abs(e - s)\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n    \n    n, k, tab_types = parse_input(input())\n    result = find_max_difference(n, k, tab_types)\n    print(result)\n\nif True:\n    main()",
    "from typing import List\n\ndef solve(n: int, k: int, tabs: List[int]) -> int:\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = 0\n    \n    for b in range(1, n):\n        count_e = 0\n        count_s = 0\n        \n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        max_diff = max(max_diff, abs(count_e - count_s))\n    \n    return max_diff\n\n# Example usage:\nif True:\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    result = solve(n, k, tabs)\n    print(result)",
    "def solve():\n    import sys\n    data = sys.stdin.read().split()\n    n, k = int(data[0]), int(data[1])\n    tabs = list(map(int, data[2:]))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(2, n):\n        new_e, new_s = 0, 0\n        for j in range(i, n, k):\n            if tabs[j] == 1:\n                new_e += 1\n            else:\n                new_s += 1\n        max_diff = max(max_diff, abs(new_e - new_s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    types = list(map(int, input().split()))\n    \n    e = sum(1 for t in types if t == 1)\n    s = sum(1 for t in types if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if types[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    info_tabs = []\n    social_network_tabs = []\n\n    # Read the tab types\n    for _ in range(n):\n        tab_type = int(input())\n        if tab_type == 1:\n            info_tabs.append(True)\n        else:\n            social_network_tabs.append(True)\n\n    # Close every k-th tab\n    for i in range(1, n // k + 1):\n        for j in range(i * k - 1, i * k + n % k):\n            if info_tabs[j]:\n                info_tabs[j] = False\n            elif social_network_tabs[j]:\n                social_network_tabs[j] = False\n\n    # Count the remaining tabs\n    e = sum(info_tabs)\n    s = sum(social_network_tabs)\n\n    # Calculate the maximum absolute difference\n    return abs(e - s)\n\n# Main function to handle multiple test cases\ndef main():\n    while True:\n        try:\n            n, k = map(int, input().split())\n            result = solve(n, k)\n            print(result)\n        except EOFError:\n            break\n\nif True:\n    main()",
    "def main():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tab_info[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(1, n // k + 1):\n        e -= sum(tab_info[i * k - 1:i * k])\n        s -= sum(tab_info[i * k:i * k + 1])\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def main():\n    n, k = map(int, input().split())\n    tabs_info = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs_info[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(1, n // k + 1):\n        e -= sum(tabs_info[(i * k - 1):i * k])\n        s -= sum(tabs_info[i * k:i * k + k])\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    tabs = [-1] * n\n    e = 0\n    s = 0\n    \n    for i in range(1, n + 1):\n        if tabs[i - 1] == 1:\n            e += 1\n        else:\n            s += 1\n            \n    max_diff = 0\n    for i in range(1, n):\n        if tabs[i - 1] == 1:\n            tabs[i - 1] = -1\n            e -= 1\n        else:\n            tabs[i - 1] = 1\n            s -= 1\n        \n        diff = abs(e - s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve():\n    import sys\n    \n    # Read input\n    n, k = map(int, sys.stdin.readline().split())\n    tab_types = list(map(int, sys.stdin.readline().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = sum(tab_types)\n    s = len([t for t in tab_types if t == -1])\n    \n    # Close every k-th tab\n    for i in range(1, n):\n        if i % k == 0:\n            e -= tab_types[i - 1]\n            s += tab_types[i - 1]\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    # Print the result\n    print(max_diff)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    assert solve() == 2, \"Test case 1 failed\"\n    assert solve() == 9, \"Test case 2 failed\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_solution()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    \n    def parse_input():\n        data = input().split()\n        n, k = int(data[0]), int(data[1])\n        tabs = list(map(int, data[2:]))\n        return n, k, tabs\n    \n    def calculate_remaining_tabs(n, k, tabs):\n        e = sum(1 for tab in tabs if tab == 1)\n        s = sum(1 for tab in tabs if tab == -1)\n        return e, s\n    \n    def find_max_difference(e, s):\n        max_diff = abs(e - s)\n        for i in range(1, n // k + 1):\n            e -= i * k\n            s += i * k\n            max_diff = max(max_diff, abs(e - s))\n        return max_diff\n    \n    n, k, tabs = parse_input()\n    e, s = calculate_remaining_tabs(n, k, tabs)\n    max_diff = find_max_difference(e, s)\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    info_tabs = [1 if i == 1 else -1 for i in range(1, n+1)]\n    remaining_info_tabs = sum(info_tabs[i] for i in range(0, n, k))\n    remaining_social_network_tabs = sum(info_tabs[i] for i in range(k, n, k))\n    return abs(remaining_info_tabs - remaining_social_network_tabs)\n\n# Read input\nn, k = map(int, input().split())\ninfo_tabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k, tabs):\n    e = sum(tabs[i] == 1 for i in range(1, n+1, k))\n    s = sum(tabs[i] == -1 for i in range(1, n+1, k))\n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tabs))",
    "import sys\nfrom typing import List\n\ndef solve(n: int, k: int, tabs: List[int]) -> int:\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = 0\n    \n    for b in range(1, n):\n        count_e = 0\n        count_s = 0\n        \n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        max_diff = max(max_diff, abs(count_e - count_s))\n    \n    return max_diff\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    k = int(input_data[1])\n    tabs = list(map(int, input_data[2:]))\n    result = solve(n, k, tabs)\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    tabs = list(map(int, data[2:]))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    tabs = list(map(int, data[2:]))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(1, n // k + 1):\n        e -= sum(tabs[(i * k - 1):i * k])\n        s -= sum(tabs[i * k:i * k + k])\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    tabs_info = list(map(int, input().split()))\n    e = sum(1 for info in tabs_info if info == 1)\n    s = sum(1 for info in tabs_info if info == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs_info[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs_info = list(map(int, input().split()))\n\n# Solve and print the result\nprint(solve(n, k))",
    "def main():\n    import sys\n\n    # Read input\n    input_data = sys.stdin.read().split()\n    n, k = map(int, input_data[0].split())\n    tab_types = list(map(int, input_data[1].split()))\n\n    # Calculate the number of tabs containing test information\n    e = sum(1 for t in tab_types if t == 1)\n\n    # Calculate the number of tabs containing social network information\n    s = sum(1 for t in tab_types if t == -1)\n\n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n\n    # Print the result\n    print(max_diff)\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs_info = list(map(int, input().split()))\n    \n    e = sum(1 for info in tabs_info if info == 1)\n    s = sum(1 for info in tabs_info if info == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs = [int(i) for i in input().split()]\n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_e += 1\n            else:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.11627906976744186,
    0.11627906976744186,
    0.11627906976744186,
    0.11627906976744186,
    0.09302325581395349,
    0.0,
    0.0,
    0.046511627906976744,
    0.11627906976744186,
    0.11627906976744186,
    0.0,
    0.11627906976744186,
    0.11627906976744186,
    0.11627906976744186,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.11627906976744186,
    0.046511627906976744,
    0.11627906976744186,
    0.0,
    0.11627906976744186,
    0.046511627906976744,
    0.0,
    0.11627906976744186,
    0.09302325581395349,
    0.11627906976744186,
    0.0,
    0.09302325581395349,
    0.11627906976744186,
    0.06976744186046512,
    0.0,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.11627906976744186,
    0.0,
    0.11627906976744186,
    0.0,
    0.0,
    0.0,
    0.11627906976744186,
    0.11627906976744186
  ],
  "train rewards": [
    0.0,
    0.16666666666666666,
    0.0,
    0.19047619047619047,
    0.19047619047619047,
    0.11904761904761904,
    0.19047619047619047,
    0.23809523809523808,
    0.0,
    0.0,
    0.023809523809523808,
    0.11904761904761904,
    0.19047619047619047,
    0.0,
    0.11904761904761904,
    0.19047619047619047,
    0.11904761904761904,
    0.0,
    0.0,
    0.16666666666666666,
    0.0,
    0.16666666666666666,
    0.16666666666666666,
    0.16666666666666666,
    0.047619047619047616,
    0.19047619047619047,
    0.047619047619047616,
    0.11904761904761904,
    0.0,
    0.11904761904761904,
    0.047619047619047616,
    0.0,
    0.11904761904761904,
    0.19047619047619047,
    0.19047619047619047,
    0.0,
    0.23809523809523808,
    0.09523809523809523,
    0.0,
    0.0,
    0.0,
    0.047619047619047616,
    0.09523809523809523,
    0.11904761904761904,
    0.0,
    0.09523809523809523,
    0.0,
    0.0,
    0.0,
    0.11904761904761904,
    0.19047619047619047
  ],
  "time": [
    3.151273727416992,
    6.537673711776733,
    9.914857387542725,
    14.992996215820312,
    22.467554569244385,
    27.34855031967163,
    39.027459383010864,
    47.657949447631836,
    51.98648524284363,
    58.122434854507446,
    65.4198830127716,
    70.39535284042358,
    75.36427974700928,
    78.56181478500366,
    84.90760707855225,
    89.8986964225769,
    94.87905669212341,
    102.48288440704346,
    104.81880307197571,
    107.88688611984253,
    112.12122821807861,
    115.34749627113342,
    118.83540034294128,
    121.94612002372742,
    125.35649013519287,
    135.71204948425293,
    142.61497378349304,
    153.23325896263123,
    155.4928560256958,
    166.31272315979004,
    170.97016024589539,
    180.29958510398865,
    189.1566972732544,
    196.74792456626892,
    201.0465521812439,
    210.0773322582245,
    219.379221200943,
    230.00094079971313,
    235.48285222053528,
    243.43838238716125,
    252.26010942459106,
    255.8588650226593,
    258.98262071609497,
    268.2189178466797,
    270.9541959762573,
    275.4706139564514,
    280.440327167511,
    286.81554985046387,
    289.1412470340729,
    299.9682106971741,
    310.824835062027
  ],
  "sample times": 51
}