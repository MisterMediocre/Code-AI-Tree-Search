{
  "prompt": "\nQUESTION:\nUnlucky year in Berland is such a year that its number n can be represented as n = x^{a} + y^{b}, where a and b are non-negative integer numbers. \n\nFor example, if x = 2 and y = 3 then the years 4 and 17 are unlucky (4 = 2^0 + 3^1, 17 = 2^3 + 3^2 = 2^4 + 3^0) and year 18 isn't unlucky as there is no such representation for it.\n\nSuch interval of years that there are no unlucky years in it is called The Golden Age.\n\nYou should write a program which will find maximum length of The Golden Age which starts no earlier than the year l and ends no later than the year r. If all years in the interval [l, r] are unlucky then the answer is 0.\n\n\n-----Input-----\n\nThe first line contains four integer numbers x, y, l and r (2 \u2264 x, y \u2264 10^18, 1 \u2264 l \u2264 r \u2264 10^18).\n\n\n-----Output-----\n\nPrint the maximum length of The Golden Age within the interval [l, r].\n\nIf all years in the interval [l, r] are unlucky then print 0.\n\n\n-----Examples-----\nInput\n2 3 1 10\n\nOutput\n1\n\nInput\n3 5 10 22\n\nOutput\n8\n\nInput\n2 3 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the unlucky years are 2, 3, 4, 5, 7, 9 and 10. So maximum length of The Golden Age is achived in the intervals [1, 1], [6, 6] and [8, 8].\n\nIn the second example the longest Golden Age is the interval [15, 22].\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        return 0\n    else:\n        return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "import sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "def main():\n    x, y, l, r = map(int, input().split())\n    max_length = 0\n    \n    for i in range(l, r+1):\n        found = False\n        for a in range(64):\n            for b in range(64):\n                if i == x**a + y**b:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            max_length = max(max_length, i - l + 1)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age(l, r):\n        max_length = 0\n        for i in range(l, r+1):\n            if not is_unlucky(i):\n                max_length = max(max_length, i - l + 1)\n        return max_length\n    \n    result = find_golden_age(l, r)\n    print(result)\n\nif True:\n    solve()",
    "import math\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        return 0\n    else:\n        return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "import sys\nfrom math import sqrt\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.read().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            d = n % y\n            if d == 0:\n                return True\n            n //= y\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "from typing import *\nimport sys\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    def is_unlucky(n):\n        while n > 0:\n            d = n % (x * y)\n            if d == 0:\n                return True\n            n //= (x * y)\n        return False\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            continue\n        j = i + 1\n        while j <= r and not is_unlucky(j):\n            j += 1\n        max_length = max(max_length, j - i)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, sys.stdin.read().split())\n    print(solve(x, y, l, r))",
    "def check_unlucky(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return False\n    return True\n\ndef find_golden_age(x, y, l, r):\n    max_length = 0\n    for i in range(l, r+1):\n        if not check_unlucky(i):\n            continue\n        j = i\n        while j <= r:\n            if not check_unlucky(j):\n                break\n            j += x**y\n        if j > r:\n            max_length = max(max_length, i - l)\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    result = find_golden_age(x, y, l, r)\n    print(result)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    if x == 1:\n        return r - l + 1\n    if y == 1:\n        return r // x + 1\n    if x > y:\n        return solve(y, x, l, r)\n    if x == y:\n        return min(r - l + 1, (r - l) // x + 1)\n    if x < y:\n        return max(0, solve(y, x, l, r))\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    def is_unlucky(n):\n        while n > 0:\n            d = n % (x * y)\n            if d == 0:\n                return True\n            n //= (x * y)\n        return False\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            continue\n        j = i + 1\n        while j <= r and not is_unlucky(j):\n            j += 1\n        max_length = max(max_length, j - i)\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().strip()\n    data = input_data.split()\n    x, y, l, r = map(int, data)\n    result = solve(x, y, l, r)\n    print(result)",
    "def solve():\n    from math import sqrt\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            d = int(sqrt(n))\n            if d * d == n:\n                return True\n            n -= d\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "def main():\n    input_data = input().split()\n    x, y, l, r = map(int, input_data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        return 0\n    else:\n        return max_length\n\nif True:\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "def solve(x: int, y: int, l: int, r: int) -> int:\n    def is_unlucky(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    return max_length if max_length != 0 else 0\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Initialize a dictionary to store the count of each number modulo x^y\n    mod_count = defaultdict(int)\n    \n    # Iterate through all possible numbers from l to r\n    for num in range(l, r+1):\n        # Calculate the remainder when num is divided by x^y\n        remainder = pow(num, y, x**y)\n        \n        # Increment the count of this remainder\n        mod_count[remainder] += 1\n    \n    # Find the maximum length of the Golden Age\n    max_length = 0\n    for count in mod_count.values():\n        if count > 0:\n            max_length = max(max_length, count)\n    \n    # Print the result\n    print(max_length)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    x, y, l, r = map(int, data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(l, r):\n        max_length = 0\n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                max_length = max(max_length, i - l + 1)\n        return max_length\n    \n    result = find_golden_age_length(l, r)\n    print(result)\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    max_length = 0\n    for i in range(l, r+1):\n        found = False\n        for j in range(i):\n            if (i - j) % x == 0 and (j // x) % y == 0:\n                found = True\n                break\n        if not found:\n            max_length = max(max_length, i - l)\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import math\n\ndef is_unlucky(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            j = n // i\n            if i != j:\n                return True\n    return False\n\ndef solve(x, y, l, r):\n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            count = 1\n            for j in range(i + 1, r + 1):\n                if not is_unlucky(j):\n                    count += 1\n                else:\n                    break\n            max_length = max(max_length, count)\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x != 0 and n % y != 0:\n                return False\n            n //= max(x, y)\n        return True\n    \n    def find_golden_age(start):\n        count = 0\n        while start <= r:\n            if not is_unlucky(start):\n                count += 1\n            else:\n                break\n            start += 1\n        return count\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        max_length = max(max_length, find_golden_age(i))\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "def solve(x, y, l, r):\n    def check(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def binary_search(l, r):\n        left, right = l, r\n        while left <= right:\n            mid = (left + right) // 2\n            if check(mid):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    \n    return binary_search(l, r)\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve problem\nresult = solve(x, y, l, r)\n\n# Print result\nprint(result)",
    "def solve():\n    import math\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            max_length = max(max_length, i - l + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve(x, y, l, r):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return abs(a * b) // gcd(a, b)\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= lcm(x, y)\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    x, y, l, r = map(int, input().split())\n    solve(x, y, l, r)",
    "def main():\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if not is_unlucky(i):\n                count += 1\n        return count\n    \n    max_length = 0\n    for start in range(l, r + 1):\n        for end in range(start, r + 1):\n            length = find_golden_age_length(start, end)\n            if length > max_length:\n                max_length = length\n    \n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    \n    def solve(x, y, l, r):\n        if x == 1 and y == 1:\n            return 0\n        \n        max_length = 0\n        for i in range(l, r+1):\n            if is_unlucky(i, x, y):\n                max_length = max(max_length, i - l)\n        \n        return max_length\n    \n    def is_unlucky(n, x, y):\n        while n > 0:\n            remainder = n % (x**y)\n            if remainder != 0:\n                return False\n            n //= (x**y)\n        return True\n    \n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))\n\nif True:\n    main()",
    "def main():\n    import sys\n    def solve(x, y, l, r):\n        if x == 1 and y == 1:\n            return 0\n        if x == 1:\n            return r - l + 1\n        if y == 1:\n            return r // x + 1\n        if x > y:\n            return solve(y, x, l, r)\n        if x == y:\n            return min(r - l + 1, (r - l) // (x + 1))\n        if x < y:\n            return max(0, solve(y, x, l, r))\n    x, y, l, r = map(int, sys.stdin.read().split())\n    print(solve(x, y, l, r))\n\nif True:\n    main()",
    "from math import sqrt\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            d = n % x\n            if d == 0:\n                return True\n            n //= x\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            continue\n        j = i + 1\n        while j <= r and not is_unlucky(j):\n            j += 1\n        max_length = max(max_length, j - i)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    if is_unlucky(l):\n        return 0\n    \n    left, right = l, r\n    while left <= right:\n        mid = (left + right) // 2\n        if not is_unlucky(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right - l + 1\n\nif True:\n    main()",
    "def main():\n    import sys\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    x, y, l, r = map(int, data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n\n    def solve(x, y, l, r):\n        if x == 1 and y == 1:\n            return 0\n        \n        max_length = 0\n        for i in range(l, r+1):\n            if is_unlucky(i, x, y):\n                max_length = max(max_length, i - l)\n        \n        return max_length\n    \n    def is_unlucky(n, x, y):\n        while n > 0:\n            remainder = n % (x**y)\n            if remainder != 0:\n                return False\n            n //= (x**y)\n        return True\n    \n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().strip()\n    x, y, l, r = map(int, data.split())\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if is_unlucky(i, x, y):\n            start = i\n            while True:\n                next_year = start + 1\n                if not is_unlucky(next_year, x, y):\n                    break\n                start = next_year\n            max_length = max(max_length, start - i + 1)\n    \n    return max_length\n\ndef is_unlucky(n, x, y):\n    while n > 0:\n        remainder = n % (x**y)\n        if remainder != 0:\n            return False\n        n //= (x**y)\n    return True\n\nif True:\n    main()",
    "def main():\n    import sys\n    \n    def solve(x, y, l, r):\n        if x == 1 and y == 1:\n            return 0\n        \n        max_length = 0\n        for i in range(l, r+1):\n            if is_unlucky(i, x, y):\n                max_length = max(max_length, i - l)\n        \n        return max_length\n    \n    def is_unlucky(n, x, y):\n        while n > 0:\n            remainder = n % (x**y)\n            if remainder != 0:\n                return False\n            n //= (x**y)\n        return True\n    \n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    \n    result = solve(x, y, l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    x = int(data[0])\n    y = int(data[1])\n    l = int(data[2])\n    r = int(data[3])\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read()\n    data = data.split('\\n')\n    x, y, l, r = map(int, data[0].split())\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    if x == 1:\n        return r - l + 1\n    if y == 1:\n        return r // x + 1\n    if x > y:\n        return solve(y, x, l, r)\n    if x == y:\n        return min(r - l + 1, (r - l + 1) // 2)\n    if x < y:\n        return solve(x, y, l, r)",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    \n    def is_unlucky(n):\n        x, y = int(n**(1/2)), int(n**(1/3))\n        return x**y == n or y**x == n\n    \n    l, r = data[0], data[1]\n    max_length = 0\n    \n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            continue\n        \n        j = i\n        while True:\n            if is_unlucky(j):\n                break\n            j += 1\n        \n        max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.readline().split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    if x == 1:\n        return r - l + 1\n    if y == 1:\n        return r // x + 1\n    if x > y:\n        return solve(y, x, l, r)\n    if x == y:\n        return min(r - l + 1, (r - l) // x + 1)\n    if x < y:\n        return max(0, solve(y, x, l, r))\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    \n    x = int(data[0])\n    y = int(data[1])\n    l = int(data[2])\n    r = int(data[3])\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(l, r):\n        max_length = 0\n        \n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                continue\n            \n            j = i + 1\n            while j <= r and not is_unlucky(j):\n                j += 1\n            \n            if j - i > max_length:\n                max_length = j - i\n                \n        return max_length\n    \n    result = find_golden_age_length(l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    max_length = solve(x, y, l, r)\n    print(max_length)\n\ndef solve(x, y, l, r):\n    if x == 1 and y == 1:\n        return 0\n    if x == 1:\n        return min(r - l + 1, y * (r - l + 1))\n    if y == 1:\n        return min(r - l + 1, x * (r - l + 1))\n    if x == y:\n        return min((r - l + 1) // 2, x * ((r - l + 1) // 2))\n    if x > y:\n        return min((r - l + 1) // 2, x * ((r - l + 1) // 2))\n    if y > x:\n        return min((r - l + 1) // 2, y * ((r - l + 1) // 2))\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(l, r):\n        max_length = 0\n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                max_length = max(max_length, i - l + 1)\n        return max_length\n    \n    result = find_golden_age_length(l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(l, r):\n        max_length = 0\n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                max_length = max(max_length, i - l + 1)\n        return max_length\n    \n    result = find_golden_age_length(l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data[0], data[1], data[2], data[3]\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age_length(l, r):\n        max_length = 0\n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                max_length = max(max_length, i - l + 1)\n        return max_length\n    \n    result = find_golden_age_length(l, r)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    ans = solve(x, y, l, r)\n    print(ans)\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    if not is_unlucky(l):\n        return 0\n    \n    left, right = l, r\n    while left <= right:\n        mid = (left + right) // 2\n        if is_unlucky(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return right - l + 1\n\nif True:\n    main()",
    "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n\n    def solve():\n        x, y, l, r = map(int, input().split())\n        if x == y:\n            return 0 if l > r else max(0, min(r - l + 1, 2 * (r - l)))\n        \n        # Find the largest power of x less than or equal to r\n        max_x_power = 0\n        while x ** max_x_power <= r:\n            max_x_power += 1\n        \n        # Check if there's an unlucky year in the range [l, r]\n        for i in range(l, r + 1):\n            if i % x != 0 and i % y != 0:\n                continue\n            if i < l or i > r:\n                break\n            if i == l:\n                continue\n            if i == r:\n                continue\n            if i == x ** max_x_power:\n                continue\n            if i == x ** max_x_power + 1:\n                continue\n            if i == x ** max_x_power + 2:\n                continue\n            if i == x ** max_x_power + 3:\n                continue\n            if i == x ** max_x_power + 4:\n                continue\n            if i == x ** max_x_power + 5:\n                continue\n            if i == x ** max_x_power + 6:\n                continue\n            if i == x ** max_x_power + 7:\n                continue\n            if i == x ** max_x_power + 8:\n                continue\n            if i == x ** max_x_power + 9:\n                continue\n            if i == x ** max_x_power + 10:\n                continue\n            if i == x ** max_x_power + 11:\n                continue\n            if i == x ** max_x_power + 12:\n                continue\n            if i == x ** max_x_power + 13:\n                continue\n            if i == x ** max_x_power + 14:\n                continue\n            if i == x ** max_x_power + 15:\n                continue\n            if i == x ** max_x_power + 16:\n                continue\n            if i == x ** max_x_power + 17:\n                continue\n            if i == x ** max_x_power + 18:\n                continue\n            if i == x ** max_x_power + 19:\n                continue\n            if i == x ** max_x_power + 20:\n                continue\n            if i == x ** max_x_power + 21:\n                continue\n            if i == x ** max_x_power + 22:\n                continue\n            if i == x ** max_x_power + 23:\n                continue\n            if i == x ** max_x_power + 24:\n                continue\n            if i == x ** max_x_power + 25:\n                continue\n            if i == x ** max_x_power + 26:\n                continue\n            if i == x ** max_x_power + 27:\n                continue\n            if i == x ** max_x_power + 28:\n                continue\n            if i == x ** max_x_power + 29:\n                continue\n            if i == x ** max_x_power + 30:\n                continue\n            if i == x ** max_x_power + 31:\n                continue\n            if i == x ** max_x_power + 32:\n                continue\n            if i == x ** max_x_power + 33:\n                continue\n            if i == x ** max_x_power + 34:\n                continue\n            if i == x ** max_x_power + 35:\n                continue\n            if i == x ** max_x_power + 36:\n                continue\n            if i == x ** max_x_power + 37:\n                continue\n            if i == x ** max_x_power + 38:\n                continue\n            if i == x ** max_x_power + 39:\n                continue\n            if i == x ** max_x_power + 40:\n                continue\n            if i == x ** max_x_power + 41:\n                continue\n            if i == x ** max_x_power + 42:\n                continue\n            if i == x ** max_x_power + 43:\n                continue\n            if i == x ** max_x_power + 44:\n                continue\n            if i == x ** max_x_power + 45:\n                continue\n            if i == x ** max_x_power + 46:\n                continue\n            if i == x ** max_x_power + 47:\n                continue\n            if i == x ** max_x_power + 48:\n                continue\n            if i == x ** max_x_power + 49:\n                continue\n            if i == x ** max_x_power + 50:\n                continue\n            if i == x ** max_x_power + 51:\n                continue\n            if i == x ** max_x_power + 52:\n                continue\n            if i == x ** max_x_power + 53:\n                continue\n            if i == x ** max_x_power + 54:\n                continue\n            if i == x ** max_x_power + 55:\n                continue\n            if i == x ** max_x_power + 56:\n                continue\n            if i == x ** max_x_power + 57:\n                continue\n            if i == x ** max_x_power + 58:\n                continue\n            if i == x ** max_x_power + 59:\n                continue\n            if i == x ** max_x_power + 60:\n                continue\n            if i == x ** max_x_power + 61:\n                continue\n            if i == x ** max_x_power + 62:\n                continue\n            if i == x ** max_x_power + 63:\n                continue\n            if i == x ** max_x_power + 64:\n                continue\n            if i == x ** max_x_power + 65:\n                continue\n            if i == x ** max_x_power + 66:\n                continue\n            if i == x ** max_x_power + 67:\n                continue\n            if i == x ** max_x_power + 68:\n                continue\n            if i == x ** max_x_power + 69:\n                continue\n            if i == x ** max_x_power + 70:\n                continue\n            if i == x ** max_x_power + 71:\n                continue\n            if i == x ** max_x_power + 72:\n                continue\n            if i == x ** max_x_power + 73:\n                continue\n            if i == x ** max_x_power + 74:\n                continue\n            if i == x ** max_x_power + 75:\n                continue\n            if i == x ** max_x_power + 76:\n                continue\n            if i == x ** max_x_power + 77:\n                continue\n            if i == x ** max_x_power + 78:\n                continue\n            if i == x ** max_x_power + 79:\n                continue\n            if i == x ** max_x_power + 80:",
    "def main():\n    x, y, l, r = map(int, input().split())\n    if x == y:\n        if l % x != 0 or r % x != 0:\n            print(0)\n        else:\n            print(r - l + 1)\n    else:\n        max_length = 0\n        for i in range(l, r + 1):\n            if is_unlucky(i, x, y):\n                max_length = max(max_length, i - l + 1)\n        print(max_length)\n\ndef is_unlucky(n, x, y):\n    while n > 0:\n        if n % x == 0:\n            return False\n        if n % y == 0:\n            return False\n        n //= max(x, y)\n    return True\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().strip().split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    return max_length\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    solve(data)\n\ndef solve(data):\n    x, y, l, r = data\n    max_length = 0\n    for i in range(l, r+1):\n        found = False\n        for j in range(0, int(i**(1/x))+1):\n            for k in range(0, int(i**(1/y))+1):\n                if j**x + k**y == i:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            max_length = max(max_length, i-l)\n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    result = max_length_of_golden_age(x, y, l, r)\n    print(result)\n\ndef max_length_of_golden_age(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    def count_unlucky_years(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if is_unlucky(i):\n                count += 1\n        return count\n    \n    left = l\n    right = r\n    while left <= right:\n        mid = (left + right) // 2\n        if count_unlucky_years(mid, r) >= mid - l + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right - l + 1\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    max_length = 0\n    for i in range(l, r+1):\n        found = False\n        for a in range(64):\n            for b in range(64):\n                if i == x**a + y**b:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            max_length = max(max_length, i - l)\n    print(max_length)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = list(map(int, sys.stdin.read().split()))\n    x, y, l, r = data\n    result = find_golden_age(x, y, l, r)\n    print(result)\n\ndef find_golden_age(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    return max_length\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2558139534883721,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.11904761904761904,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.3333333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.11904761904761904,
    0.0,
    0.047619047619047616,
    0.0,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    6.056670665740967,
    21.339848041534424,
    35.08474349975586,
    49.93855929374695,
    65.76057124137878,
    81.01161980628967,
    96.0698173046112,
    111.64142751693726,
    126.93953061103821,
    142.3865523338318,
    147.43206071853638,
    163.52684259414673,
    178.62728309631348,
    193.53519678115845,
    209.52011704444885,
    225.30985689163208,
    240.88049149513245,
    255.57014536857605,
    269.23884654045105,
    284.72975420951843,
    300.50157952308655,
    315.0932660102844,
    319.01329946517944,
    335.56430983543396,
    350.58940839767456,
    365.6042699813843,
    380.6053283214569,
    385.85418224334717,
    401.18800473213196,
    406.32131004333496,
    421.2455749511719,
    436.5982253551483,
    452.8950946331024,
    468.34029150009155,
    483.3899636268616,
    498.28148007392883,
    502.5937285423279,
    517.5632433891296,
    523.5380713939667,
    539.8481323719025,
    544.3019382953644,
    558.367381811142,
    572.8855822086334,
    587.7084765434265,
    630.0671815872192,
    634.7817347049713,
    650.2023878097534,
    664.2252006530762,
    680.6937003135681,
    693.8021922111511,
    708.8828959465027
  ],
  "sample times": 51
}