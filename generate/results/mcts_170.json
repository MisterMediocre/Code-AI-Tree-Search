{
  "prompt": "\nQUESTION:\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n\n-----Examples-----\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\n\n-----Note-----\n\nFirst sample:  [Image] \n\nSecond sample:  [Image]\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k1, k2):\n    stack1 = list(range(1, k1+1))\n    stack2 = list(range(k1+1, k1+k2+1))\n    \n    fights = 0\n    \n    while stack1 and stack2:\n        if stack1[-1] > stack2[-1]:\n            stack1.append(stack1.pop())\n            stack1.append(stack2.pop())\n            fights += 1\n        else:\n            stack2.append(stack2.pop())\n            stack2.append(stack1.pop())\n            fights += 1\n            \n    if not stack1:\n        return fights, 2\n    elif not stack2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input().strip())\n    k1 = int(input().strip())\n    k2 = int(input().strip())\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def play_war(cards1, cards2):\n        fights = 0\n        while cards1 and cards2:\n            if cards1[-1] > cards2[-1]:\n                cards1.append(cards2.pop())\n                cards1.append(cards1.pop())\n                fights += 1\n            else:\n                cards2.append(cards1.pop())\n                cards2.append(cards2.pop())\n                fights += 1\n        return fights\n    \n    total_fights = play_war(cards1, cards2)\n    if total_fights == 0:\n        print(-1)\n    else:\n        print(total_fights, 1 if len(cards1) > len(cards2) else 2)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def compare_cards(card1, card2):\n        return card1 > card2\n    \n    def simulate_war(cards1, cards2):\n        count = 0\n        while cards1 and cards2:\n            count += 1\n            if compare_cards(cards1[-1], cards2[-1]):\n                cards1.append(cards1.pop())\n                cards1.append(cards2.pop())\n            else:\n                cards2.append(cards2.pop())\n                cards2.append(cards1.pop())\n        return count\n    \n    total_fights = simulate_war(cards1, cards2)\n    if not cards1 and not cards2:\n        print(total_fights, 2)\n    elif not cards1:\n        print(total_fights, 1)\n    elif not cards2:\n        print(total_fights, 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            i += 1\n        else:\n            s2.append(s1.pop(0))\n            j += 1\n        count += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\nfrom collections import deque\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = deque(map(int, sys.stdin.readline().split()))\n    s2 = deque(map(int, sys.stdin.readline().split()))\n\n    count = 0\n    while s1 and s2:\n        if s1[0] > s2[0]:\n            s1.append(s2.popleft())\n            s1.append(s1.popleft())\n        else:\n            s2.append(s1.popleft())\n            s2.append(s2.popleft())\n\n        count += 1\n\n    if not s1:\n        print(count, 2)\n    elif not s2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "from typing import *\nimport sys\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> Tuple[int, int]:\n    i, j = 0, 0\n    fights = 0\n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            fights += 1\n        else:\n            cards1.append(cards2.pop())\n            cards2.append(cards1.pop())\n            fights += 1\n        i += 1\n        j += 1\n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input().strip())\n    k1 = int(input().strip())\n    k2 = int(input().strip())\n    cards1 = list(map(int, input().strip().split()))\n    cards2 = list(map(int, input().strip().split()))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            i += 1\n        else:\n            s2.append(s1.pop(0))\n            j += 1\n        count += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, values1, k2, values2):\n    i = j = 0\n    fights = 0\n    while i < k1 and j < k2:\n        if values1[i] > values2[j]:\n            values1.append(values2[j])\n            values2.pop(j)\n            i += 1\n            j += 1\n            fights += 1\n        elif values1[i] < values2[j]:\n            values2.append(values1[i])\n            values1.pop(i)\n            i += 1\n            j += 1\n            fights += 1\n        else:\n            values1.append(values2[j])\n            values2.pop(j)\n            values1.append(values1[i])\n            values1.pop(i)\n            i += 1\n            j += 1\n            fights += 1\n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    values1 = list(map(int, input().split()))\n    k2 = int(input())\n    values2 = list(map(int, input().split()))\n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    return int(data[0]), int(data[1]), list(map(int, data[2])), list(map(int, data[3]))\n\ndef solve(n, k1, cards1, k2, cards2):\n    i, j = 0, 0\n    count = 0\n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            count += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            count += 1\n        else:\n            cards1.append(cards2.pop())\n            cards2.append(cards1.pop())\n            count += 1\n        i += 1\n        j += 1\n    if i == k1:\n        return count, 2\n    elif j == k2:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    n, k1, cards1, k2, cards2 = read_input()\n    result = solve(n, k1, cards1, k2, cards2)\n    print(*result)",
    "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, cards1, k2, cards2):\n    i, j = 0, 0\n    fights = 0\n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            fights += 1\n        else:\n            cards1.append(cards2.pop())\n            cards2.append(cards1.pop())\n            fights += 1\n        i += 1\n        j += 1\n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n    result = solve(n, k1, cards1, k2, cards2)\n    print(*result)",
    "import sys\n\ndef read_input():\n    return map(int, sys.stdin.read().split())\n\ndef solve(n, k1, k2):\n    deck1 = list(range(1, k1 + 1))\n    deck2 = list(range(k1 + 1, k1 + k2 + 1))\n    \n    count = 0\n    while deck1 and deck2:\n        count += 1\n        if deck1[-1] > deck2[-1]:\n            deck1.pop()\n            deck1.append(deck2.pop())\n        else:\n            deck2.pop()\n            deck2.append(deck1.pop())\n    \n    if not deck1:\n        return count, 2\n    elif not deck2:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    n, k1, k2 = read_input()\n    result = solve(n, k1, k2)\n    print(*result)",
    "def solve(n, k1, k2, cards1, cards2):\n    i = j = 0\n    fights = 0\n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            cards1.append(cards1.pop())\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            cards2.append(cards2.pop())\n            fights += 1\n        else:\n            cards1.append(cards2.pop())\n            cards1.append(cards1.pop())\n            cards2.append(cards1.pop())\n            fights += 1\n        i += 1\n        j += 1\n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "import sys\n\ndef solve(n, k1, k2):\n    deck1 = list(range(1, k1+1))\n    deck2 = list(range(k1+1, k1+k2+1))\n    \n    count = 0\n    while deck1 and deck2:\n        count += 1\n        if deck1[-1] > deck2[-1]:\n            deck1.pop()\n            deck1.append(deck2.pop())\n        else:\n            deck2.pop()\n            deck2.append(deck1.pop())\n    \n    if not deck1:\n        return count, 2\n    elif not deck2:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = int(data[2])\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\nfrom typing import List\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> str:\n    def play_war(cards1: List[int], cards2: List[int]) -> bool:\n        while cards1 and cards2:\n            if cards1[-1] > cards2[-1]:\n                cards1.append(cards2.pop())\n                cards1.append(cards1.pop())\n            elif cards1[-1] < cards2[-1]:\n                cards2.append(cards1.pop())\n                cards2.append(cards2.pop())\n            else:\n                cards1.pop()\n                cards2.pop()\n        return not cards1\n\n    total_fights = 0\n    while True:\n        total_fights += 1\n        if play_war(cards1, cards2):\n            return f\"{total_fights} 1\"\n        if not cards1:\n            return f\"{total_fights} 2\"\n        if not cards2:\n            return f\"{total_fights} 2\"\n\nif True:\n    input_data = sys.stdin.read().splitlines()\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    cards1 = list(map(int, input_data[2].split()))\n    k2 = int(input_data[3])\n    cards2 = list(map(int, input_data[4].split()))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(result)",
    "import sys\n\ndef solve():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            i += 1\n        else:\n            s2.append(s1.pop(0))\n            j += 1\n        count += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    if len(cards1) == 0 or len(cards2) == 0:\n        return -1\n    \n    count = 0\n    while True:\n        if len(cards1) == 0 or len(cards2) == 0:\n            break\n        \n        c1 = cards1.pop()\n        c2 = cards2.pop()\n        \n        if c1 > c2:\n            cards1.append(c1)\n            cards1.append(c2)\n        else:\n            cards2.append(c2)\n            cards2.append(c1)\n        \n        count += 1\n    \n    if len(cards1) == 0:\n        winner = 2\n    elif len(cards2) == 0:\n        winner = 1\n    else:\n        winner = -1\n    \n    print(count, winner)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(n, k1, values1, k2, values2):\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if values1[i] > values2[j]:\n            count += 1\n            i += 1\n        else:\n            count += 1\n            j += 1\n    return count, 1 if i == k1 else 2\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    values1 = data[2:k1+2]\n    k2 = data[k1+2]\n    values2 = data[k1+2:]\n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    if len(cards1) == 0 or len(cards2) == 0:\n        print(-1)\n        return\n    \n    count = 0\n    while True:\n        if len(cards1) == 0 or len(cards2) == 0:\n            break\n        \n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n            cards1.append(cards1.pop())\n        else:\n            cards2.append(cards1.pop())\n            cards2.append(cards2.pop())\n        \n        count += 1\n    \n    if len(cards1) == 0:\n        print(count, 2)\n    elif len(cards2) == 0:\n        print(count, 1)\n\nif True:\n    main()",
    "import sys\n\ndef solve(n, k1, cards1, k2, cards2):\n    i, j = 0, 0\n    fights = 0\n    \n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            fights += 1\n        else:\n            cards1.append(cards2.pop())\n            cards2.append(cards1.pop())\n            fights += 1\n    \n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2:]\n    \n    result = solve(n, k1, cards1, k2, cards2)\n    print(*result)",
    "import sys\n\ndef solve():\n    # Read input\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    # Initialize variables\n    i = j = 0\n    count = 0\n    winner = None\n\n    # Play the game\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n            winner = 'first'\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop(0))\n            count += 1\n            winner = 'second'\n        else:\n            s1.append(s2.pop(0))\n            s2.append(s1.pop(0))\n            count += 1\n\n    # Determine the winner\n    if winner == 'first':\n        print(count, 1)\n    elif winner == 'second':\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(n, k1, k2, cards1, cards2):\n    i = j = 0\n    fights = 0\n    \n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            cards1.append(cards2.pop())\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards1.pop())\n            fights += 1\n        else:\n            cards1.append(cards2.pop())\n            cards2.append(cards1.pop())\n            fights += 1\n            \n        i += 1\n        j += 1\n    \n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(sys.stdin.readline().strip())\n    k1 = int(sys.stdin.readline().strip())\n    cards1 = list(map(int, sys.stdin.readline().strip().split()))\n    k2 = int(sys.stdin.readline().strip())\n    cards2 = list(map(int, sys.stdin.readline().strip().split()))\n    \n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "import sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    # Initialize variables\n    i = j = 0\n    count = 0\n    winner = None\n\n    # Play the game\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n            winner = 'first'\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop(0))\n            count += 1\n            winner = 'second'\n        else:\n            s1.append(s2.pop(0))\n            s2.append(s1.pop(0))\n            count += 1\n\n    # Determine the winner\n    if winner == 'first':\n        print(count, 1)\n    elif winner == 'second':\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "import sys\n\ndef solve(n, k1, k2):\n    stack1 = list(range(1, k1+1))\n    stack2 = list(range(k1+1, k1+k2+1))\n    \n    fights = 0\n    \n    while stack1 and stack2:\n        if stack1[-1] > stack2[-1]:\n            stack1.append(stack1.pop())\n            stack1.append(stack2.pop())\n            fights += 1\n        else:\n            stack2.append(stack2.pop())\n            stack2.append(stack1.pop())\n            fights += 1\n            \n    if not stack1:\n        return fights, 2\n    elif not stack2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = int(data[2])\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\n\ndef solve(n, k1, k2):\n    s1 = list(range(1, k1+1))\n    s2 = list(range(k1+1, k1+k2+1))\n    \n    fights = 0\n    while s1 and s2:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n            fights += 1\n        else:\n            s2.append(s1.pop())\n            fights += 1\n    \n    if not s1:\n        return fights, 2\n    elif not s2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(sys.stdin.readline().strip())\n    k1 = int(sys.stdin.readline().strip())\n    k2 = int(sys.stdin.readline().strip())\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    k1 = int(sys.stdin.readline().strip())\n    s1 = list(map(int, sys.stdin.readline().strip().split()))\n    k2 = int(sys.stdin.readline().strip())\n    s2 = list(map(int, sys.stdin.readline().strip().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop(0))\n            count += 1\n        else:\n            s1.append(s2.pop(0))\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == k1:\n        print(count, 2)\n    elif j == k2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(n, k1, k2, values1, values2):\n    total_fights = 0\n    while k1 > 0 and k2 > 0:\n        total_fights += 1\n        if values1[-1] > values2[-1]:\n            values1.append(values2.pop())\n            values1.append(values1.pop())\n        else:\n            values2.append(values1.pop())\n            values2.append(values2.pop())\n        k1 -= 1\n        k2 -= 1\n    if k1 == 0:\n        return total_fights, 2\n    elif k2 == 0:\n        return total_fights, 1\n    else:\n        return -1\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    k2 = int(input_data[2])\n    values1 = list(map(int, input_data[3:k1+3]))\n    values2 = list(map(int, input_data[k1+3:]))\n    result = solve(n, k1, k2, values1, values2)\n    print(*result)",
    "import sys\n\ndef read_input():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n    return n, k1, s1, k2, s2\n\ndef simulate_war(n, k1, s1, k2, s2):\n    i = j = 0\n    fights = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop())\n            s1.append(s1.pop())\n            i += 1\n            j += 1\n            fights += 1\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop())\n            s2.append(s2.pop())\n            i += 1\n            j += 1\n            fights += 1\n        else:\n            s1.append(s2.pop())\n            s1.append(s1.pop())\n            i += 1\n            j += 1\n            fights += 1\n    if i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 1\n    else:\n        return -1\n\ndef main():\n    n, k1, s1, k2, s2 = read_input()\n    result = simulate_war(n, k1, s1, k2, s2)\n    print(*result)\n\nif True:\n    main()",
    "import sys\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    count = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == len(s1):\n        print(count, 2)\n    elif j == len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    i = j = 0\n    count = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == len(s1):\n        print(count, 2)\n    elif j == len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cards1 = list(map(int, sys.stdin.readline().split()))\n    cards2 = list(map(int, sys.stdin.readline().split()))\n\n    count = 0\n    while len(cards1) > 0 and len(cards2) > 0:\n        if cards1[-1] > cards2[-1]:\n            cards1.pop()\n            cards1.append(cards2.pop())\n            count += 1\n        else:\n            cards2.pop()\n            cards2.append(cards1.pop())\n            count += 1\n\n    if len(cards1) == 0:\n        return count, 2\n    elif len(cards2) == 0:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    deck1 = list(map(int, input().split()))\n    deck2 = list(map(int, input().split()))\n\n    count = 0\n    while len(deck1) > 0 and len(deck2) > 0:\n        if deck1[-1] > deck2[-1]:\n            deck1.pop()\n            deck1.append(deck2.pop())\n            count += 1\n        else:\n            deck2.pop()\n            deck2.append(deck1.pop())\n            count += 1\n\n    if len(deck1) == 0:\n        print(count, 2)\n    elif len(deck2) == 0:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    cards1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    cards2 = list(map(int, sys.stdin.readline().split()))\n\n    total_fights = 0\n    while len(cards1) > 0 and len(cards2) > 0:\n        total_fights += 1\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards1.pop())\n            cards1.append(cards2.pop())\n        else:\n            cards2.append(cards2.pop())\n            cards2.append(cards1.pop())\n\n    if len(cards1) == 0:\n        return total_fights, 2\n    elif len(cards2) == 0:\n        return total_fights, 1\n    else:\n        return -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n\n    def compare_cards(card1, card2):\n        return card1 > card2\n\n    def simulate_war(cards1, cards2):\n        count = 0\n        while cards1 and cards2:\n            if compare_cards(cards1[-1], cards2[-1]):\n                cards1.append(cards1.pop())\n                cards1.append(cards2.pop())\n            else:\n                cards2.append(cards2.pop())\n                cards2.append(cards1.pop())\n            count += 1\n        return count\n\n    total_fights = simulate_war(cards1, cards2)\n    if total_fights == n:\n        print(total_fights, 1)\n    elif total_fights < n:\n        print(total_fights, 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n    \n    f = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s1.pop())\n            s1.append(s2.pop())\n        else:\n            s2.append(s2.pop())\n            s2.append(s1.pop())\n        f += 1\n    \n    if len(s1) == 0:\n        print(f, 2)\n    elif len(s2) == 0:\n        print(f, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s1.pop())\n            s1.append(s2.pop())\n        else:\n            s2.append(s2.pop())\n            s2.append(s1.pop())\n\n        count += 1\n\n    if len(s1) == 0:\n        return count, 2\n    elif len(s2) == 0:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    s1 = sorted(list(map(int, input().split())))\n    s2 = sorted(list(map(int, input().split())))\n\n    i = j = 0\n    count = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == len(s1):\n        print(count, 2)\n    elif j == len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    f = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s1.pop())\n            s1.append(s2.pop())\n        else:\n            s2.append(s2.pop())\n            s2.append(s1.pop())\n\n        f += 1\n\n    if len(s1) == 0:\n        print(f, 2)\n    elif len(s2) == 0:\n        print(f, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n, k1, *cards1 = map(int, sys.stdin.read().split())\n    k2, *cards2 = map(int, sys.stdin.read().split())\n    \n    if k1 == 0 or k2 == 0:\n        return -1\n    \n    count = 0\n    while True:\n        if len(cards1) == 0 or len(cards2) == 0:\n            break\n        \n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n            cards1.append(cards1.pop())\n        else:\n            cards2.append(cards1.pop())\n            cards2.append(cards2.pop())\n        \n        count += 1\n    \n    if len(cards1) == 0:\n        winner = 2\n    elif len(cards2) == 0:\n        winner = 1\n    else:\n        winner = -1\n    \n    print(count, winner)\n\nif True:\n    solve()",
    "import sys\nfrom typing import *\ndef solve(n: int, k1: int, k2: int, s1: List[int], s2: List[int]) -> Tuple[int, int]:\n    i, j = 0, 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop())\n            count += 1\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop())\n            count += 1\n        else:\n            s1.append(s2.pop())\n            s2.append(s1.pop())\n            count += 1\n        i += 1\n        j += 1\n    if i == k1:\n        return count, 2\n    elif j == k2:\n        return count, 1\n    else:\n        return -1, None\nif True:\n    n = int(sys.stdin.readline().strip())\n    k1 = int(sys.stdin.readline().strip())\n    s1 = list(map(int, sys.stdin.readline().strip().split()))\n    k2 = int(sys.stdin.readline().strip())\n    s2 = list(map(int, sys.stdin.readline().strip().split()))\n    result = solve(n, k1, k2, s1, s2)\n    print(*result)",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    i, j = 0, 0\n    count = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == len(s1):\n        print(count, 2)\n    elif j == len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    \n    i = j = 0\n    count = 0\n    \n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        \n        if not s1:\n            return count, 2\n        elif not s2:\n            return count, 1\n    \n    return count, -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    card1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    card2 = list(map(int, sys.stdin.readline().split()))\n\n    count = 0\n    while len(card1) > 0 and len(card2) > 0:\n        if card1[-1] > card2[-1]:\n            card1.append(card2.pop())\n            count += 1\n        else:\n            card2.append(card1.pop())\n            count += 1\n\n    if len(card1) == 0:\n        return count, 2\n    elif len(card2) == 0:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n    \n    i = j = 0\n    count = 0\n    \n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        \n        if not s1:\n            return count, 2\n        elif not s2:\n            return count, 1\n    \n    return count, -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    f = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n            f += 1\n        else:\n            s2.append(s1.pop())\n            f += 1\n\n    if len(s1) == 0:\n        print(f, 2)\n    elif len(s2) == 0:\n        print(f, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n    \n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s1.pop())\n            s1.append(s2.pop())\n        else:\n            s2.append(s2.pop())\n            s2.append(s1.pop())\n        count += 1\n    \n    if len(s1) == 0:\n        return count, 2\n    elif len(s2) == 0:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    \n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n    \n    f = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n            f += 1\n        else:\n            s2.append(s1.pop())\n            f += 1\n    \n    if len(s1) == 0:\n        print(f, 2)\n    elif len(s2) == 0:\n        print(f, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    i1, i2 = 0, 0\n    count = 0\n    while True:\n        if i1 >= len(s1) or i2 >= len(s2):\n            break\n        if s1[i1] > s2[i2]:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            count += 1\n        elif s1[i1] < s2[i2]:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            count += 1\n        else:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            count += 1\n            i1 += 1\n            i2 += 1\n\n    if i1 >= len(s1):\n        print(count, 2)\n    elif i2 >= len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n        else:\n            s2.append(s1.pop())\n        count += 1\n\n    if len(s1) == 0:\n        print(count, 2)\n    elif len(s2) == 0:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    s1 = list(map(int, sys.stdin.readline().strip().split()))\n    s2 = list(map(int, sys.stdin.readline().strip().split()))\n\n    i = j = 0\n    count = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop(0))\n            count += 1\n        else:\n            s2.append(s1.pop(0))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == len(s1):\n        print(count, 2)\n    elif j == len(s2):\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0975609756097561,
    0.0,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0975609756097561,
    0.0,
    0.0,
    0.0975609756097561,
    0.0,
    0.04878048780487805,
    0.04878048780487805,
    0.0,
    0.04878048780487805,
    0.0,
    0.0,
    0.0,
    0.0,
    0.07317073170731707,
    0.0,
    0.0,
    0.0,
    0.04878048780487805,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.04878048780487805
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.325,
    0.0,
    0.0,
    0.0,
    0.125,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.325,
    0.0,
    0.0,
    0.3,
    0.0,
    0.375,
    0.375,
    0.0,
    0.075,
    0.0,
    0.0,
    0.0,
    0.0,
    0.325,
    0.0,
    0.0,
    0.0,
    0.375,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.375
  ],
  "time": [
    5.627586841583252,
    10.909849882125854,
    17.106229543685913,
    34.1300630569458,
    48.81774091720581,
    53.38239073753357,
    70.87863206863403,
    75.78054666519165,
    83.3850724697113,
    90.57196807861328,
    95.73423075675964,
    102.17814326286316,
    107.52443718910217,
    114.46638250350952,
    120.05883932113647,
    128.42844891548157,
    133.0208306312561,
    139.71918177604675,
    154.89922189712524,
    160.96174716949463,
    177.63038635253906,
    194.36329174041748,
    201.13990664482117,
    207.89529013633728,
    213.53767013549805,
    218.5867736339569,
    224.87790274620056,
    231.67971229553223,
    240.89671063423157,
    245.54245495796204,
    250.35896706581116,
    254.85256052017212,
    259.18122124671936,
    264.0791337490082,
    269.5384569168091,
    273.3881106376648,
    287.1017556190491,
    301.48909401893616,
    305.2470841407776,
    320.6790235042572,
    328.3671553134918,
    332.474720954895,
    336.177636384964,
    340.7477316856384,
    344.3577227592468,
    348.0205135345459,
    361.76389598846436,
    376.1272728443146,
    391.9579677581787,
    405.26828479766846,
    419.9062030315399
  ],
  "sample times": 51
}