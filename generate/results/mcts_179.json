{
  "prompt": "\nQUESTION:\nAndrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n\n-----Examples-----\nInput\n4 1 2\n\nOutput\n6\n\nInput\n123 42 24\n\nOutput\n824071958\n\n\n\n-----Note-----\n\nAll possible permutations in the first test case: $(2, 3, 1, 4)$, $(2, 4, 1, 3)$, $(3, 2, 1, 4)$, $(3, 4, 1, 2)$, $(4, 2, 1, 3)$, $(4, 3, 1, 2)$.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "```python\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    if pos == 0:\n        return 0\n    if pos == n - 1:\n        return 1\n    if x == pos + 1:\n        return 1\n    if x == pos - 1:\n        return 1\n    if x == pos:\n        return 2\n    if x == pos + 2:\n        return 2\n    if x == pos - 2:\n        return 2\n    if x == pos + 3:\n        return 2\n    if x == pos - 3:\n        return 2\n    if x == pos + 4:\n        return 2\n    if x == pos - 4:\n        return 2\n    if x == pos + 5:\n        return 2\n    if x == pos - 5:\n        return 2\n    if x == pos + 6:\n        return 2\n    if x == pos - 6:\n        return 2\n    if x == pos + 7:\n        return 2\n    if x == pos - 7:\n        return 2\n    if x == pos + 8:\n        return 2\n    if x == pos - 8:\n        return 2\n    if x == pos + 9:\n        return 2\n    if x == pos - 9:\n        return 2\n    if x == pos + 10:\n        return 2\n    if x == pos - 10:\n        return 2\n    if x == pos + 11:\n        return 2\n    if x == pos - 11:\n        return 2\n    if x == pos + 12:\n        return 2\n    if x == pos - 12:\n        return 2\n    if x == pos + 13:\n        return 2\n    if x == pos - 13:\n        return 2\n    if x == pos + 14:\n        return 2\n    if x == pos - 14:\n        return 2\n    if x == pos + 15:\n        return 2\n    if x == pos - 15:\n        return 2\n    if x == pos + 16:\n        return 2\n    if x == pos - 16:\n        return 2\n    if x == pos + 17:\n        return 2\n    if x == pos - 17:\n        return 2\n    if x == pos + 18:\n        return 2\n    if x == pos - 18:\n        return 2\n    if x == pos + 19:\n        return 2\n    if x == pos - 19:\n        return 2\n    if x == pos + 20:\n        return 2\n    if x == pos - 20:\n        return 2\n    if x == pos + 21:\n        return 2\n    if x == pos - 21:\n        return 2\n    if x == pos + 22:\n        return 2\n    if x == pos - 22:\n        return 2\n    if x == pos + 23:\n        return 2\n    if x == pos - 23:\n        return 2\n    if x == pos + 24:\n        return 2\n    if x == pos - 24:\n        return 2\n    if x == pos + 25:\n        return 2\n    if x == pos - 25:\n        return 2\n    if x == pos + 26:\n        return 2\n    if x == pos - 26:\n        return 2\n    if x == pos + 27:\n        return 2\n    if x == pos - 27:\n        return 2\n    if x == pos + 28:\n        return 2\n    if x == pos - 28:\n        return 2\n    if x == pos + 29:\n        return 2\n    if x == pos - 29:\n        return 2\n    if x == pos + 30:\n        return 2\n    if x == pos - 30:\n        return 2\n    if x == pos + 31:\n        return 2\n    if x == pos - 31:\n        return 2\n    if x == pos + 32:\n        return 2\n    if x == pos - 32:\n        return 2\n    if x == pos + 33:\n        return 2\n    if x == pos - 33:\n        return 2\n    if x == pos + 34:\n        return 2\n    if x == pos - 34:\n        return 2\n    if x == pos + 35:\n        return 2\n    if x == pos - 35:\n        return 2\n    if x == pos + 36:\n        return 2\n    if x == pos - 36:\n        return 2\n    if x == pos + 37:\n        return 2\n    if x == pos - 37:\n        return 2\n    if x == pos + 38:\n        return 2\n    if x == pos - 38:\n        return 2\n    if x == pos + 39:\n        return 2\n    if x == pos - 39:\n        return 2\n    if x == pos + 40:\n        return 2\n    if x == pos - 40:\n        return 2\n    if x == pos + 41:\n        return 2\n    if x == pos - 41:\n        return 2\n    if x == pos + 42:\n        return 2\n    if x == pos - 42:\n        return 2\n    if x == pos + 43:\n        return 2\n    if x == pos - 43:\n        return 2\n    if x == pos + 44:\n        return 2\n    if x == pos - 44:\n        return 2\n    if x",
    "from math import comb\n\ndef solve(n, x, pos):\n    # Calculate the number of ways to choose positions for x excluding the specified position\n    ways_to_choose_positions = comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining = comb(n-1, n-pos-1)\n    \n    # The total number of valid permutations is the product of these two values\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining\n    \n    # Return the result modulo 10^9 + 7\n    return total_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "import math\n\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_positions = math.comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = math.factorial(n-1)\n    \n    # Calculate the total number of valid permutations\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining_numbers\n    \n    # Return the remainder of the division by mod\n    return total_permutations % mod\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def bin_search_permutations(n, x, pos):\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose positions for x\n    ways_to_choose_positions = (n - pos) * (n - pos - 1) // 2 % mod\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining = factorial(n - pos - 1) % mod\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = (ways_to_choose_positions * ways_to_arrange_remaining) % mod\n    \n    return total_valid_permutations\n\n# Main function to handle input and call the solution function\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    x = int(data[1])\n    pos = int(data[2])\n    \n    result = bin_search_permutations(n, x, pos)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, x, pos = data\n    mod = 10**9 + 7\n    \n    def count_permutations(n, x, pos):\n        if n == 1:\n            return 1 if x == pos else 0\n        \n        # Calculate the number of ways to place x at pos\n        ways_to_place_x = 1 if x == pos else 0\n        \n        # Calculate the number of ways to arrange the remaining n-1 elements\n        total_ways = count_permutations(n-1, x, pos)\n        \n        # The total number of valid permutations is the product of the two values\n        return (ways_to_place_x * total_ways) % mod\n    \n    result = count_permutations(n, x, pos)\n    print(result)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, x, pos = data\n    \n    def bin_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == target:\n            return True\n        else:\n            return False\n    \n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        if bin_search(list(range(1, n + 1)), i):\n            count += 1\n    \n    print(count % (10**9 + 7))\n\nif True:\n    solve()",
    "import sys\nfrom math import comb\n\ndef solve(n, x, pos):\n    # Calculate the number of ways to choose positions for x excluding the specified position\n    ways_to_choose_positions = comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining = comb(n-1, n-pos-1)\n    \n    # The total number of valid permutations is the product of these two values\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining\n    \n    # Return the result modulo 10^9 + 7\n    return total_permutations % (10**9 + 7)\n\n# Read input\ninput_data = sys.stdin.read().strip()\n\n# Parse input\nn, x, pos = map(int, input_data.split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def solve(n, x, pos):\n    MOD = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to place x at the required position\n    ways_to_place_x_at_required_position = 1\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = (ways_to_choose_remaining_positions * ways_to_place_x_at_required_position) % MOD\n    \n    return total_valid_permutations\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def main():\n    n, x, pos = map(int, input().split())\n    \n    # Calculate the number of valid permutations\n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        count += (i * (n - i)) % (10**9 + 7)\n    \n    # Print the result\n    print(count)\n\nif True:\n    main()",
    "from math import comb, pow\n\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose positions for x excluding the specified position\n    ways_to_choose_positions = comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    arrangements_of_remaining_numbers = pow(n-1, n-1-x, mod)\n    \n    # Calculate the total number of valid permutations\n    total_permutations = (ways_to_choose_positions * arrangements_of_remaining_numbers) % mod\n    \n    return total_permutations\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def solve(n, x, pos):\n    # Calculate the number of ways to choose the remaining positions for the other numbers\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to place the number x at the specified position\n    ways_to_place_x_at_position = 1\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = ways_to_choose_remaining_positions * ways_to_place_x_at_position\n    \n    # Return the remainder of the division of the total number of valid permutations by 10^9+7\n    return total_valid_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "```python\ndef solve(n, x, pos):\n    mod = 1_000_000_007\n    if pos == 0:\n        return 0\n    if pos == n - 1:\n        return 1\n    if x == pos + 1:\n        return 1\n    if x == pos - 1:\n        return 1\n    if x == pos:\n        return 0\n    if x == pos + 2:\n        return 1\n    if x == pos - 2:\n        return 1\n    if x == pos + 3:\n        return 1\n    if x == pos - 3:\n        return 1\n    if x == pos + 4:\n        return 1\n    if x == pos - 4:\n        return 1\n    if x == pos + 5:\n        return 1\n    if x == pos - 5:\n        return 1\n    if x == pos + 6:\n        return 1\n    if x == pos - 6:\n        return 1\n    if x == pos + 7:\n        return 1\n    if x == pos - 7:\n        return 1\n    if x == pos + 8:\n        return 1\n    if x == pos - 8:\n        return 1\n    if x == pos + 9:\n        return 1\n    if x == pos - 9:\n        return 1\n    if x == pos + 10:\n        return 1\n    if x == pos - 10:\n        return 1\n    if x == pos + 11:\n        return 1\n    if x == pos - 11:\n        return 1\n    if x == pos + 12:\n        return 1\n    if x == pos - 12:\n        return 1\n    if x == pos + 13:\n        return 1\n    if x == pos - 13:\n        return 1\n    if x == pos + 14:\n        return 1\n    if x == pos - 14:\n        return 1\n    if x == pos + 15:\n        return 1\n    if x == pos - 15:\n        return 1\n    if x == pos + 16:\n        return 1\n    if x == pos - 16:\n        return 1\n    if x == pos + 17:\n        return 1\n    if x == pos - 17:\n        return 1\n    if x == pos + 18:\n        return 1\n    if x == pos - 18:\n        return 1\n    if x == pos + 19:\n        return 1\n    if x == pos - 19:\n        return 1\n    if x == pos + 20:\n        return 1\n    if x == pos - 20:\n        return 1\n    if x == pos + 21:\n        return 1\n    if x == pos - 21:\n        return 1\n    if x == pos + 22:\n        return 1\n    if x == pos - 22:\n        return 1\n    if x == pos + 23:\n        return 1\n    if x == pos - 23:\n        return 1\n    if x == pos + 24:\n        return 1\n    if x == pos - 24:\n        return 1\n    if x == pos + 25:\n        return 1\n    if x == pos - 25:\n        return 1\n    if x == pos + 26:\n        return 1\n    if x == pos - 26:\n        return 1\n    if x == pos + 27:\n        return 1\n    if x == pos - 27:\n        return 1\n    if x == pos + 28:\n        return 1\n    if x == pos - 28:\n        return 1\n    if x == pos + 29:\n        return 1\n    if x == pos - 29:\n        return 1\n    if x == pos + 30:\n        return 1\n    if x == pos - 30:\n        return 1\n    if x == pos + 31:\n        return 1\n    if x == pos - 31:\n        return 1\n    if x == pos + 32:\n        return 1\n    if x == pos - 32:\n        return 1\n    if x == pos + 33:\n        return 1\n    if x == pos - 33:\n        return 1\n    if x == pos + 34:\n        return 1\n    if x == pos - 34:\n        return 1\n    if x == pos + 35:\n        return 1\n    if x == pos - 35:\n        return 1\n    if x == pos + 36:\n        return 1\n    if x == pos - 36:\n        return 1\n    if x == pos + 37:\n        return 1\n    if x == pos - 37:\n        return 1\n    if x == pos + 38:\n        return 1\n    if x == pos - 38:\n        return 1\n    if x == pos + 39:\n        return 1\n    if x == pos - 39:\n        return 1\n    if x == pos + 40:\n        return 1\n    if x == pos - 40:\n        return 1\n    if x == pos + 41:\n        return 1\n    if x == pos - 41:\n        return 1\n    if x == pos + 42:\n        return 1\n    if x == pos - 42:\n        return 1\n    if x == pos + 43:\n        return 1\n    if x == pos - 43:\n        return 1\n    if x == pos + 44:\n        return 1\n    if x == pos - 44:\n        return",
    "from typing import *\nimport math\nimport sys\n\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    if pos == 0:\n        return math.comb(n-1, x-1) % mod\n    elif pos == n-1:\n        return math.comb(n-1, x) % mod\n    else:\n        return math.comb(n-1, x-1) * (n-pos) % mod\n\nif True:\n    n, x, pos = map(int, input().split())\n    print(solve(n, x, pos))",
    "def main():\n    # Read input\n    n, x, pos = map(int, input().split())\n    \n    # Calculate the number of valid permutations\n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        count += (i * (n - i)) % (10**9 + 7)\n    \n    # Print the result\n    print(count)\n\nif True:\n    main()",
    "import math\nfrom collections import *\n\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    # Calculate the number of ways to choose the remaining positions for the other numbers\n    total_ways = math.comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    remaining_arrangements = math.factorial(n-1)\n    \n    # Calculate the number of ways to place the target number at the specified position\n    target_position_ways = math.comb(1, 1)\n    \n    # Calculate the final number of valid permutations\n    valid_permutations = (total_ways * remaining_arrangements * target_position_ways) % mod\n    \n    return valid_permutations\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def solve():\n    n, x, pos = map(int, input().split())\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = (n - 1) ** (n - 1)\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = ways_to_choose_remaining_positions * ways_to_arrange_remaining_numbers\n    \n    # Print the remainder of the division by 10^9+7\n    print(total_valid_permutations % (10**9 + 7))\n\nif True:\n    solve()",
    "def solve(n, x, pos):\n    MOD = 1_000_000_007\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = (n - 1) ** (n - 1)\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = ways_to_choose_remaining_positions * ways_to_arrange_remaining_numbers\n    \n    # Return the remainder of the division by MOD\n    return total_valid_permutations % MOD\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "from math import factorial\n\ndef solve(n, x, pos):\n    # Calculate the number of ways to choose positions for x\n    ways_to_choose_positions = factorial(pos) * factorial(n - pos - 1)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = factorial(n - 1)\n    \n    # The total number of valid permutations\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining_numbers\n    \n    # Return the remainder of the division by 10^9+7\n    return total_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def main():\n    import math\n    def bin_search_permutations(n, x, pos):\n        # Calculate the number of ways to choose positions for x\n        ways_to_choose_positions = math.comb(pos, x)\n        \n        # Calculate the number of ways to arrange the remaining numbers\n        remaining_numbers = n - x\n        ways_to_arrange_remaining = math.factorial(remaining_numbers)\n        \n        # Calculate the total number of valid permutations\n        total_valid_permutations = ways_to_choose_positions * ways_to_arrange_remaining\n        \n        # Return the result modulo 10^9 + 7\n        return total_valid_permutations % (10**9 + 7)\n\n    # Read input\n    n, x, pos = map(int, input().split())\n\n    # Calculate and print the result\n    print(bin_search_permutations(n, x, pos))\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n, x, pos = int(data[0]), int(data[1]), int(data[2])\n    \n    def bin_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    def count_permutations(n, x, pos):\n        if not bin_search(list(range(1, n + 1)), x):\n            return 0\n        \n        if pos == 0:\n            return 1\n        \n        count = 0\n        for i in range(1, n + 1):\n            if i == x:\n                continue\n            if i < x:\n                count += count_permutations(n - 1, x, pos - 1)\n            else:\n                count += count_permutations(n - 1, x, pos)\n        \n        return count % (10**9 + 7)\n\n    print(count_permutations(n, x, pos))\n\nif True:\n    main()",
    "```python\ndef bin_search_count(n, x, pos):\n    mod = 10**9 + 7\n    if pos == 0:\n        return 1\n    if pos == n - 1:\n        return 1\n    if x == n - 1:\n        return 1\n    if x == 0:\n        return 1\n    if x == pos:\n        return 1\n    if x == n - pos - 1:\n        return 1\n    if x == n // 2:\n        return 1\n    if x == n // 2 + 1:\n        return 1\n    if x == n // 2 - 1:\n        return 1\n    if x == n // 2 + 2:\n        return 1\n    if x == n // 2 - 2:\n        return 1\n    if x == n // 2 + 3:\n        return 1\n    if x == n // 2 - 3:\n        return 1\n    if x == n // 2 + 4:\n        return 1\n    if x == n // 2 - 4:\n        return 1\n    if x == n // 2 + 5:\n        return 1\n    if x == n // 2 - 5:\n        return 1\n    if x == n // 2 + 6:\n        return 1\n    if x == n // 2 - 6:\n        return 1\n    if x == n // 2 + 7:\n        return 1\n    if x == n // 2 - 7:\n        return 1\n    if x == n // 2 + 8:\n        return 1\n    if x == n // 2 - 8:\n        return 1\n    if x == n // 2 + 9:\n        return 1\n    if x == n // 2 - 9:\n        return 1\n    if x == n // 2 + 10:\n        return 1\n    if x == n // 2 - 10:\n        return 1\n    if x == n // 2 + 11:\n        return 1\n    if x == n // 2 - 11:\n        return 1\n    if x == n // 2 + 12:\n        return 1\n    if x == n // 2 - 12:\n        return 1\n    if x == n // 2 + 13:\n        return 1\n    if x == n // 2 - 13:\n        return 1\n    if x == n // 2 + 14:\n        return 1\n    if x == n // 2 - 14:\n        return 1\n    if x == n // 2 + 15:\n        return 1\n    if x == n // 2 - 15:\n        return 1\n    if x == n // 2 + 16:\n        return 1\n    if x == n // 2 - 16:\n        return 1\n    if x == n // 2 + 17:\n        return 1\n    if x == n // 2 - 17:\n        return 1\n    if x == n // 2 + 18:\n        return 1\n    if x == n // 2 - 18:\n        return 1\n    if x == n // 2 + 19:\n        return 1\n    if x == n // 2 - 19:\n        return 1\n    if x == n // 2 + 20:\n        return 1\n    if x == n // 2 - 20:\n        return 1\n    if x == n // 2 + 21:\n        return 1\n    if x == n // 2 - 21:\n        return 1\n    if x == n // 2 + 22:\n        return 1\n    if x == n // 2 - 22:\n        return 1\n    if x == n // 2 + 23:\n        return 1\n    if x == n // 2 - 23:\n        return 1\n    if x == n // 2 + 24:\n        return 1\n    if x == n // 2 - 24:\n        return 1\n    if x == n // 2 + 25:\n        return 1\n    if x == n // 2 - 25:\n        return 1\n    if x == n // 2 + 26:\n        return 1\n    if x == n // 2 - 26:\n        return 1\n    if x == n // 2 + 27:\n        return 1\n    if x == n // 2 - 27:\n        return 1\n    if x == n // 2 + 28:\n        return 1\n    if x == n // 2 - 28:\n        return 1\n    if x == n // 2 + 29:\n        return 1\n    if x == n // 2 - 29:\n        return 1\n    if x == n // 2 + 30:\n        return 1\n    if x == n // 2 - 30:\n        return 1\n    if x == n // 2 + 31:\n        return 1\n    if x == n // 2 - 31:\n        return 1\n    if x == n // 2 + 32:\n        return 1\n    if x == n // 2 - 32:\n        return 1\n    if x == n // 2 + 33:\n        return 1\n    if x == n // 2 - 33:\n        return 1\n    if x == n // 2 + 34:\n        return 1\n    if x == n // 2 - 34:\n        return 1\n    if x == n // 2 + 35:\n        return 1\n    if x == n // 2 - 35:\n        return 1\n    if x == n",
    "def solve(n, x, pos):\n    MOD = 10**9 + 7\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    for i in range(1, n + 1):\n        dp[i][i] = 1\n    \n    # Fill the DP table\n    for l in range(2, n + 1):\n        for i in range(1, n - l + 2):\n            j = i + l - 1\n            if i == j:\n                dp[i][j] = 1\n            elif i < j:\n                dp[i][j] = (dp[i][j - 1] + dp[i + 1][j]) % MOD\n    \n    # Calculate the number of valid permutations\n    count = 0\n    for i in range(1, n + 1):\n        if i == pos:\n            count = (count + dp[1][i]) % MOD\n    \n    return count\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "import math\n\ndef bin_search_permutations(n, x, pos):\n    # Calculate the number of ways to choose positions for x\n    ways_to_choose_positions = math.comb(pos, x)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining = math.factorial(n - x - 1)\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = ways_to_choose_positions * ways_to_arrange_remaining\n    \n    # Return the result modulo 10^9 + 7\n    return total_valid_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Print the result\nprint(bin_search_permutations(n, x, pos))",
    "from math import comb\ndef solve(n, x, pos):\n    # Calculate the number of ways to choose positions for x excluding the specified position\n    ways_to_choose_positions = comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    arrangements_of_remaining_numbers = comb(n-1, n-pos-1)\n    \n    # The total number of valid permutations is the product of these two values\n    total_permutations = ways_to_choose_positions * arrangements_of_remaining_numbers\n    \n    # Return the result modulo 10^9+7\n    return total_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    \n    def solve(n, x, pos):\n        mod = 10**9 + 7\n        \n        # Calculate the number of ways to choose the remaining positions\n        total_ways = (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        if pos == 0:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == n - 1:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 1:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == n - 2:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 2:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 3:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 4:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 5:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 6:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 7:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 8:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 9:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 10:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 11:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 12:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 13:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 14:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 15:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 16:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 17:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 18:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do not include x\n        elif pos == 19:\n            total_ways -= (n - 1) * (n - 2) // 2\n        \n        # If the position of x is fixed, we need to choose the remaining positions\n        # such that they do",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, x, pos = map(int, data)\n    \n    def bin_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == target:\n            return True\n        else:\n            return False\n    \n    def count_permutations(n, x, pos):\n        if not bin_search(list(range(1, n + 1)), x):\n            return 0\n        \n        if pos == 0:\n            return 1\n        \n        count = 0\n        for i in range(1, n + 1):\n            if i == x:\n                continue\n            if i < x:\n                count += count_permutations(n - 1, x, pos - 1)\n            else:\n                count += count_permutations(n - 1, x, pos)\n        \n        return count % (10**9 + 7)\n\n    print(count_permutations(n, x, pos))\n\nif True:\n    main()",
    "def solve(n, x, pos):\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to place x at the required position\n    ways_to_place_x_at_required_position = 1\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = (ways_to_choose_remaining_positions * ways_to_place_x_at_required_position) % mod\n    \n    return total_valid_permutations\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def bin_search(n, x, pos):\n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        if i < x:\n            count += (n - i) * (i - pos)\n        else:\n            count += (n - i) * (pos - i)\n    return count % (10**9 + 7)\n\ndef main():\n    n, x, pos = map(int, input().split())\n    print(bin_search(n, x, pos))\n\nif True:\n    main()",
    "```python\ndef solve(n, x, pos):\n    mod = 10**9+7\n    if pos == 0:\n        return 0\n    if pos == n-1:\n        return 1\n    if x == pos+1:\n        return 1\n    if x == pos:\n        return 0\n    if x == pos-1:\n        return 1\n    if x == pos+2:\n        return 1\n    if x == pos-2:\n        return 1\n    if x == pos+3:\n        return 1\n    if x == pos-3:\n        return 1\n    if x == pos+4:\n        return 1\n    if x == pos-4:\n        return 1\n    if x == pos+5:\n        return 1\n    if x == pos-5:\n        return 1\n    if x == pos+6:\n        return 1\n    if x == pos-6:\n        return 1\n    if x == pos+7:\n        return 1\n    if x == pos-7:\n        return 1\n    if x == pos+8:\n        return 1\n    if x == pos-8:\n        return 1\n    if x == pos+9:\n        return 1\n    if x == pos-9:\n        return 1\n    if x == pos+10:\n        return 1\n    if x == pos-10:\n        return 1\n    if x == pos+11:\n        return 1\n    if x == pos-11:\n        return 1\n    if x == pos+12:\n        return 1\n    if x == pos-12:\n        return 1\n    if x == pos+13:\n        return 1\n    if x == pos-13:\n        return 1\n    if x == pos+14:\n        return 1\n    if x == pos-14:\n        return 1\n    if x == pos+15:\n        return 1\n    if x == pos-15:\n        return 1\n    if x == pos+16:\n        return 1\n    if x == pos-16:\n        return 1\n    if x == pos+17:\n        return 1\n    if x == pos-17:\n        return 1\n    if x == pos+18:\n        return 1\n    if x == pos-18:\n        return 1\n    if x == pos+19:\n        return 1\n    if x == pos-19:\n        return 1\n    if x == pos+20:\n        return 1\n    if x == pos-20:\n        return 1\n    if x == pos+21:\n        return 1\n    if x == pos-21:\n        return 1\n    if x == pos+22:\n        return 1\n    if x == pos-22:\n        return 1\n    if x == pos+23:\n        return 1\n    if x == pos-23:\n        return 1\n    if x == pos+24:\n        return 1\n    if x == pos-24:\n        return 1\n    if x == pos+25:\n        return 1\n    if x == pos-25:\n        return 1\n    if x == pos+26:\n        return 1\n    if x == pos-26:\n        return 1\n    if x == pos+27:\n        return 1\n    if x == pos-27:\n        return 1\n    if x == pos+28:\n        return 1\n    if x == pos-28:\n        return 1\n    if x == pos+29:\n        return 1\n    if x == pos-29:\n        return 1\n    if x == pos+30:\n        return 1\n    if x == pos-30:\n        return 1\n    if x == pos+31:\n        return 1\n    if x == pos-31:\n        return 1\n    if x == pos+32:\n        return 1\n    if x == pos-32:\n        return 1\n    if x == pos+33:\n        return 1\n    if x == pos-33:\n        return 1\n    if x == pos+34:\n        return 1\n    if x == pos-34:\n        return 1\n    if x == pos+35:\n        return 1\n    if x == pos-35:\n        return 1\n    if x == pos+36:\n        return 1\n    if x == pos-36:\n        return 1\n    if x == pos+37:\n        return 1\n    if x == pos-37:\n        return 1\n    if x == pos+38:\n        return 1\n    if x == pos-38:\n        return 1\n    if x == pos+39:\n        return 1\n    if x == pos-39:\n        return 1\n    if x == pos+40:\n        return 1\n    if x == pos-40:\n        return 1\n    if x == pos+41:\n        return 1\n    if x == pos-41:\n        return 1\n    if x == pos+42:\n        return 1\n    if x == pos-42:\n        return 1\n    if x == pos+43:\n        return 1\n    if x == pos-43:\n        return 1\n    if x == pos+44:\n        return 1\n    if x == pos-44:\n        return 1\n    if x == pos+45:\n        return 1\n    if x == pos-45:\n        return 1\n    if x == pos+46:\n        return 1\n    if x == pos-46:\n        return 1\n    if x == pos+47:\n        return 1\n    if x == pos-47:\n        return 1\n    if x == pos+48:",
    "def main():\n    import sys\n    def binary_search(arr, x):\n        left = 0\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == x:\n            return True\n        else:\n            return False\n    \n    n, x, pos = map(int, sys.stdin.readline().split())\n    \n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        perm = [i]\n        for j in range(n - 1):\n            perm.append(j + 1)\n        perm[pos] = x\n        if binary_search(perm, x):\n            count += 1\n    \n    print(count % (10**9 + 7))\n\nif True:\n    main()",
    "import sys\n\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to place x at the required position\n    ways_to_place_x_at_required_position = 1\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = (ways_to_choose_remaining_positions * ways_to_place_x_at_required_position) % mod\n    \n    return total_valid_permutations\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    x = int(input_data[1])\n    pos = int(input_data[2])\n    \n    result = solve(n, x, pos)\n    print(result)",
    "def solve(n, x, pos):\n    MOD = 10**9+7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_remaining_positions = (n-1) * (n-2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = factorial(n-1)\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = (ways_to_choose_remaining_positions * ways_to_arrange_remaining_numbers) % MOD\n    \n    return total_valid_permutations\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, x, pos)\n\n# Print the result\nprint(result)",
    "def main():\n    import math\n    n, x, pos = map(int, input().split())\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_positions = math.comb(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = math.factorial(n-1)\n    \n    # Calculate the total number of valid permutations\n    total_valid_permutations = ways_to_choose_positions * ways_to_arrange_remaining_numbers\n    \n    # Print the remainder of the division by 10^9+7\n    print(total_valid_permutations % (10**9 + 7))\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def bin_search(arr, x):\n        left = 0\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == x:\n            return True\n        else:\n            return False\n    \n    n, x, pos = data\n    count = 0\n    \n    # Generate all permutations of size n\n    from itertools import permutations\n    perm_list = list(permutations(range(1, n + 1)))\n    \n    # Check each permutation for the given conditions\n    for perm in perm_list:\n        if perm[pos] == x and bin_search(perm, x):\n            count += 1\n    \n    # Print the result modulo 10^9+7\n    print(count % (10**9 + 7))\n\nif True:\n    main()",
    "def main():\n    import sys\n    \n    def solve(n, x, pos):\n        mod = 10**9 + 7\n        \n        # Calculate the number of ways to choose the remaining positions for x\n        ways_to_choose_remaining_positions = (n - 1) * (n - 2) // 2\n        \n        # Calculate the number of ways to place x at the specified position\n        ways_to_place_x_at_pos = 1\n        \n        # Calculate the number of ways to arrange the remaining numbers\n        ways_to_arrange_remaining_numbers = (n - 1) % mod\n        \n        # Calculate the total number of valid permutations\n        total_valid_permutations = (ways_to_choose_remaining_positions * ways_to_place_x_at_pos * ways_to_arrange_remaining_numbers) % mod\n        \n        return total_valid_permutations\n    \n    # Read input\n    input_data = sys.stdin.read().strip()\n    \n    # Parse input\n    n, x, pos = map(int, input_data.split())\n    \n    # Solve the problem\n    result = solve(n, x, pos)\n    \n    # Print the result\n    print(result)\n\nif True:\n    main()",
    "```python\ndef solve(n, x, pos):\n    mod = 10**9 + 7\n    # Calculate the number of ways to choose the remaining positions for the other numbers\n    total_ways = (n - 1) * (n - 2) // 2\n    \n    # If the position of x is fixed, we need to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1) * (n - 2) // 2\n    # But since we are fixing the position of x, we need to subtract the number of ways to choose the remaining positions for the other numbers\n    # The number of ways to choose the remaining positions for the other numbers is (n - 1",
    "def solve(n,x,pos):\n    mod=10**9+7\n    if pos==0:\n        return 0\n    elif pos==n-1:\n        return 1\n    else:\n        return (solve(n-1,x,pos)+solve(n-1,x,pos+1))%mod\nif __name__==\"__main__\":\n    n,x,pos=list(map(int,input().split()))\n    print(solve(n,x,pos))",
    "import math\n\ndef factorial(n):\n    return math.factorial(n)\n\ndef binomial_coefficient(n, k):\n    return math.comb(n, k)\n\ndef count_permutations(n, x, pos):\n    # Calculate the number of ways to choose positions for x excluding pos\n    ways_to_choose_positions = binomial_coefficient(n-1, pos)\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    remaining_numbers = n - pos - 1\n    ways_to_arrange_remaining = factorial(remaining_numbers)\n    \n    # The total number of valid permutations\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining\n    \n    # Return the result modulo 10^9 + 7\n    return total_permutations % (10**9 + 7)\n\n# Read input\nn, x, pos = map(int, input().split())\n\n# Calculate the number of valid permutations\nresult = count_permutations(n, x, pos)\n\n# Print the result\nprint(result)",
    "```python\ndef main():\n    import sys\n\n    def solve(n, x, pos):\n        mod = 10**9 + 7\n        if pos == 0:\n            return 0\n        if pos == n - 1:\n            return 1\n        if x == pos + 1:\n            return 1\n        if x == pos - 1:\n            return 1\n        if x == pos:\n            return 0\n        if x == pos + 2:\n            return 1\n        if x == pos - 2:\n            return 1\n        if x == pos + 3:\n            return 1\n        if x == pos - 3:\n            return 1\n        if x == pos + 4:\n            return 1\n        if x == pos - 4:\n            return 1\n        if x == pos + 5:\n            return 1\n        if x == pos - 5:\n            return 1\n        if x == pos + 6:\n            return 1\n        if x == pos - 6:\n            return 1\n        if x == pos + 7:\n            return 1\n        if x == pos - 7:\n            return 1\n        if x == pos + 8:\n            return 1\n        if x == pos - 8:\n            return 1\n        if x == pos + 9:\n            return 1\n        if x == pos - 9:\n            return 1\n        if x == pos + 10:\n            return 1\n        if x == pos - 10:\n            return 1\n        if x == pos + 11:\n            return 1\n        if x == pos - 11:\n            return 1\n        if x == pos + 12:\n            return 1\n        if x == pos - 12:\n            return 1\n        if x == pos + 13:\n            return 1\n        if x == pos - 13:\n            return 1\n        if x == pos + 14:\n            return 1\n        if x == pos - 14:\n            return 1\n        if x == pos + 15:\n            return 1\n        if x == pos - 15:\n            return 1\n        if x == pos + 16:\n            return 1\n        if x == pos - 16:\n            return 1\n        if x == pos + 17:\n            return 1\n        if x == pos - 17:\n            return 1\n        if x == pos + 18:\n            return 1\n        if x == pos - 18:\n            return 1\n        if x == pos + 19:\n            return 1\n        if x == pos - 19:\n            return 1\n        if x == pos + 20:\n            return 1\n        if x == pos - 20:\n            return 1\n        if x == pos + 21:\n            return 1\n        if x == pos - 21:\n            return 1\n        if x == pos + 22:\n            return 1\n        if x == pos - 22:\n            return 1\n        if x == pos + 23:\n            return 1\n        if x == pos - 23:\n            return 1\n        if x == pos + 24:\n            return 1\n        if x == pos - 24:\n            return 1\n        if x == pos + 25:\n            return 1\n        if x == pos - 25:\n            return 1\n        if x == pos + 26:\n            return 1\n        if x == pos - 26:\n            return 1\n        if x == pos + 27:\n            return 1\n        if x == pos - 27:\n            return 1\n        if x == pos + 28:\n            return 1\n        if x == pos - 28:\n            return 1\n        if x == pos + 29:\n            return 1\n        if x == pos - 29:\n            return 1\n        if x == pos + 30:\n            return 1\n        if x == pos - 30:\n            return 1\n        if x == pos + 31:\n            return 1\n        if x == pos - 31:\n            return 1\n        if x == pos + 32:\n            return 1\n        if x == pos - 32:\n            return 1\n        if x == pos + 33:\n            return 1\n        if x == pos - 33:\n            return 1\n        if x == pos + 34:\n            return 1\n        if x == pos - 34:\n            return 1\n        if x == pos + 35:\n            return 1\n        if x == pos - 35:\n            return 1\n        if x == pos + 36:\n            return 1\n        if x == pos - 36:\n            return 1\n        if x == pos + 37:\n            return 1\n        if x == pos - 37:\n            return 1\n        if x == pos + 38:\n            return 1\n        if x == pos - 38:\n            return 1\n        if x == pos + 39:\n            return 1\n        if x == pos - 39:\n            return 1\n        if x == pos + 40:\n            return 1\n        if x == pos - 40:\n            return 1\n        if x == pos + 41:\n            return 1\n        if x == pos - 41:\n            return 1\n        if x == pos + 42:\n            return 1\n        if x == pos - 42:\n            return 1\n        if x == pos + 43:\n            return 1\n        if x == pos - 43:\n            return 1\n        if x == pos + 44:\n            return 1\n        if x == pos - 44:",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    solve(data)\n\ndef solve(data):\n    n, x, pos = data\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = factorial(n - 1)\n    \n    # Calculate the total number of valid permutations\n    total_permutations = ways_to_choose_positions * ways_to_arrange_remaining_numbers % mod\n    \n    print(total_permutations)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nif True:\n    main()",
    "```python\ndef solve(n, x, pos):\n    mod = int(1e9 + 7)\n    if pos == 0:\n        return 0\n    if pos == n - 1:\n        return 1\n    if x == pos + 1:\n        return 1\n    if x == pos - 1:\n        return 1\n    if x == pos:\n        return 2\n    if x == pos + 2:\n        return 2\n    if x == pos - 2:\n        return 2\n    if x == pos + 3:\n        return 2\n    if x == pos - 3:\n        return 2\n    if x == pos + 4:\n        return 2\n    if x == pos - 4:\n        return 2\n    if x == pos + 5:\n        return 2\n    if x == pos - 5:\n        return 2\n    if x == pos + 6:\n        return 2\n    if x == pos - 6:\n        return 2\n    if x == pos + 7:\n        return 2\n    if x == pos - 7:\n        return 2\n    if x == pos + 8:\n        return 2\n    if x == pos - 8:\n        return 2\n    if x == pos + 9:\n        return 2\n    if x == pos - 9:\n        return 2\n    if x == pos + 10:\n        return 2\n    if x == pos - 10:\n        return 2\n    if x == pos + 11:\n        return 2\n    if x == pos - 11:\n        return 2\n    if x == pos + 12:\n        return 2\n    if x == pos - 12:\n        return 2\n    if x == pos + 13:\n        return 2\n    if x == pos - 13:\n        return 2\n    if x == pos + 14:\n        return 2\n    if x == pos - 14:\n        return 2\n    if x == pos + 15:\n        return 2\n    if x == pos - 15:\n        return 2\n    if x == pos + 16:\n        return 2\n    if x == pos - 16:\n        return 2\n    if x == pos + 17:\n        return 2\n    if x == pos - 17:\n        return 2\n    if x == pos + 18:\n        return 2\n    if x == pos - 18:\n        return 2\n    if x == pos + 19:\n        return 2\n    if x == pos - 19:\n        return 2\n    if x == pos + 20:\n        return 2\n    if x == pos - 20:\n        return 2\n    if x == pos + 21:\n        return 2\n    if x == pos - 21:\n        return 2\n    if x == pos + 22:\n        return 2\n    if x == pos - 22:\n        return 2\n    if x == pos + 23:\n        return 2\n    if x == pos - 23:\n        return 2\n    if x == pos + 24:\n        return 2\n    if x == pos - 24:\n        return 2\n    if x == pos + 25:\n        return 2\n    if x == pos - 25:\n        return 2\n    if x == pos + 26:\n        return 2\n    if x == pos - 26:\n        return 2\n    if x == pos + 27:\n        return 2\n    if x == pos - 27:\n        return 2\n    if x == pos + 28:\n        return 2\n    if x == pos - 28:\n        return 2\n    if x == pos + 29:\n        return 2\n    if x == pos - 29:\n        return 2\n    if x == pos + 30:\n        return 2\n    if x == pos - 30:\n        return 2\n    if x == pos + 31:\n        return 2\n    if x == pos - 31:\n        return 2\n    if x == pos + 32:\n        return 2\n    if x == pos - 32:\n        return 2\n    if x == pos + 33:\n        return 2\n    if x == pos - 33:\n        return 2\n    if x == pos + 34:\n        return 2\n    if x == pos - 34:\n        return 2\n    if x == pos + 35:\n        return 2\n    if x == pos - 35:\n        return 2\n    if x == pos + 36:\n        return 2\n    if x == pos - 36:\n        return 2\n    if x == pos + 37:\n        return 2\n    if x == pos - 37:\n        return 2\n    if x == pos + 38:\n        return 2\n    if x == pos - 38:\n        return 2\n    if x == pos + 39:\n        return 2\n    if x == pos - 39:\n        return 2\n    if x == pos + 40:\n        return 2\n    if x == pos - 40:\n        return 2\n    if x == pos + 41:\n        return 2\n    if x == pos - 41:\n        return 2\n    if x == pos + 42:\n        return 2\n    if x == pos - 42:\n        return 2\n    if x == pos + 43:\n        return 2\n    if x == pos - 43:\n        return 2\n    if x == pos + 44:\n        return 2\n    if x == pos - 44:\n        return 2\n    if x",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int,input().split()))\n    n, x, pos = data\n    mod = 10**9 + 7\n    \n    def count_permutations(n, x, pos):\n        if n == 1:\n            return 1 if x == pos else 0\n        \n        # Calculate the number of ways to place x at position pos\n        ways_to_place_x = 1 if x == pos else 0\n        \n        # Calculate the number of ways to arrange the remaining n-1 elements\n        remaining_elements = n - 1\n        ways_to_arrange_remaining = count_permutations(remaining_elements, x, pos)\n        \n        # The total number of valid permutations is the product of these two values\n        total_ways = ways_to_place_x * ways_to_arrange_remaining\n        \n        return total_ways % mod\n    \n    result = count_permutations(n, x, pos)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input=sys.stdin.read\n    data=input().split()\n    n=int(data[0])\n    x=int(data[1])\n    pos=int(data[2])\n    \n    def bin_search(arr,x):\n        l=0\n        r=len(arr)-1\n        while l<r:\n            mid=(l+r)//2\n            if arr[mid]<=x:\n                l=mid+1\n            else:\n                r=mid\n        if l>0 and arr[l-1]==x:\n            return True\n        else:\n            return False\n    \n    count=0\n    for i in range(1,n+1):\n        if i==x:\n            continue\n        perm=[i]\n        for j in range(1,n):\n            if j!=x:\n                perm.append(j)\n        perm.sort()\n        if bin_search(perm,x):\n            count+=1\n            \n    print(count%(10**9+7))\n\nif __name__==\"__main__\":\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, x, pos = data\n    \n    def bin_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == target:\n            return True\n        else:\n            return False\n    \n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        if bin_search(list(range(1, n + 1)), i):\n            count += 1\n    \n    print(count % (10**9 + 7))\n\nif True:\n    main()",
    "def main():\n    import sys\n    input_data = sys.stdin.read().splitlines()\n    n, x, pos = map(int, input_data[0].split())\n    \n    def count_permutations(n, x, pos):\n        if n == 1:\n            return 1 if x == pos else 0\n        \n        # Calculate the number of ways to place x at position pos\n        ways_to_place_x = 1 if x == pos else 0\n        \n        # Calculate the number of ways to arrange the remaining n-1 elements\n        total_ways = count_permutations(n-1, x, pos)\n        \n        # The total number of valid permutations is the product of the two values\n        return ways_to_place_x * total_ways\n    \n    result = count_permutations(n, x, pos)\n    print(result % (10**9 + 7))\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n\n    def solve(n, x, pos):\n        mod = 10**9 + 7\n        if pos == 0:\n            return 0\n        if pos == n - 1:\n            return 1\n        if x == pos + 1:\n            return 1\n        if x == pos - 1:\n            return 1\n        if x == pos:\n            return 0\n        if x < pos:\n            return solve(n, x, pos - 1)\n        if x > pos:\n            return solve(n, x, pos + 1)\n\n    n, x, pos = map(int, input().split())\n    print(solve(n, x, pos))\n\nif True:\n    main()",
    "```python\ndef solve(n, x, pos):\n    mod = pow(10, 9) + 7\n    if pos == 0:\n        return 1\n    if pos == n - 1:\n        return 1\n    if x == pos + 1:\n        return 1\n    if x == pos - 1:\n        return 1\n    if x == pos:\n        return 2\n    if x == pos + 2:\n        return 2\n    if x == pos - 2:\n        return 2\n    if x == pos + 3:\n        return 2\n    if x == pos - 3:\n        return 2\n    if x == pos + 4:\n        return 2\n    if x == pos - 4:\n        return 2\n    if x == pos + 5:\n        return 2\n    if x == pos - 5:\n        return 2\n    if x == pos + 6:\n        return 2\n    if x == pos - 6:\n        return 2\n    if x == pos + 7:\n        return 2\n    if x == pos - 7:\n        return 2\n    if x == pos + 8:\n        return 2\n    if x == pos - 8:\n        return 2\n    if x == pos + 9:\n        return 2\n    if x == pos - 9:\n        return 2\n    if x == pos + 10:\n        return 2\n    if x == pos - 10:\n        return 2\n    if x == pos + 11:\n        return 2\n    if x == pos - 11:\n        return 2\n    if x == pos + 12:\n        return 2\n    if x == pos - 12:\n        return 2\n    if x == pos + 13:\n        return 2\n    if x == pos - 13:\n        return 2\n    if x == pos + 14:\n        return 2\n    if x == pos - 14:\n        return 2\n    if x == pos + 15:\n        return 2\n    if x == pos - 15:\n        return 2\n    if x == pos + 16:\n        return 2\n    if x == pos - 16:\n        return 2\n    if x == pos + 17:\n        return 2\n    if x == pos - 17:\n        return 2\n    if x == pos + 18:\n        return 2\n    if x == pos - 18:\n        return 2\n    if x == pos + 19:\n        return 2\n    if x == pos - 19:\n        return 2\n    if x == pos + 20:\n        return 2\n    if x == pos - 20:\n        return 2\n    if x == pos + 21:\n        return 2\n    if x == pos - 21:\n        return 2\n    if x == pos + 22:\n        return 2\n    if x == pos - 22:\n        return 2\n    if x == pos + 23:\n        return 2\n    if x == pos - 23:\n        return 2\n    if x == pos + 24:\n        return 2\n    if x == pos - 24:\n        return 2\n    if x == pos + 25:\n        return 2\n    if x == pos - 25:\n        return 2\n    if x == pos + 26:\n        return 2\n    if x == pos - 26:\n        return 2\n    if x == pos + 27:\n        return 2\n    if x == pos - 27:\n        return 2\n    if x == pos + 28:\n        return 2\n    if x == pos - 28:\n        return 2\n    if x == pos + 29:\n        return 2\n    if x == pos - 29:\n        return 2\n    if x == pos + 30:\n        return 2\n    if x == pos - 30:\n        return 2\n    if x == pos + 31:\n        return 2\n    if x == pos - 31:\n        return 2\n    if x == pos + 32:\n        return 2\n    if x == pos - 32:\n        return 2\n    if x == pos + 33:\n        return 2\n    if x == pos - 33:\n        return 2\n    if x == pos + 34:\n        return 2\n    if x == pos - 34:\n        return 2\n    if x == pos + 35:\n        return 2\n    if x == pos - 35:\n        return 2\n    if x == pos + 36:\n        return 2\n    if x == pos - 36:\n        return 2\n    if x == pos + 37:\n        return 2\n    if x == pos - 37:\n        return 2\n    if x == pos + 38:\n        return 2\n    if x == pos - 38:\n        return 2\n    if x == pos + 39:\n        return 2\n    if x == pos - 39:\n        return 2\n    if x == pos + 40:\n        return 2\n    if x == pos - 40:\n        return 2\n    if x == pos + 41:\n        return 2\n    if x == pos - 41:\n        return 2\n    if x == pos + 42:\n        return 2\n    if x == pos - 42:\n        return 2\n    if x == pos + 43:\n        return 2\n    if x == pos - 43:\n        return 2\n    if x == pos + 44:\n        return 2\n    if x == pos - 44:\n        return 2",
    "def main():\n    import sys\n    input = sys.stdin.read\n    def readline(): return input().rstrip('\\n')\n    \n    n, x, pos = map(int, readline().split())\n    \n    # Calculate the number of valid permutations\n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        count += (i * (n - i)) % (10**9 + 7)\n    \n    # Adjust for the position of x\n    if pos == 0:\n        count -= (n - x) % (10**9 + 7)\n    elif pos == n - 1:\n        count -= (x - 1) % (10**9 + 7)\n    else:\n        count -= ((x - 1) * (n - x)) % (10**9 + 7)\n    \n    # Print the result modulo 10^9 + 7\n    print(count % (10**9 + 7))\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, x, pos = data\n    MOD = 10**9 + 7\n    \n    def count_permutations(n, x, pos):\n        if n == 1:\n            return 1 if x == pos else 0\n        \n        # Calculate the number of ways to place x at pos\n        ways_to_place_x = 1 if x == pos else 0\n        \n        # Calculate the number of ways to arrange the remaining n-1 elements\n        total_ways = count_permutations(n-1, x, pos)\n        \n        # The total number of valid permutations is the product of the two values\n        return (ways_to_place_x * total_ways) % MOD\n    \n    result = count_permutations(n, x, pos)\n    print(result)\n\nif True:\n    main()",
    "def main():\n    n, x, pos = map(int, input().split())\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = factorial(n - 1)\n    \n    # Calculate the total number of valid permutations\n    total_permutations = (ways_to_choose_positions * ways_to_arrange_remaining_numbers) % mod\n    \n    print(total_permutations)\n\ndef solve():\n    n, x, pos = map(int, input().split())\n    mod = 10**9 + 7\n    \n    # Calculate the number of ways to choose the remaining positions for x\n    ways_to_choose_positions = (n - 1) * (n - 2) // 2\n    \n    # Calculate the number of ways to arrange the remaining numbers\n    ways_to_arrange_remaining_numbers = factorial(n - 1)\n    \n    # Calculate the total number of valid permutations\n    total_permutations = (ways_to_choose_positions * ways_to_arrange_remaining_numbers) % mod\n    \n    print(total_permutations)\n\nif True:\n    main()",
    "def main():\n    import sys\n    def bin_search(arr, x):\n        left = 0\n        right = len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        if left > 0 and arr[left - 1] == x:\n            return True\n        else:\n            return False\n    \n    n, x, pos = map(int, sys.stdin.readline().split())\n    \n    count = 0\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        perm = [i]\n        for j in range(n - 1):\n            perm.append(j + 1)\n        if bin_search(perm, x):\n            count += 1\n    \n    print(count % (10**9 + 7))\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.025,
    0.0,
    0.05,
    0.025,
    0.0,
    0.025,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.075,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.025,
    0.0,
    0.025,
    0.025,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.05,
    0.0,
    0.025,
    0.05,
    0.025,
    0.0,
    0.025,
    0.05,
    0.0,
    0.025
  ],
  "train rewards": [
    0.0,
    0.075,
    0.15,
    0.0,
    0.225,
    0.075,
    0.075,
    0.05,
    0.0,
    0.0,
    0.05,
    0.0,
    0.075,
    0.0,
    0.15,
    0.025,
    0.025,
    0.05,
    0.225,
    0.0,
    0.0,
    0.075,
    0.1,
    0.075,
    0.0,
    0.0,
    0.05,
    0.025,
    0.0,
    0.1,
    0.05,
    0.025,
    0.15,
    0.0,
    0.025,
    0.0,
    0.0,
    0.125,
    0.0,
    0.025,
    0.0,
    0.225,
    0.0,
    0.075,
    0.225,
    0.075,
    0.0,
    0.025,
    0.225,
    0.0,
    0.1
  ],
  "time": [
    35.29499387741089,
    40.19839429855347,
    45.00766682624817,
    53.38274645805359,
    58.87467861175537,
    64.41531682014465,
    69.86092853546143,
    74.3434636592865,
    77.22705483436584,
    81.83634352684021,
    86.8089907169342,
    121.92508697509766,
    125.64466857910156,
    128.66915321350098,
    134.18665075302124,
    138.7922122478485,
    143.76353311538696,
    148.53638076782227,
    155.5559115409851,
    162.9021520614624,
    207.71664881706238,
    214.19376587867737,
    219.3702883720398,
    224.32653498649597,
    259.08666348457336,
    266.1252088546753,
    280.3432250022888,
    283.8917200565338,
    318.5223753452301,
    324.0825936794281,
    332.56786704063416,
    337.48342061042786,
    341.68758177757263,
    347.59632205963135,
    364.0760040283203,
    398.522057056427,
    401.1740024089813,
    406.89810490608215,
    441.7212133407593,
    446.4028387069702,
    481.0908257961273,
    486.48816561698914,
    492.05370259284973,
    496.80471682548523,
    505.16294407844543,
    509.6908402442932,
    544.6397571563721,
    550.5550227165222,
    555.2134099006653,
    567.166552066803,
    572.6768128871918
  ],
  "sample times": 51
}