{
  "prompt": "\nQUESTION:\nCarl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b and c (0 \u2264 a, b, c \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that he needs to get.\n\n\n-----Output-----\n\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n\n\n-----Examples-----\nInput\n4 4 0\n2 1 2\n\nOutput\nYes\n\nInput\n5 6 1\n2 7 2\n\nOutput\nNo\n\nInput\n3 3 3\n2 2 2\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(a, b, c, x, y, z):\n    while True:\n        if a >= x and b >= y and c >= z:\n            return \"Yes\"\n        \n        # Try to transform blue spheres\n        if a > 0 and b > 0:\n            a -= 2\n            b -= 2\n            c += 1\n        \n        # Try to transform violet spheres\n        elif b > 0 and c > 0:\n            a += 1\n            b -= 2\n            c -= 2\n        \n        # Try to transform orange spheres\n        elif a > 0 and c > 0:\n            a -= 1\n            b += 1\n            c -= 2\n        \n        # If no transformation is possible, return \"No\"\n        else:\n            return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def main():\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    \n    while True:\n        if a == x and b == y and c == z:\n            print(\"Yes\")\n            return\n        \n        if a >= 2:\n            a -= 2\n            b += 1\n        elif b >= 2:\n            b -= 2\n            c += 1\n        elif c >= 2:\n            c -= 2\n            a += 1\n        else:\n            print(\"No\")\n            return\n\nif True:\n    main()",
    "def solve():\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n\n    while True:\n        if a == x and b == y and c == z:\n            print(\"Yes\")\n            return\n        if a >= 2:\n            a -= 2\n            b += 1\n        elif b >= 2:\n            b -= 2\n            c += 1\n        elif c >= 2:\n            c -= 2\n            a += 1\n        else:\n            print(\"No\")\n            return\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    a, b, c = data[0], data[1], data[2]\n    x, y, z = data[3], data[4], data[5]\n    \n    def can_transform(a, b, c):\n        return a >= x and b >= y and c >= z\n    \n    def transform(a, b, c):\n        if a >= x and b >= y and c >= z:\n            return True\n        elif a >= x and b >= y:\n            return transform(a - x, b - y, c + 1)\n        elif a >= x and c >= z:\n            return transform(a - x, b + 1, c - z)\n        elif b >= y and c >= z:\n            return transform(a + 1, b - y, c - z)\n        else:\n            return False\n    \n    if can_transform(a, b, c):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    a, b, c = data[0], data[1], data[2]\n    x, y, z = data[3], data[4], data[5]\n\n    def can_transform(a, b, c):\n        return a >= x and b >= y and c >= z\n\n    def transform(a, b, c):\n        if a >= x and b >= y and c >= z:\n            return True\n        elif a >= x and b >= y:\n            return transform(a - x, b - y, c + 1)\n        elif a >= x and c >= z:\n            return transform(a - x, b + 1, c - z)\n        elif b >= y and c >= z:\n            return transform(a + 1, b - y, c - z)\n        else:\n            return False\n\n    if can_transform(a, b, c):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    a, b, c = map(int, sys.stdin.readline().split())\n    x, y, z = map(int, sys.stdin.readline().split())\n\n    while True:\n        if a == x and b == y and c == z:\n            print(\"Yes\")\n            return\n        if a >= 2 and b >= 2:\n            a -= 2\n            b -= 2\n            c += 1\n        elif a >= 2 and c >= 2:\n            a -= 2\n            c -= 2\n            b += 1\n        elif b >= 2 and c >= 2:\n            b -= 2\n            c -= 2\n            a += 1\n        else:\n            print(\"No\")\n            return\n\nif True:\n    solve()",
    "def solve(a, b, c, x, y, z):\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    while True:\n        if a >= x and b >= y and c >= z:\n            return \"Yes\"\n        \n        if a > 0 and b > 0:\n            a -= 2\n            b -= 2\n            c += 1\n        \n        elif a > 0 and c > 0:\n            a -= 2\n            c -= 2\n            b += 1\n        \n        elif b > 0 and c > 0:\n            b -= 2\n            c -= 2\n            a += 1\n        \n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the initial number of spheres is enough to reach the target\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the total number of moves needed\n    total_moves = x + y + z\n    \n    # If the total number of moves is less than the initial number of spheres, it's impossible to reach the target\n    if total_moves > a + b + c:\n        return \"No\"\n    \n    # If the total number of moves is equal to the initial number of spheres, it's possible to reach the target\n    if total_moves == a + b + c:\n        return \"Yes\"\n    \n    # If the total number of moves is greater than the initial number of spheres, it's possible to reach the target by transforming some spheres\n    else:\n        # Calculate the number of moves needed to transform some spheres\n        moves_needed = total_moves - (a + b + c)\n        \n        # If the number of moves needed is even, it's possible to reach the target\n        if moves_needed % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def main():\n    # Read input\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n\n    # Check if it's possible to get the required number of spheres\n    if a >= x and b >= y and c >= z:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of spheres Carl has initially\n    initial_spheres = a + b + c\n    \n    # Calculate the total number of spheres Carl needs to get\n    needed_spheres = x + y + z\n    \n    # Check if Carl can get the required number of spheres\n    if initial_spheres >= needed_spheres:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    if x > a or y > b or z > c:\n        return \"No\"\n    \n    while True:\n        if x == 0 and y == 0 and z == 0:\n            return \"Yes\"\n        \n        if x >= 2:\n            x -= 2\n            y += 1\n        elif y >= 2:\n            y -= 2\n            z += 1\n        elif z >= 2:\n            z -= 2\n            x += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while a > x or b > y or c > z:\n        if a >= b and a >= c:\n            a -= 2\n            x += 1\n        elif b >= a and b >= c:\n            b -= 2\n            y += 1\n        else:\n            c -= 2\n            z += 1\n    return a == x and b == y and c == z\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(\"Yes\" if solve(a, b, c, x, y, z) else \"No\")",
    "```python\ndef solve(a, b, c, x, y, z):\n    # Convert all colors to orange\n    a += c\n    b += c\n    c = 0\n    \n    # Check if we already have enough spheres\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    \n    # Try to convert blue and violet spheres to orange\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while c >= x and a >= y:\n        c -= x\n        a -= y\n        b += x + y\n    \n    # If we still don't have enough spheres, try to convert blue and violet spheres to orange again\n    while a >= x and b >= y:\n        a -= x\n        b -= y\n        c += x + y\n    \n    # If we still don't have enough spheres, try to convert orange spheres to blue and violet again\n    while",
    "def solve():\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    \n    if sum(n) < sum(m):\n        print(\"No\")\n        return\n    \n    for i in range(3):\n        if n[i] > m[i]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve(a: int, b: int, c: int, x: int, y: int, z: int) -> str:\n    while True:\n        if a == x and b == y and c == z:\n            return \"Yes\"\n        \n        if a >= 2:\n            a -= 2\n            b += 1\n        elif b >= 2:\n            b -= 2\n            c += 1\n        elif c >= 2:\n            c -= 2\n            a += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while True:\n        if x <= a and y <= b and z <= c:\n            return \"Yes\"\n        if a >= 2:\n            a -= 2\n            x += 1\n        elif b >= 2:\n            b -= 2\n            y += 1\n        elif c >= 2:\n            c -= 2\n            z += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while True:\n        if a == x and b == y and c == z:\n            return \"Yes\"\n        \n        if a >= 2:\n            a -= 2\n            b += 1\n        elif b >= 2:\n            b -= 2\n            c += 1\n        elif c >= 2:\n            c -= 2\n            a += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to reach the target using the given moves\n    if (a + b + c) < (x + y + z):\n        return \"No\"\n    \n    # Calculate the minimum number of moves needed\n    min_moves = max(x, y, z)\n    \n    # If the total number of moves is less than the minimum required, it's not possible\n    if min_moves > (a + b + c - (x + y + z)):\n        return \"No\"\n    \n    return \"Yes\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the difference between the required and current number of each color\n    diff_b = x - a\n    diff_v = y - b\n    diff_o = z - c\n    \n    # If the difference is negative, it means Carl cannot achieve the required number of spheres\n    if diff_b < 0 or diff_v < 0 or diff_o < 0:\n        return \"No\"\n    \n    # If the difference is zero, Carl already has the required number of spheres\n    elif diff_b == 0 and diff_v == 0 and diff_o == 0:\n        return \"Yes\"\n    \n    # If the difference is positive, Carl can achieve the required number of spheres by performing the necessary transformations\n    else:\n        return \"Yes\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to get the required number of spheres\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the minimum number of moves needed\n    min_moves = max(x - a, y - b, z - c)\n    \n    # If the minimum number of moves is less than or equal to the total number of moves available,\n    # then it's possible to get the required number of spheres\n    if min_moves <= a + b + c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the total number of spheres needed is less than or equal to the available spheres\n    if x + y + z <= a + b + c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to achieve the target using the given moves\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    if a + b + c < x + y + z:\n        return \"No\"\n    \n    while True:\n        if a >= x and b >= y and c >= z:\n            return \"Yes\"\n        \n        if a > 0 and b > 0:\n            a -= 1\n            b -= 1\n        elif a > 0 and c > 0:\n            a -= 1\n            c -= 1\n        elif b > 0 and c > 0:\n            b -= 1\n            c -= 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while True:\n        # Check if we already have enough spheres\n        if a >= x and b >= y and c >= z:\n            return \"Yes\"\n        \n        # Try to transform two spheres of the same color into one sphere of another color\n        for i in range(3):\n            if a > 0 and b > 0 and i == 0:\n                a -= 2\n                b -= 2\n                c += 1\n            elif b > 0 and c > 0 and i == 1:\n                a -= 2\n                b -= 2\n                c += 1\n            elif c > 0 and a > 0 and i == 2:\n                a -= 2\n                b -= 2\n                c += 1\n        \n        # If we couldn't transform any spheres, it's not possible\n        if a <= 0 and b <= 0 and c <= 0:\n            return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the initial number of spheres meets the requirements\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the total number of moves needed\n    total_moves = x + y + z\n    \n    # If the total number of moves is less than the initial number of spheres,\n    # it's impossible to reach the required number of spheres\n    if total_moves > a + b + c:\n        return \"No\"\n    \n    # If the total number of moves is equal to the initial number of spheres,\n    # it's possible to reach the required number of spheres by transforming all spheres\n    if total_moves == a + b + c:\n        return \"Yes\"\n    \n    # If the total number of moves is greater than the initial number of spheres,\n    # it's possible to reach the required number of spheres by transforming some spheres\n    return \"Yes\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of spheres needed\n    total_needed = x + y + z\n    \n    # Calculate the total number of spheres Carl currently has\n    total_current = a + b + c\n    \n    # If Carl doesn't have enough spheres, return 'No'\n    if total_current < total_needed:\n        return 'No'\n    \n    # If Carl already has enough spheres, return 'Yes'\n    elif total_current == total_needed:\n        return 'Yes'\n    \n    # If Carl has more than enough spheres, calculate how many additional moves are needed\n    else:\n        # Calculate the number of moves needed for each color\n        moves_blue = (total_needed - a) // 2\n        moves_violet = (total_needed - b) // 2\n        moves_orange = (total_needed - c) // 2\n        \n        # Return 'Yes' if Carl can achieve the required number of spheres with the given moves\n        return 'Yes' if moves_blue >= x and moves_violet >= y and moves_orange >= z else 'No'\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the required number of spheres can be obtained\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of blue, violet, and orange spheres needed\n    total_needed = x + y + z\n    \n    # If the total number of spheres needed is greater than the available spheres, return 'No'\n    if total_needed > a + b + c:\n        return 'No'\n    \n    # If the total number of spheres needed is equal to the available spheres, return 'Yes'\n    elif total_needed == a + b + c:\n        return 'Yes'\n    \n    # If the total number of spheres needed is less than the available spheres, calculate the minimum number of moves required\n    else:\n        # Calculate the minimum number of moves required for each color\n        min_moves_blue = max(0, x - a)\n        min_moves_violet = max(0, y - b)\n        min_moves_orange = max(0, z - c)\n        \n        # Return 'Yes' if the minimum number of moves required is less than or equal to the available moves\n        return 'Yes' if min_moves_blue + min_moves_violet + min_moves_orange <= a + b + c else 'No'\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the initial conditions are sufficient\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the total number of moves needed\n    total_moves = x + y + z\n    \n    # If the total number of moves is less than the number of spheres available,\n    # it's impossible to achieve the desired outcome\n    if total_moves > a + b + c:\n        return \"No\"\n    \n    # If the total number of moves is equal to the number of spheres available,\n    # it's possible to achieve the desired outcome by performing the necessary transformations\n    else:\n        return \"Yes\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Calculate the minimum number of moves needed to reach the target\n    min_moves = max(x, y, z)\n    \n    # Check if it's possible to reach the target using the given number of moves\n    if min_moves <= a + b + c - x - y - z:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of each color needed\n    total_needed = x + y + z\n    \n    # Calculate the total number of each color available\n    total_available = a + b + c\n    \n    # If the total available is less than the total needed, return 'No'\n    if total_available < total_needed:\n        return 'No'\n    \n    # If the total available is equal to the total needed, return 'Yes'\n    elif total_available == total_needed:\n        return 'Yes'\n    \n    # If the total available is greater than the total needed, calculate the minimum number of moves required\n    else:\n        # Calculate the minimum number of moves required for each color\n        min_moves_blue = max(0, total_needed - a)\n        min_moves_violet = max(0, total_needed - b)\n        min_moves_orange = max(0, total_needed - c)\n        \n        # Return 'Yes' if the minimum number of moves required for all colors is less than or equal to the total available\n        return 'Yes' if min_moves_blue + min_moves_violet + min_moves_orange <= total_available else 'No'\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while a > 0 or b > 0 or c > 0:\n        if a >= x and b >= y and c >= z:\n            return True\n        elif a >= x and b >= y:\n            a -= x\n            b -= y\n        elif a >= x and c >= z:\n            a -= x\n            c -= z\n        elif b >= y and c >= z:\n            b -= y\n            c -= z\n        else:\n            return False\n    return False\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(\"Yes\" if solve(a, b, c, x, y, z) else \"No\")",
    "def solve(a, b, c, x, y, z):\n    while True:\n        if x == 0 and y == 0 and z == 0:\n            return \"Yes\"\n        \n        if a >= 2:\n            a -= 2\n            x += 1\n        elif b >= 2:\n            b -= 2\n            y += 1\n        elif c >= 2:\n            c -= 2\n            z += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    if x > a + b or y > a + c or z > b + c:\n        return \"No\"\n    \n    while True:\n        if x == a and y == b and z == c:\n            return \"Yes\"\n        \n        if x >= a and y >= b and z >= c:\n            break\n        \n        if x >= a and y >= b:\n            x -= a\n            y -= b\n            z += 2\n        elif x >= a and z >= c:\n            x -= a\n            z -= c\n            y += 2\n        elif y >= b and z >= c:\n            y -= b\n            z -= c\n            x += 2\n    \n    return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to reach the target\n    if (a + b + c) < (x + y + z):\n        return \"No\"\n    \n    # Calculate the minimum number of moves needed\n    min_moves = max(x, y, z)\n    \n    # If the number of moves is less than or equal to the total number of spheres,\n    # it's possible to reach the target\n    if min_moves <= (a + b + c):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of spheres Carl starts with\n    total_spheres = a + b + c\n    \n    # Calculate the total number of spheres Carl needs to get\n    needed_spheres = x + y + z\n    \n    # If Carl doesn't have enough spheres to get the required ones, return 'No'\n    if total_spheres < needed_spheres:\n        return 'No'\n    \n    # If Carl already has enough spheres to get the required ones, return 'Yes'\n    elif total_spheres >= needed_spheres:\n        return 'Yes'\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the difference between the initial and target counts for each color\n    diff_b = x - a\n    diff_v = y - b\n    diff_o = z - c\n    \n    # If the difference is negative, it means Carl cannot achieve the target count\n    if diff_b < 0 or diff_v < 0 or diff_o < 0:\n        return \"No\"\n    \n    # If the difference is zero, Carl already has the target count\n    elif diff_b == 0 and diff_v == 0 and diff_o == 0:\n        return \"Yes\"\n    \n    # If the difference is positive, Carl can achieve the target count by performing the necessary transformations\n    else:\n        return \"Yes\"\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if the initial count of each color is sufficient to reach the target counts\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the total number of moves needed\n    total_moves = x + y + z\n    \n    # If the total number of moves is less than the initial count of each color,\n    # it's impossible to reach the target counts\n    if total_moves < a or total_moves < b or total_moves < c:\n        return \"No\"\n    \n    # If the total number of moves is equal to the initial count of each color,\n    # it's possible to reach the target counts by transforming all spheres\n    return \"Yes\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of each color after transformations\n    total_blue = a + b - x\n    total_violet = b + c - y\n    total_orange = c + a - z\n    \n    # Check if it's possible to reach the target colors\n    return total_blue >= x and total_violet >= y and total_orange >= z\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nif solve(a, b, c, x, y, z):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
    "def solve(a, b, c, x, y, z):\n    while True:\n        if a < x or b < y or c < z:\n            return \"No\"\n        \n        if a >= x and b >= y and c >= z:\n            return \"Yes\"\n        \n        if a > 0 and b > 0:\n            a -= 2\n            b += 1\n        \n        elif a > 0 and c > 0:\n            a -= 2\n            c += 1\n        \n        elif b > 0 and c > 0:\n            b -= 2\n            c += 1\n        \n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if we already have enough spheres\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    \n    # Try to transform blue spheres\n    if a > 0 and b > 0:\n        a -= 2\n        b -= 2\n        c += 1\n    \n    # Try to transform violet spheres\n    if b > 0 and c > 0:\n        b -= 2\n        c -= 2\n        a += 1\n    \n    # Try to transform orange spheres\n    if c > 0 and a > 0:\n        c -= 2\n        a -= 2\n        b += 1\n    \n    # If we still don't have enough spheres, return \"No\"\n    return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while True:\n        if x <= 0 and y <= 0 and z <= 0:\n            return \"Yes\"\n        \n        if a >= 2:\n            a -= 2\n            x += 1\n        elif b >= 2:\n            b -= 2\n            y += 1\n        elif c >= 2:\n            c -= 2\n            z += 1\n        else:\n            return \"No\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to reach the required number of spheres\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the minimum number of moves needed\n    min_moves = max(x - a, y - b, z - c)\n    \n    # If the minimum number of moves is less than or equal to the total number of moves available,\n    # then it's possible to reach the required number of spheres\n    if min_moves <= a + b + c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the difference between the target and current number of each color\n    diff_b = x - a\n    diff_v = y - b\n    diff_o = z - c\n    \n    # If the difference is negative, it means Carl cannot achieve the target\n    if diff_b < 0 or diff_v < 0 or diff_o < 0:\n        return \"No\"\n    \n    # If the difference is zero, Carl already has the target\n    elif diff_b == 0 and diff_v == 0 and diff_o == 0:\n        return \"Yes\"\n    \n    # If the difference is positive, Carl can achieve the target by transforming the excess spheres\n    else:\n        # Carl needs to transform the excess spheres into the required colors\n        # The minimum number of transformations needed is the sum of the differences divided by 2\n        min_transformations = (diff_b + diff_v + diff_o) // 2\n        \n        # Check if Carl can perform the necessary transformations\n        if min_transformations <= diff_b + diff_v + diff_o:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of spheres Carl has\n    total_spheres = a + b + c\n    \n    # Calculate the total number of spheres Carl needs\n    needed_spheres = x + y + z\n    \n    # If Carl has enough spheres to make the spell, return 'Yes'\n    if total_spheres >= needed_spheres:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to achieve the required number of spheres\n    if a < x or b < y or c < z:\n        return \"No\"\n    \n    # Calculate the minimum number of moves needed\n    min_moves = max(x - a, y - b, z - c)\n    \n    # If the minimum number of moves is less than or equal to the total number of moves available,\n    # then it's possible to achieve the required number of spheres\n    if min_moves <= a + b + c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the total number of spheres Carl needs\n    total_needed = x + y + z\n    \n    # Calculate the total number of spheres Carl currently has\n    total_current = a + b + c\n    \n    # If Carl doesn't have enough spheres, return 'No'\n    if total_current < total_needed:\n        return 'No'\n    \n    # If Carl already has enough spheres, return 'Yes'\n    elif total_current == total_needed:\n        return 'Yes'\n    \n    # If Carl has more than enough spheres, calculate how many moves are needed\n    else:\n        # Calculate the number of moves needed for each color\n        moves_blue = (total_needed - a) // 2\n        moves_violet = (total_needed - b) // 2\n        moves_orange = (total_needed - c) // 2\n        \n        # Return 'Yes' if Carl can achieve the required number of spheres\n        return 'Yes' if moves_blue >= 0 and moves_violet >= 0 and moves_orange >= 0 else 'No'\n\n# Read input from stdin\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    while x > 0 or y > 0 or z > 0:\n        if x >= 2:\n            x -= 2\n            y += 1\n        elif y >= 2:\n            y -= 2\n            z += 1\n        elif z >= 2:\n            z -= 2\n            x += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\nif True:\n    a, b, c = map(int, input().split())\n    x, y, z = map(int, input().split())\n    print(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Calculate the minimum number of moves needed for each color\n    min_moves = [max(0, x - a), max(0, y - b), max(0, z - c)]\n    \n    # If the total number of moves is less than the required number of moves for each color, return 'No'\n    if sum(min_moves) < min(x, y, z):\n        return 'No'\n    \n    # If the total number of moves is equal to the required number of moves for each color, return 'Yes'\n    elif sum(min_moves) == min(x, y, z):\n        return 'Yes'\n    \n    # If the total number of moves is greater than the required number of moves for each color, return 'No'\n    else:\n        return 'No'\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nprint(solve(a, b, c, x, y, z))",
    "def solve(a, b, c, x, y, z):\n    # Check if it's possible to reach the target state\n    if (a >= x and b >= y and c >= z) or (a <= x and b <= y and c <= z):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Solve the problem\nresult = solve(a, b, c, x, y, z)\n\n# Print the result\nprint(result)"
  ],
  "rewards": [
    0.725,
    0.475,
    0.475,
    0.675,
    0.675,
    0.375,
    0.675,
    0.5,
    0.675,
    0.65,
    0.375,
    0.5,
    0.0,
    0.35,
    0.475,
    0.675,
    0.475,
    0.8,
    0.35,
    0.675,
    0.675,
    0.65,
    0.675,
    0.675,
    0.0,
    0.675,
    0.35,
    0.675,
    0.65,
    0.675,
    0.8,
    0.725,
    0.65,
    0.375,
    0.0,
    0.65,
    0.65,
    0.35,
    0.525,
    0.75,
    0.675,
    0.675,
    0.375,
    0.675,
    0.35,
    0.65,
    0.675,
    0.425,
    0.375,
    0.425,
    0.675
  ],
  "train rewards": [
    0.5641025641025641,
    0.5641025641025641,
    0.5641025641025641,
    0.5641025641025641,
    0.5641025641025641,
    0.5128205128205128,
    0.5641025641025641,
    0.5128205128205128,
    0.5641025641025641,
    0.5897435897435898,
    0.48717948717948717,
    0.5128205128205128,
    0.0,
    0.5128205128205128,
    0.5641025641025641,
    0.5641025641025641,
    0.5641025641025641,
    0.6923076923076923,
    0.48717948717948717,
    0.5641025641025641,
    0.5641025641025641,
    0.5897435897435898,
    0.5641025641025641,
    0.5641025641025641,
    0.0,
    0.5641025641025641,
    0.5128205128205128,
    0.5641025641025641,
    0.5897435897435898,
    0.5641025641025641,
    0.6923076923076923,
    0.6666666666666666,
    0.0,
    0.48717948717948717,
    0.0,
    0.5897435897435898,
    0.5897435897435898,
    0.48717948717948717,
    0.5384615384615384,
    0.6153846153846154,
    0.5641025641025641,
    0.5641025641025641,
    0.48717948717948717,
    0.5641025641025641,
    0.48717948717948717,
    0.5897435897435898,
    0.5641025641025641,
    0.48717948717948717,
    0.48717948717948717,
    0.5128205128205128,
    0.5384615384615384
  ],
  "time": [
    6.577585458755493,
    11.999078273773193,
    19.830633878707886,
    30.33509397506714,
    37.10338282585144,
    42.416279554367065,
    49.315099477767944,
    57.85487699508667,
    60.649789333343506,
    64.92389678955078,
    69.84569954872131,
    74.8641505241394,
    120.39455604553223,
    122.95375609397888,
    128.02073097229004,
    135.95344638824463,
    142.24334406852722,
    150.72040176391602,
    157.03629684448242,
    159.58344221115112,
    164.5895721912384,
    167.7917172908783,
    170.80898308753967,
    176.03976607322693,
    185.44828033447266,
    202.27216720581055,
    210.22005796432495,
    213.24015593528748,
    221.6095962524414,
    227.29099488258362,
    231.26013588905334,
    239.52190804481506,
    244.3970832824707,
    258.54929780960083,
    266.87816166877747,
    281.5714395046234,
    286.8167996406555,
    292.7931728363037,
    298.49445366859436,
    302.45062923431396,
    307.549147605896,
    313.7732608318329,
    318.0063817501068,
    325.2159905433655,
    333.58087277412415,
    337.65060925483704,
    342.5919728279114,
    350.478209733963,
    354.7227246761322,
    364.6229476928711,
    367.8839416503906
  ],
  "sample times": 51
}