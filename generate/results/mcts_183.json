{
  "prompt": "\nQUESTION:\nAmr doesn't like Maths as he finds it really boring, so he usually sleeps in Maths lectures. But one day the teacher suspected that Amr is sleeping and asked him a question to make sure he wasn't.\n\nFirst he gave Amr two positive integers n and k. Then he asked Amr, how many integer numbers x > 0 exist such that:  Decimal representation of x (without leading zeroes) consists of exactly n digits;  There exists some integer y > 0 such that:   $y \\operatorname{mod} k = 0$;  decimal representation of y is a suffix of decimal representation of x.  \n\nAs the answer to this question may be pretty huge the teacher asked Amr to output only its remainder modulo a number m.\n\nCan you help Amr escape this embarrassing situation?\n\n\n-----Input-----\n\nInput consists of three integers n, k, m (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 100, 1 \u2264 m \u2264 10^9).\n\n\n-----Output-----\n\nPrint the required number modulo m.\n\n\n-----Examples-----\nInput\n1 2 1000\n\nOutput\n4\nInput\n2 2 1000\n\nOutput\n45\nInput\n5 3 1103\n\nOutput\n590\n\n\n-----Note-----\n\nA suffix of a string S is a non-empty string that can be obtained by removing some number (possibly, zero) of first characters from S.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def main():\n    n, k, m = map(int, input().split())\n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        if len(x) == n:\n            for j in range(1, 10**k):\n                y = str(j)\n                if y.endswith(x):\n                    count += 1\n    print(count % m)\n\nif True:\n    main()",
    "import sys\n\ndef solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, sys.stdin.read().split())\n    print(solve(n, k, m))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    print(count % m)\n\nif True:\n    solve()",
    "def solution(n, k, m):\n    def count_valid_numbers(n, k, m):\n        total_count = 0\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if j % k == 0:\n                    total_count += 1\n        return total_count\n    \n    result = count_valid_numbers(n, k, m)\n    return result % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solution(n, k, m))",
    "from typing import *\nimport math\n\ndef solve(n: int, k: int, m: int) -> int:\n    def count_valid_numbers(n: int, k: int) -> int:\n        # Calculate the total number of valid numbers with n digits\n        total_count = 0\n        \n        for i in range(1, n + 1):\n            # Calculate the number of ways to choose i digits from n\n            ways_to_choose_digits = math.comb(n, i)\n            \n            # Calculate the number of valid suffixes for each chosen set of digits\n            valid_suffixes = 0\n            \n            for j in range(i + 1, n + 1):\n                # Calculate the number of ways to choose j digits from n\n                ways_to_choose_suffixes += math.comb(n, j)\n                \n                # Check if the chosen set of digits forms a valid suffix\n                if j % k == 0:\n                    valid_suffixes += 1\n                    \n            # Add the product of ways to choose digits and valid suffixes to the total count\n            total_count += ways_to_choose_digits * valid_suffixes\n        \n        return total_count\n    \n    # Calculate the number of valid numbers with n digits\n    result = count_valid_numbers(n, k)\n    \n    # Return the result modulo m\n    return result % m\n\n# Main function to handle input and call the solve function\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k, m):\n        total_count = 0\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if (j - i) % k == 0:\n                    total_count += 1\n        return total_count\n    \n    result = count_valid_numbers(n, k, m)\n    return result % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1, mod)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "import sys\nfrom collections import *\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1, mod)\n    return count % m\n\nif True:\n    n, k, m = map(int, sys.stdin.read().split())\n    print(solve(n, k, m))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    result = solve(n, k, m)\n    print(result % m)\n\ndef solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count\n\nif True:\n    main()",
    "import math\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, n+1):\n        if i % k == 0:\n            count += math.comb(i-1, n-1)\n    \n    return count % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x):\n        return len(str(x)) - len(str(x % k))\n    \n    total_count = 0\n    for i in range(1, 10**n):\n        if count_suffixes(i) == n:\n            total_count += 1\n    \n    return total_count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = pow(10, 9) + 7\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve():\n    n, k, m = map(int, input().split())\n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        if len(x) == n:\n            for j in range(1, 10**k):\n                y = str(j)\n                if y.endswith(x):\n                    count += 1\n                    break\n    print(count % m)\n\nif True:\n    solve()",
    "from math import comb\n\ndef solve(n, k, m):\n    total = 0\n    for i in range(1, n + 1):\n        total += comb(i, n - i)\n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_suffixes(n, k):\n        # Calculate the total number of valid suffixes for n digits\n        return (k + 1) * (k + 2) // 2\n    \n    # Calculate the number of valid x values based on the given conditions\n    valid_x_count = count_valid_suffixes(n, k)\n    \n    # Return the result modulo m\n    return valid_x_count % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k, m)\n\n# Print the result\nprint(result)",
    "import sys\n\ndef main():\n    n, k, m = map(int, sys.stdin.read().split())\n    result = solve(n, k, m)\n    print(result % m)\n\ndef solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count\n\nif True:\n    main()",
    "def solve(n, k, m):\n    count = 0\n    for x in range(1, 10**n):\n        str_x = str(x)\n        for y in range(1, 10**k):\n            str_y = str(y)\n            if str_y == str_x[-len(str_y):]:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(n, k):\n        if n == 1:\n            return k\n        return count_suffixes(n - 1, k) * (k + 1)\n    \n    total_count = count_suffixes(n, k)\n    result = total_count % m\n    \n    return result\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_numbers_with_suffix(n, k):\n        count = 0\n        for i in range(1, n + 1):\n            if i % k == 0:\n                count += 10 ** (n - i)\n        return count\n    \n    result = count_numbers_with_suffix(n, k) % m\n    return result\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "import sys\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        if len(x) != n:\n            continue\n        \n        y = int(x[-k:])\n        if y % k == 0:\n            count += 1\n    \n    print(count % m)\n\nif True:\n    solve()",
    "def main():\n    # Read input\n    n, k, m = map(int, input().split())\n    \n    # Calculate the result\n    result = calculate_result(n, k, m)\n    \n    # Print the result modulo m\n    print(result % m)\n\ndef calculate_result(n, k, m):\n    # Initialize the count\n    count = 0\n    \n    # Iterate over all possible values of x\n    for x in range(1, 10**n):\n        # Convert x to a string\n        x_str = str(x)\n        \n        # Check if the length of x_str is equal to n\n        if len(x_str) != n:\n            continue\n        \n        # Iterate over all possible values of y\n        for y in range(1, 10**k):\n            # Convert y to a string\n            y_str = str(y)\n            \n            # Check if y_str is a suffix of x_str\n            if y_str == x_str[-len(y_str):]:\n                # Increment the count\n                count += 1\n    \n    return count\n\nif True:\n    main()",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(n: int, k: int, m: int) -> int:\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1, mod)\n    return count % mod\n\nif True:\n    n, k, m = map(int, sys.stdin.read().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j % k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n: int, k: int, m: int) -> int:\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n, k, m = int(data[0]), int(data[1]), int(data[2])\n    result = solve(n, k, m)\n    print(result)\n\ndef solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    main()",
    "def solve(n,k,m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1,n+1):\n        if i % k == 0:\n            count += pow(10,i-1,mod)\n    return count % m\n\nif True:\n    n, k, m = map(int,input().split())\n    print(solve(n,k,m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        str_i = str(i)\n        for j in range(len(str_i)):\n            if int(str_i[j:]) % k == 0:\n                count += 1\n                break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes_with_remainder(n, k, m):\n        total_count = 0\n        for i in range(1, n + 1):\n            # Calculate the number of ways to choose i digits from n\n            ways_to_choose_digits = n - i + 1\n            \n            # Calculate the number of ways to form a suffix with remainder k\n            # This is equivalent to finding the number of ways to choose i digits from n\n            # and then choosing the last digit such that the sum of the chosen digits\n            # is congruent to k modulo m\n            ways_to_form_suffix = ways_to_choose_digits * pow(k, i - 1, m)\n            \n            # Add the number of ways to form a suffix with remainder k to the total count\n            total_count += ways_to_form_suffix\n    \n        return total_count % m\n    \n    return count_suffixes_with_remainder(n, k, m)\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k, m)\n\n# Print the result\nprint(result)",
    "import sys\nfrom math import pow\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1)\n    \n    return count % mod\n\nif True:\n    n, k, m = map(int, sys.stdin.read().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10 ** 9 + 7\n    count = 0\n    for i in range(1, n + 1):\n        if i % k == 0:\n            count += pow(10, i - 1, mod)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x, k):\n        return sum(1 for i in range(len(str(x))) if str(x)[-i:] == str(k))\n\n    total = 0\n    for x in range(1, 10**n):\n        total += count_suffixes(x, k)\n    \n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid(x):\n        s = str(x)\n        for i in range(len(s)):\n            if int(s[i:]) % k == 0:\n                return True\n        return False\n    \n    total = 0\n    for x in range(1, 10**n):\n        if count_valid(x):\n            total += 1\n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    \n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    \n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    \n    # Calculate the number of valid x values\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1)\n    \n    # Return the result modulo m\n    return count % mod\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k, m)\n\n# Print the result\nprint(result)",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k):\n        total_count = 0\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if j % k == 0:\n                    total_count += 1\n        return total_count\n    \n    result = count_valid_numbers(n, k)\n    return result % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if str(j).endswith(str(i)):\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = int(1e9 + 7)\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1, mod)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solution(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j+1)*k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solution(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            ans += pow(10, i-1, mod)\n    return ans % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "from typing import *\nfrom collections import *\n\ndef solve(n: int, k: int, m: int) -> int:\n    def count_valid_numbers(n: int, k: int) -> int:\n        # Calculate the total number of valid numbers with n digits\n        total_count = 0\n        \n        for i in range(1, n + 1):\n            # Calculate the number of ways to choose the last digit\n            last_digit_count = pow(k, i - 1)\n            \n            # Calculate the number of ways to choose the first i-1 digits\n            first_digits_count = pow(k, i - 2)\n            \n            # Add the product to the total count\n            total_count += last_digit_count * first_digits_count\n        \n        return total_count\n    \n    # Calculate the number of valid numbers with n digits\n    total_count = count_valid_numbers(n, k)\n    \n    # Return the remainder when divided by m\n    return total_count % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k, m)\n\n# Print the result\nprint(result)",
    "def main():\n    n, k, m = map(int, input().split())\n    \n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        if len(x) != n:\n            continue\n        \n        y = int(x[-k:])\n        if y % k == 0:\n            count += 1\n    \n    print(count % m)\n\nif True:\n    main()",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**(n-1)):\n        str_i = str(i)\n        for j in range(len(str_i), len(str_i)+n):\n            str_j = str_i[j:]\n            if int(str_j) % k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve():\n    import math\n    n, k, m = map(int, input().split())\n    count = 0\n    for i in range(1, 10**n):\n        s = str(i)\n        if len(s) == n:\n            for j in range(k):\n                if int(s[-j-1:]) % k == 0:\n                    count += 1\n                    break\n    print(count % m)\n\nif True:\n    solve()",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10 ** n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if str_i.endswith(str((j + 1) * k)):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    total = 0\n    \n    for i in range(1, n+1):\n        total += pow(k, i-1, mod)\n    \n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solution(n, k, m):\n    total = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j % k == 0:\n                total += 1\n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solution(n, k, m))",
    "def solve(n, k, m):\n    mod = 1\n    for i in range(1, n + 1):\n        mod = (mod * (i % k)) % m\n    return mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "from math import pow\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, n+1):\n        if pow(k, i-1, m) == 0:\n            count += 1\n    \n    return count % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def main():\n    import sys\n    \n    def solve(n, k, m):\n        count = 0\n        for i in range(1, 10**n):\n            str_i = str(i)\n            if len(str_i) == n:\n                for j in range(k):\n                    if str_i.endswith(str((j+1)*k)):\n                        count += 1\n                        break\n        return count % m\n    \n    n, k, m = map(int, sys.stdin.read().split())\n    print(solve(n, k, m))\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.1,
    0.1,
    0.025,
    0.1,
    0.1,
    0.0,
    0.075,
    0.0,
    0.1,
    0.0,
    0.025,
    0.05,
    0.0,
    0.0,
    0.05,
    0.1,
    0.0,
    0.0,
    0.0,
    0.075,
    0.1,
    0.0,
    0.0,
    0.1,
    0.0,
    0.025,
    0.075,
    0.1,
    0.0,
    0.0,
    0.0,
    0.075,
    0.1,
    0.025,
    0.1,
    0.0,
    0.1,
    0.05,
    0.0,
    0.1,
    0.0,
    0.0,
    0.025,
    0.1,
    0.025,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    3.24052357673645,
    16.10137367248535,
    29.40511155128479,
    42.652852296829224,
    56.072078704833984,
    67.79038500785828,
    71.13569164276123,
    74.37571406364441,
    77.46442890167236,
    81.27204751968384,
    97.02856492996216,
    99.88511824607849,
    112.52000546455383,
    115.46489834785461,
    127.84938669204712,
    131.57634234428406,
    135.09729981422424,
    147.96417021751404,
    160.65486598014832,
    163.67814207077026,
    166.537353515625,
    182.8926920890808,
    196.11648416519165,
    209.48482608795166,
    211.68754243850708,
    215.54169178009033,
    229.37169575691223,
    241.99639678001404,
    244.6751024723053,
    260.8554847240448,
    263.9169485569,
    266.5762720108032,
    269.41983103752136,
    282.4927279949188,
    295.37283086776733,
    308.4117124080658,
    311.4390449523926,
    314.02454233169556,
    319.2669589519501,
    322.2476472854614,
    334.60639929771423,
    341.0738275051117,
    343.4877858161926,
    356.158029794693,
    359.0770444869995,
    371.6740744113922,
    383.73208713531494,
    386.23796343803406,
    388.71527576446533,
    391.6194350719452,
    395.01933884620667
  ],
  "sample times": 51
}