{
  "prompt": "\nQUESTION:\nApart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^9) \u2014 current year in Berland.\n\n\n-----Output-----\n\nOutput amount of years from the current year to the next lucky one.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n201\n\nOutput\n99\n\nInput\n4000\n\nOutput\n1000\n\n\n\n-----Note-----\n\nIn the first example next lucky year is 5. In the second one \u2014 300. In the third \u2014 5000.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n):\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\n\ndef solve(n):\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\n\nif True:\n    n = int(sys.stdin.read())\n    print(solve(n))",
    "def main():\n    n = int(input())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    solve()",
    "def solve(n):\n    year = n + 1\n    while True:\n        if '0' not in str(year):\n            return year - n\n        year += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n + 1\n    while True:\n        if '0' not in str(i):\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def next_lucky_year(current_year):\n    while True:\n        current_year += 1\n        if '0' not in str(current_year):\n            return current_year - current_year % 1000\n\n# Read input\ncurrent_year = int(input())\n\n# Calculate and print the result\nprint(next_lucky_year(current_year))",
    "def solve(year):\n    while True:\n        year += 1\n        if '0' not in str(year):\n            return year - year\n\nif True:\n    year = int(input())\n    print(solve(year))",
    "def solve(n):\n    while True:\n        if '0' not in str(n):\n            return n - n % 10 + 1\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    \n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    \n    print(n - n)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    \n    def is_lucky(year):\n        return len(str(year)) <= 1\n    \n    while True:\n        if is_lucky(n):\n            break\n        n += 1\n    \n    print(n - n)\n\nif True:\n    main()",
    "import sys\nfrom typing import *\ndef solve(n: int) -> int:\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\nif True:\n    n = int(sys.stdin.read())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        n += 1\n        count = sum(1 for d in str(n) if d != '0')\n        if count <= 1:\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        n += 1\n        if len(str(n)) <= 1:\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    solve()",
    "def solve(n):\n    while True:\n        n += 1\n        num_str = str(n)\n        if '0' not in num_str and len(num_str) <= 1:\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    main()",
    "def solve(n):\n    while True:\n        n += 1\n        if all(int(digit) == 0 for digit in str(n)):\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    year = n\n    while True:\n        year += 1\n        if '0' not in str(year) and len(str(year)) <= 1:\n            return year - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    t = int(input())\n    while True:\n        t += 1\n        if '0' not in str(t):\n            break\n    print(t)\n\nif True:\n    main()",
    "def solve(n):\n    while True:\n        if '1' not in str(n):\n            return n - n % 10 + 1\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        n += 1\n        count = 0\n        for char in str(n):\n            if char != '0':\n                count += 1\n        if count <= 1:\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = 0\n    while True:\n        i += 1\n        num_str = str(n + i)\n        if '0' not in num_str:\n            return i\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        n += 1\n        num = str(n)\n        if '0' not in num and len(num) <= 1:\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    N = int(input())\n    while True:\n        N += 1\n        if '0' not in str(N):\n            break\n    print(N - N)\n\nif True:\n    solve()",
    "def next_lucky_year(year):\n    while True:\n        year += 1\n        if '0' not in str(year) and len(str(year)) <= 1:\n            return year\n\ndef main():\n    year = int(input())\n    print(next_lucky_year(year))\n\nif True:\n    main()",
    "import sys\n\ndef get_next_lucky_year(current_year):\n    while True:\n        current_year += 1\n        if '0' not in str(current_year):\n            return current_year\n\ndef main():\n    input = sys.stdin.read().strip()\n    current_year = int(input)\n    next_lucky_year = get_next_lucky_year(current_year)\n    print(next_lucky_year)\n\nif True:\n    main()",
    "def solve(n):\n    while True:\n        if len(str(n)) <= 1:\n            return n - n % 10 + 1\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "from typing import *\nimport sys\n\ndef solve(n: int) -> int:\n    while True:\n        n += 1\n        if '0' not in str(n):\n            return n - n % 1000\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' in s:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        if '0' not in str(i):\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        i += 1\n        s = str(i)\n        if len(s) == sum(1 for c in s if c != '0'):\n            return i - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        count = sum(1 for c in s if c != '0')\n        if count <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if sum(c != '0' for c in s) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if len(s) == sum(1 for c in s if c != '0'):\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' not in s and len(s) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n + 1\n    while True:\n        s = str(i)\n        if sum(c != '0' for c in s) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        if len(str(i)) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '1' not in s and len(s) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        cnt = sum(1 for c in s if c != '0')\n        if cnt <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        count = 0\n        for c in s:\n            if c != '0':\n                count += 1\n        if count <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n + 1\n    while True:\n        count = sum(1 for d in str(i) if d != '0')\n        if count <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if sum(int(d) for d in s) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' in s or len(s) > 1:\n            break\n        i += 1\n    return i - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' in s:\n            i += 1\n        else:\n            return i - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if len([c for c in s if c != '0']) <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' in s:\n            break\n        i += 1\n    return i - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if sum(1 for c in s if c != '0') <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if '0' in s and len(s) > 1:\n            i += 1\n        else:\n            return i - n\n\nif True:\n    n = int(input())\n    print(solve(n))"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8235294117647058,
    0.8235294117647058,
    0.0,
    0.0,
    0.9926470588235294,
    0.0,
    0.0,
    0.8235294117647058,
    0.8235294117647058,
    0.9926470588235294,
    0.25735294117647056,
    0.0,
    0.0,
    0.8235294117647058,
    0.0,
    0.8235294117647058,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.6666666666666666,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.014814814814814815,
    0.0,
    0.0,
    0.6666666666666666,
    0.0,
    0.0
  ],
  "time": [
    10.588011741638184,
    22.25071930885315,
    33.56785774230957,
    44.89253830909729,
    56.369752407073975,
    67.84248352050781,
    79.63404893875122,
    90.94986915588379,
    102.3000705242157,
    114.05465745925903,
    126.16387224197388,
    137.92838048934937,
    149.47693300247192,
    160.515198469162,
    171.90529608726501,
    183.29857420921326,
    194.68686175346375,
    205.85966753959656,
    217.39404296875,
    228.94282007217407,
    240.16717982292175,
    251.47089338302612,
    263.12223958969116,
    274.63844442367554,
    285.9266166687012,
    297.18013548851013,
    308.85189390182495,
    321.0535981655121,
    332.40205907821655,
    343.93479800224304,
    355.7021839618683,
    367.142639875412,
    368.7182264328003,
    380.2326376438141,
    391.74028515815735,
    403.0941889286041,
    414.48751735687256,
    425.7585210800171,
    437.2640030384064,
    448.46486949920654,
    459.7437057495117,
    471.2456247806549,
    482.90618538856506,
    494.4377632141113,
    505.72360920906067,
    516.9870991706848,
    518.4132409095764,
    529.7876596450806,
    540.8136529922485,
    542.5432212352753,
    553.8085603713989
  ],
  "sample times": 51
}