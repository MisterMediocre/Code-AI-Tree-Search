{
  "prompt": "\nQUESTION:\nPolycarp has to solve exactly $n$ problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in $k$ days. It means that Polycarp has exactly $k$ days for training!\n\nPolycarp doesn't want to procrastinate, so he wants to solve at least one problem during each of $k$ days. He also doesn't want to overwork, so if he solves $x$ problems during some day, he should solve no more than $2x$ problems during the next day. And, at last, he wants to improve his skill, so if he solves $x$ problems during some day, he should solve at least $x+1$ problem during the next day.\n\nMore formally: let $[a_1, a_2, \\dots, a_k]$ be the array of numbers of problems solved by Polycarp. The $i$-th element of this array is the number of problems Polycarp solves during the $i$-th day of his training. Then the following conditions must be satisfied:   sum of all $a_i$ for $i$ from $1$ to $k$ should be $n$;  $a_i$ should be greater than zero for each $i$ from $1$ to $k$;  the condition $a_i < a_{i + 1} \\le 2 a_i$ should be satisfied for each $i$ from $1$ to $k-1$. \n\nYour problem is to find any array $a$ of length $k$ satisfying the conditions above or say that it is impossible to do it.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 10^9, 1 \\le k \\le 10^5$) \u2014 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.\n\n\n-----Output-----\n\nIf it is impossible to find any array $a$ of length $k$ satisfying Polycarp's rules of training, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, then print $k$ integers $a_1, a_2, \\dots, a_k$ in the second line, where $a_i$ should be the number of problems Polycarp should solve during the $i$-th day. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n26 6\n\nOutput\nYES\n1 2 4 5 6 8 \n\nInput\n8 3\n\nOutput\nNO\n\nInput\n1 1\n\nOutput\nYES\n1 \n\nInput\n9 4\n\nOutput\nNO\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, (n // 2) + 1)\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "import sys\n\ndef solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1]) + 1\n        total += a[i]\n        \n        if total > n:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    k = int(input_data[1])\n    print(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to solve the problem\n    if (n - 1) % 3 != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems to solve on the first day\n    min_problems = (n - 1) // 3\n    \n    # Create the array of problems to solve\n    a = [min_problems] * k\n    \n    # Adjust the array to satisfy the conditions\n    for i in range(1, k):\n        a[i] = max(a[i - 1], min_problems + i)\n    \n    # Print the result\n    if sum(a) == n:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "```python\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data\n    \n    if n % 2 != 0:\n        print(\"NO\")\n        return\n    \n    if n > k * (k + 1) // 2:\n        print(\"NO\")\n        return\n    \n    if n == k * (k + 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * k // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 2) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 3) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 4) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 5) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 6) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 7) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 8) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 9) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 10) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 11) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 12) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 13) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 14) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 15) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 16) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 17) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 18) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 19) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 20) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 21) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 22) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 23) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 24) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 25) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 26) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 27) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 28) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 29) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 30) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 31) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 32) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 33) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 3",
    "def check_training(n, k):\n    if n % 2 != 0:\n        return False\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // k\n    \n    # Check if the minimum number of problems per day satisfies the constraints\n    if min_problems > 2 * min_problems:\n        return False\n    \n    # Generate the array of problems solved\n    problems = [min_problems] * k\n    \n    # Verify the constraints\n    for i in range(k - 1):\n        if problems[i] >= problems[i + 1] or problems[i] > 2 * problems[i + 1]:\n            return False\n    \n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data)\n    \n    if not check_training(n, k):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(*problems)\n\nif True:\n    main()",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    total = 0\n    \n    for i in range(k):\n        a[i] = min(2 * total + 1, n - total)\n        total += a[i]\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1] + 1, 2*a[i-1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data\n    \n    if n % 2 != 0:\n        print(\"NO\")\n        return\n    \n    if n > k * (k + 1) // 2:\n        print(\"NO\")\n        return\n    \n    if n == k * (k + 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * k // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 2) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 3) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 4) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 5) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 6) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 7) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 8) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 9) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 10) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 11) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 12) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 13) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 14) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 15) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 16) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 17) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 18) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 19) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 20) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 21) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 22) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 23) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 24) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 25) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 26) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 27) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 28) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 29) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 30) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 31) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 32) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 33) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 3",
    "def check_solution(n, k):\n    # Check if it's possible to solve the problem within k days\n    if n % (k + 1) != 0:\n        return False\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // (k + 1)\n    \n    # Check if the solution is feasible\n    for i in range(k):\n        if min_problems * (i + 1) > n:\n            return False\n    \n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    if not check_solution(n, k):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(k):\n            print(min_problems * (i + 1), end=\" \")\n\nif True:\n    main()",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    x = n // 3\n    a = [x] * k\n    \n    for i in range(k - 1):\n        a[i + 1] = min(2 * a[i], x + 1)\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - 1) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1] + 1, 2*a[i-1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 == 1:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1]) + 1\n    \n    if sum(a) != n:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % (k - 1) != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1])\n        total += a[i]\n        \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n % 2 != 0) or (n > 2 * k):\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n > k * (k + 1) // 2:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total + a[i] <= n:\n            total += a[i]\n            a[i] *= 2\n        else:\n            break\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % k != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // k\n    \n    # Check if it's possible to satisfy the conditions\n    if min_problems > 2 * min_problems:\n        return \"NO\"\n    \n    # Generate the array of problems solved\n    a = [min_problems] * k\n    \n    # Adjust the array to satisfy the conditions\n    for i in range(k - 1):\n        a[i + 1] = max(a[i], 2 * a[i])\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if k == 1:\n        return \"YES\\n1\" if n >= 1 else \"NO\"\n    \n    # Calculate the minimum number of problems needed on the first day\n    min_problems = (n - 1) // k\n    \n    # Check if it's possible to distribute the problems according to the given constraints\n    if min_problems > k or min_problems * 2 < n:\n        return \"NO\"\n    \n    # Generate the solution\n    solution = [min_problems] * k\n    remaining_problems = n - min_problems * k\n    \n    for i in range(1, k):\n        if remaining_problems <= 2 * solution[i - 1]:\n            break\n        solution[i] = min(remaining_problems, 2 * solution[i - 1])\n        remaining_problems -= solution[i]\n    \n    return \"YES\\n\" + \" \".join(map(str, solution))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n == 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = (n + k - 1) // k\n    \n    # Check if it's possible to satisfy the conditions\n    if min_problems > 2 * min_problems:\n        return \"NO\"\n    \n    # Generate the array of problems solved\n    a = [min_problems] * k\n    \n    # Adjust the array to meet the constraints\n    for i in range(k - 1):\n        a[i + 1] = max(a[i], min_problems + 1)\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(n: int, k: int) -> str:\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1]) + 1\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    result = solve(n, k)\n    print(result)",
    "```python\nimport sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data\n    \n    if n % 2 != 0:\n        print(\"NO\")\n        return\n    \n    if n > k * (k + 1) // 2:\n        print(\"NO\")\n        return\n    \n    if n == k * (k + 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * k // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 1) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 2) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 3) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 4) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 5) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 6) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 7) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 8) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 9) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 10) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 11) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 12) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 13) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 14) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 15) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 16) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 17) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 18) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 19) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 20) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 21) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 22) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 23) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 24) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 25) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 26) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 27) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 28) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 29) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 30) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 31) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 32) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 33) // 2:\n        print(\"YES\")\n        print(*range(1, k + 1))\n        return\n    \n    if n == k * (k - 34",
    "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    \n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    \n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, (n // 2) + 1)\n    \n    if sum(a) == n:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nif True:\n    solve()",
    "def solve(n, k):\n    if (n + k - 1) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1], 2*a[i-1]) + 1\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0 or n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if k > n // 2:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, (i + 1) * 2)\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n % 3 != 0) or (n // 3 > k):\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "import sys\n\ndef check_solution(n, k):\n    # Check if it's possible to solve the problem within k days\n    if n % (k + 1) != 0:\n        return False\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // (k + 1)\n    \n    # Check if the solution is feasible\n    for i in range(k):\n        if min_problems * (i + 1) > n:\n            return False\n    \n    return True\n\ndef main():\n    input_data = sys.stdin.read().split()\n    n, k = map(int, input_data[:2])\n    \n    if not check_solution(n, k):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(k):\n            print(min_problems * (i + 1), end=\" \")\n        print()\n\nif True:\n    main()",
    "def check_training_schedule(n, k):\n    # Check if it's possible to solve the problems within the given constraints\n    if (n % 2 == 0 and n <= k * 2) or (n % 2 != 0 and n <= k * 3):\n        return True\n    else:\n        return False\n\ndef solve_problem(n, k):\n    if not check_training_schedule(n, k):\n        print(\"NO\")\n        return\n    \n    # Calculate the minimum number of problems to solve on the first day\n    min_problems = n // 2\n    \n    # Calculate the maximum number of problems to solve on the last day\n    max_problems = n - min_problems\n    \n    # Generate the solution array\n    solution = [min_problems] * k\n    \n    # Adjust the solution array based on the constraints\n    for i in range(1, k):\n        if solution[i-1] < 2 * solution[i]:\n            solution[i] = 2 * solution[i]\n    \n    # Print the solution array\n    print(\"YES\")\n    print(*solution)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve_problem(n, k)",
    "def solve(n, k):\n    if (n + 1) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def check_training(n, k):\n    # Check if it's possible to solve the problems within the given constraints\n    if (n % 2 == 0 and n <= k * 2) or (n % 2 != 0 and n <= k * 3):\n        return True\n    else:\n        return False\n\ndef solve_problem(n, k):\n    if not check_training(n, k):\n        print(\"NO\")\n        return\n    \n    # Calculate the minimum number of problems to solve on the first day\n    min_problems = n // 2\n    \n    # Calculate the maximum number of problems to solve on the last day\n    max_problems = n - min_problems\n    \n    # Generate the sequence of problems to solve\n    sequence = [min_problems] + [max_problems] * (k - 1)\n    \n    # Print the solution\n    print(\"YES\")\n    print(*sequence)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve_problem(n, k)",
    "def solve(n, k):\n    if (n % 2 == 1) or (n > k * (k - 1)):\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n > k * 2:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total + a[i] <= n:\n            total += a[i]\n            a[i + 1] = max(a[i], 2 * a[i])\n        else:\n            break\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n > 2*k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1]+1, 2*a[i-1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0 or (n - k) % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1], 2*a[i-1]) + 1\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 == 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1]) + 1\n    \n    if sum(a) != n:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if n is less than k\n    if n < k:\n        return \"NO\"\n    \n    # Initialize the array with the minimum possible value\n    a = [1] * k\n    \n    # Calculate the remaining problems to solve\n    remaining = n - k\n    \n    # Distribute the remaining problems among the days\n    for i in range(1, k):\n        a[i] += a[i-1]\n        remaining -= a[i]\n        \n        # Check if the distribution is valid\n        if remaining < 0 or a[i] > 2 * a[i-1]:\n            return \"NO\"\n    \n    # Print the result\n    print(\"YES\")\n    print(*a)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if n % 2 == 1 or n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) != n:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = (n // 2) * 2\n    \n    # Check if we can satisfy the conditions with the calculated minimum\n    if min_problems >= k:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve(n, k):\n    if n % 3 != 0 or (n // 3) * 2 > k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\\n1\"\n    \n    # Calculate the minimum number of problems needed on the first day\n    min_problems = (n - 1) // 2\n    \n    # Check if it's possible to distribute the problems according to the given constraints\n    if min_problems > k:\n        return \"NO\"\n    \n    # Generate the solution\n    solution = [min_problems] * k\n    remaining_problems = n - min_problems\n    \n    for i in range(1, k):\n        if remaining_problems >= 2 * solution[i - 1]:\n            solution[i] = 2 * solution[i - 1]\n            remaining_problems -= 2 * solution[i - 1]\n        else:\n            solution[i] = remaining_problems\n            remaining_problems = 0\n    \n    return \"YES\\n\" + \" \".join(map(str, solution))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    mid = n // 2\n    \n    if mid % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)\nif result == \"YES\":\n    print(*list(range(1, k + 1)))",
    "def solve(n, k):\n    if n % 2 != 0 or n > k * (k + 1) // 2:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total + a[i] <= n:\n            total += a[i]\n            a[i] *= 2\n        else:\n            break\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "from typing import *\nimport sys\n\ndef solve(n: int, k: int) -> str:\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1]) + 1\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    result = solve(n, k)\n    print(result)",
    "def solve(n, k):\n    def check(a):\n        return sum(a) == n and all(1 <= x <= 2 * x for i, x in enumerate(a)) and all(x < y <= 2 * y for i, (x, y) in enumerate(zip(a, a[1:])))\n    \n    left = 1\n    right = n\n    \n    while left < right:\n        mid = (left + right + 1) // 2\n        if check([mid] * k):\n            left = mid\n        else:\n            right = mid - 1\n    \n    if not check([left] * k):\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, [left] * k))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    def check(a):\n        if sum(a) != n:\n            return False\n        for i in range(k - 1):\n            if a[i] >= a[i + 1] > 2 * a[i]:\n                return False\n        return True\n    \n    left = 1\n    right = n // 2\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if check([mid] * k):\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    if left > n // 2:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, [left] * k))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0 or k > n:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, (n - i) // 2)\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0 or n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    a = [n // 3] * k\n    \n    for i in range(k - 1):\n        a[i + 1] = min(a[i] + 1, 2 * a[i])\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    x = n // 3\n    a = [x] * k\n    for i in range(k - 1):\n        a[i + 1] = min(2 * a[i], x + 1)\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - k) % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i-1] + 1, 2*a[i-1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 == 0 and n <= k * (k - 1) // 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)\nif result == \"YES\":\n    # Generate the solution array\n    solution = [1] * k\n    for i in range(1, k):\n        solution[i] = solution[i - 1] + 1\n    print(\" \".join(map(str, solution)))"
  ],
  "rewards": [
    0.13043478260869565,
    0.13043478260869565,
    0.08695652173913043,
    0.0,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.08695652173913043,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.13043478260869565,
    0.043478260869565216,
    0.13043478260869565,
    0.0,
    0.043478260869565216,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.043478260869565216,
    0.08695652173913043,
    0.13043478260869565,
    0.043478260869565216,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.08695652173913043,
    0.08695652173913043,
    0.08695652173913043,
    0.08695652173913043,
    0.08695652173913043,
    0.13043478260869565,
    0.13043478260869565,
    0.08695652173913043,
    0.13043478260869565,
    0.13043478260869565,
    0.08695652173913043,
    0.08695652173913043,
    0.13043478260869565,
    0.08695652173913043
  ],
  "train rewards": [
    0.6956521739130435,
    0.6086956521739131,
    0.21739130434782608,
    0.0,
    0.6956521739130435,
    0.6521739130434783,
    0.7391304347826086,
    0.0,
    0.6086956521739131,
    0.6086956521739131,
    0.7391304347826086,
    0.6956521739130435,
    0.6521739130434783,
    0.6956521739130435,
    0.391304347826087,
    0.6956521739130435,
    0.7391304347826086,
    0.17391304347826086,
    0.6956521739130435,
    0.0,
    0.391304347826087,
    0.6956521739130435,
    0.6956521739130435,
    0.6956521739130435,
    0.7391304347826086,
    0.6086956521739131,
    0.2608695652173913,
    0.6956521739130435,
    0.2608695652173913,
    0.391304347826087,
    0.782608695652174,
    0.391304347826087,
    0.782608695652174,
    0.6956521739130435,
    0.782608695652174,
    0.043478260869565216,
    0.6956521739130435,
    0.391304347826087,
    0.6521739130434783,
    0.43478260869565216,
    0.4782608695652174,
    0.5652173913043478,
    0.6956521739130435,
    0.782608695652174,
    0.5652173913043478,
    0.6956521739130435,
    0.7391304347826086,
    0.6086956521739131,
    0.6086956521739131,
    0.7391304347826086,
    0.5217391304347826
  ],
  "time": [
    3.811033010482788,
    14.636724710464478,
    19.675589084625244,
    54.946391344070435,
    64.08040881156921,
    67.56048321723938,
    70.96784996986389,
    106.0121841430664,
    114.40313959121704,
    117.40491890907288,
    120.79224848747253,
    124.0575339794159,
    127.7013828754425,
    131.30287504196167,
    135.04571294784546,
    139.72271490097046,
    149.8578770160675,
    154.6261603832245,
    159.28385591506958,
    194.3642201423645,
    197.70006895065308,
    201.20989656448364,
    204.63392519950867,
    207.97859406471252,
    211.6233971118927,
    219.78373670578003,
    226.59086775779724,
    230.0452241897583,
    236.04367303848267,
    239.40301966667175,
    243.04127836227417,
    247.0912561416626,
    250.21153378486633,
    253.6129126548767,
    256.8197591304779,
    261.44722509384155,
    264.8554456233978,
    267.7277457714081,
    270.8489158153534,
    276.8373935222626,
    283.6077103614807,
    287.4301829338074,
    299.4352595806122,
    304.5045852661133,
    309.37269020080566,
    312.7773115634918,
    316.24292755126953,
    318.83328557014465,
    321.52606415748596,
    324.7784700393677,
    328.300892829895
  ],
  "sample times": 51
}