{
  "prompt": "\nQUESTION:\nAbsent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.\n\nTUTORIAL:\nThe answer is always less or equal to 98. We can go through numbers from 1 to 99 and find the first one which we cannot make using cubes.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = True\n        for i in range(1, x+1):\n            if not can_make_number(i):\n                found = False\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i + 1) % 6] != 9:\n                return False\n            elif num[i] == 9 and num[(i + 1) % 6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = True\n        for i in range(1, x + 1):\n            if not can_make_number(i):\n                found = False\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i + 1) % 6] != 9:\n                return False\n            elif num[i] == 9 and num[(i + 1) % 6] != 6:\n                return False\n        return True\n\n    for x in range(1, 100):\n        found = True\n        for i in range(1, x + 1):\n            if not can_make_number(i):\n                found = False\n                break\n        if found:\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, sys.stdin.readline().split())))\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = True\n        for i in range(1, x+1):\n            if not can_make_number(i):\n                found = False\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make_number(n):\n        used_digits = [False] * 10\n        for _ in range(6):\n            for d in str(data[_]):\n                if int(d) == 6 and used_digits[9]:\n                    return False\n                elif int(d) == 9 and used_digits[6]:\n                    return False\n                used_digits[int(d)] = True\n        \n        return all(used_digits)\n    \n    max_x = 0\n    for x in range(1, 100):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    \n    def can_make(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '6':\n                return False\n            if num_str[i] == '9':\n                return False\n            if num_str[i] not in digits[i]:\n                return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def check_cube(cube):\n    digits = [int(digit) for digit in cube]\n    return len(set(digits)) == 10\n\ndef solve(n):\n    cubes = []\n    for _ in range(n):\n        cube = input().strip()\n        cubes.append(cube)\n    \n    max_number = 0\n    for num in range(1, 100):\n        found = True\n        for i in range(6):\n            if not check_cube(cubes[i]):\n                found = False\n                break\n        if found:\n            max_number = num\n            break\n    \n    return max_number\n\nif True:\n    n = int(input())\n    result = solve(n)\n    print(result)",
    "def solve(n):\n    def can_make_number(num):\n        digits = [int(d) for d in str(num)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for i in range(n):\n                if digits[i] == 6:\n                    if digits[(i + 1) % n] != 9:\n                        return False\n                elif digits[i] == 9:\n                    if digits[(i + 1) % n] != 6:\n                        return False\n                else:\n                    if digits[i] in used_digits:\n                        return False\n                    used_digits.add(digits[i])\n        \n        return True\n    \n    for num in range(1, 100):\n        if not can_make_number(num):\n            return num - 1\n    \n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n*6+1, 6)]\n    \n    def can_make_number(num):\n        used_cubes = set()\n        for i in range(6):\n            if num % 10 == cubes[i][i]:\n                used_cubes.add(i)\n        return len(used_cubes) == 6\n    \n    max_x = 0\n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 10)):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i + 1) % 6] != 9:\n                return False\n            elif num[i] == 9 and num[(i + 1) % 6] != 6:\n                return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if all(can_make(x * i) for i in range(1, 10)):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "```python\ndef solve():\n    def can_make_number(n):\n        digits = [str(i) for i in range(10)]\n        for i in range(1, n + 1):\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):\n                return False\n            if '9' in str(i) and '9' in str(i):\n                return False\n            if '6' in str(i) and '9' in str(i):\n                return False\n            if '9' in str(i) and '6' in str(i):\n                return False\n            if '6' in str(i) and '6' in str(i):",
    "def solve(n):\n    def is_valid(x):\n        digits = [int(d) for d in str(x)]\n        used_digits = set()\n        for _ in range(6):\n            for _ in range(6):\n                if digits[_] == 6 and digits[(_ + 1) % 6] == 9:\n                    return False\n                if digits[_] == 9 and digits[(_ + 1) % 6] == 6:\n                    return False\n                if digits[_] in used_digits:\n                    return False\n                used_digits.add(digits[_])\n        return True\n\n    for x in range(1, 100):\n        if is_valid(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [0] * 10\n    for _ in range(n):\n        for i in range(6):\n            digits[int(input().split()[i])] += 1\n    \n    def can_make(x):\n        for i in range(1, x + 1):\n            if bin(i).count('1') > sum(digits[i % 10]):\n                return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    data = sys.stdin.read().splitlines()\n    n = int(data[0])\n    cubes = [list(map(int, data[i+1].split())) for i in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num % 10 == cubes[i][i]:\n                return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if all(can_make_number(x) for _ in range(n)):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, data[_ + 1])))\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i + 1) % 6] != 9:\n                return False\n            elif num[i] == 9 and num[(i + 1) % 6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = True\n        for i in range(1, x + 1):\n            num_str = str(i)\n            if not can_make_number([cubes[j][i - 1] for j in range(n)]):\n                found = False\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    def can_make(num):\n        digits = [int(d) for d in str(num)]\n        for i in range(6):\n            for j in range(6):\n                if digits[i] == 6 and digits[j] == 9 or digits[i] == 9 and digits[j] == 6:\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [str(i) for i in range(10)]\n    cubes = []\n    \n    for _ in range(n):\n        cube = list(map(int, input().split()))\n        cubes.append(cube)\n    \n    def can_make_number(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '6' and '9' in num_str:\n                return False\n            if num_str[i] == '9' and '6' in num_str:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 7)):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    \n    def get_number(cubes):\n        num = 0\n        for i in range(6):\n            num = num * 10 + cubes[i]\n        return num\n    \n    def can_make(num, cubes):\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in cubes:\n                return False\n            elif digit == 9 and 6 in cubes:\n                return False\n            num //= 10\n        return True\n    \n    n = int(input().strip())\n    cubes = [list(map(int, input().strip().split())) for _ in range(n)]\n    \n    for x in range(1, 100):\n        found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        for m in range(l+1, n):\n                            for n in range(m+1, n):\n                                cubes_copy = cubes[:]\n                                cubes_copy[i] = cubes[i][::-1]\n                                cubes_copy[j] = cubes[j][::-1]\n                                cubes_copy[k] = cubes[k][::-1]\n                                cubes_copy[l] = cubes[l][::-1]\n                                cubes_copy[m] = cubes[m][::-1]\n                                cubes_copy[n] = cubes[n][::-1]\n                                if can_make(x, cubes_copy):\n                                    found = True\n                                    break\n                            if found:\n                                break\n                        if found:\n                            break\n                    if found:\n                        break\n                if found:\n                    break\n            if found:\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    def can_make(x):\n        digits = [int(d) for d in str(x)]\n        used = [False] * 10\n        for i in range(6):\n            for d in digits[i]:\n                if used[d]:\n                    return False\n                used[d] = True\n        return True\n    \n    for x in range(1, 100):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "from typing import List\n\ndef solve(n: int, cubes: List[List[int]]) -> int:\n    def can_make_number(num: int) -> bool:\n        digits = [int(digit) for digit in str(num)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for face in range(6):\n                if cubes[_][face] == 6:\n                    if num % 10 != 9:\n                        return False\n                elif cubes[_][face] == 9:\n                    if num % 10 != 6:\n                        return False\n                else:\n                    if cubes[_][face] in used_digits:\n                        return False\n                    used_digits.add(cubes[_][face])\n        \n        return True\n    \n    for x in range(1, 100):\n        if not can_make_number(x):\n            return x - 1\n    \n    return 0\n\nif True:\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    print(solve(n, cubes))",
    "def solve(n):\n    digits = {str(i): i for i in range(10)}\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '6' and '9' in num_str:\n                return False\n            if num_str[i] == '9' and '6' in num_str:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make(x * i) for i in range(1, 7)):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i + 1) % 6] != 9:\n                return False\n            elif num[i] == 9 and num[(i + 1) % 6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 7)):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n\n    def get_max_number(n):\n        max_num = 0\n        for _ in range(n):\n            digits = list(map(int, sys.stdin.readline().split()))\n            max_num = max(max_num, int(''.join(str(digit) for digit in digits)))\n        return max_num\n\n    n = int(sys.stdin.readline())\n    max_num = get_max_number(n)\n    if max_num == 0:\n        print(0)\n    else:\n        print(max_num - 1)\n\nif True:\n    solve()",
    "def solve(n):\n    def can_make_number(x):\n        digits = [int(d) for d in str(x)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for i in range(n):\n                face = [digits[(i + j) % 6] for j in range(6)]\n                if face == sorted(face):\n                    used_digits.update(face)\n                    break\n        \n        return len(used_digits) == 10\n    \n    for x in range(99, 0, -1):\n        if can_make_number(x):\n            return x\n    \n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n+1)]\n    \n    def can_make_number(num):\n        for i in range(n):\n            for j in range(6):\n                if num[j] == '6' and cubes[i][j] != '9':\n                    return False\n                elif num[j] == '9' and cubes[i][j] != '6':\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make_number(str(x)):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    def can_form_number(num):\n        digits = [int(d) for d in str(num)]\n        for i in range(6):\n            for j in range(6):\n                if digits[i] == digits[j]:\n                    return False\n        return True\n\n    max_num = 0\n    for num in range(1, 100):\n        if can_form_number(num):\n            max_num = num\n    return max_num\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    \n    def get_max_number(n):\n        max_num = 0\n        for _ in range(n):\n            digits = list(map(int, sys.stdin.readline().split()))\n            max_num = max(max_num, int(''.join(str(digit) for digit in digits)))\n        return max_num\n    \n    n = int(sys.stdin.readline())\n    max_num = get_max_number(n)\n    \n    if max_num == 0:\n        print(0)\n    else:\n        print(max_num)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    cubes = []\n    for _ in range(n):\n        cube = [int(digit) for digit in input().split()]\n        cubes.append(cube)\n    \n    def can_make_number(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '0' and i != 0:\n                return False\n            if num_str[i] == '6':\n                if num_str[i-1] == '9':\n                    continue\n                elif num_str[i-1] == '0':\n                    return False\n            if num_str[i] == '9':\n                if num_str[i-1] == '6':\n                    continue\n                elif num_str[i-1] == '0':\n                    return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 7)):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    def is_valid(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6' and digits[(i+1)%6] != '9':\n                return False\n            elif digits[i] == '9' and digits[(i+1)%6] != '6':\n                return False\n        return True\n\n    max_num = 0\n    for num in range(1, 100):\n        if is_valid(num):\n            max_num = num\n    return max_num\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(sys.stdin.readline())\n    cubes = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits:\n                return False\n            elif digit == 9 and 6 in used_digits:\n                return False\n            if digit in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, n + 1)):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, sys.stdin.readline().split())))\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = True\n        for i in range(1, x+1):\n            if not can_make_number(i):\n                found = False\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n\n    def can_make_number(n):\n        used_digits = [False] * 10\n        for _ in range(6):\n            for d in str(data[_]):\n                if int(d) == 6 and used_digits[9]:\n                    return False\n                elif int(d) == 9 and used_digits[6]:\n                    return False\n                used_digits[int(d)] = True\n        return True\n\n    max_x = 0\n    for x in range(1, 100):\n        if can_make_number(x):\n            max_x = x\n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def check(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in str(data[i]):\n                if int(d) == 6 and used[9]:\n                    return False\n                elif int(d) == 9 and used[6]:\n                    return False\n                used[int(d)] = True\n        \n        for i in range(1, x + 1):\n            found = False\n            for j in range(6):\n                for d in str(i):\n                    if used[int(d)]:\n                        found = True\n                        break\n                if found:\n                    break\n            if not found:\n                return False\n        \n        return True\n    \n    for x in range(99, -1, -1):\n        if check(x):\n            print(x)\n            return\n    \n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    def is_possible(x):\n        digits = [str(i) for i in range(10)]\n        used_digits = set()\n        \n        for _ in range(n):\n            cube = []\n            for _ in range(6):\n                cube.append(int(input()))\n            \n            for d in digits:\n                if d in cube:\n                    used_digits.add(d)\n                    break\n        \n        return len(used_digits) == 10\n    \n    for x in range(1, 100):\n        if is_possible(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    def read_input():\n        return list(map(int, sys.stdin.read().split()))\n\n    def check_number(x):\n        digits = [str(i) for i in range(10)]\n        used_digits = set()\n        for _ in range(6):\n            for d in str(x):\n                if d in digits and d not in used_digits:\n                    used_digits.add(d)\n                else:\n                    return False\n        return True\n\n    n = read_input()[0]\n    cubes = []\n    for _ in range(n):\n        cubes.append(read_input())\n\n    max_x = 0\n    for x in range(1, 100):\n        if check_number(x):\n            max_x = x\n            break\n\n    print(max_x)\n\nif True:\n    solve()",
    "from collections import defaultdict\n\ndef solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits:\n                return False\n            elif digit == 9 and 6 in used_digits:\n                return False\n            if digit in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        return True\n\n    max_x = 0\n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 7)):\n            max_x = x\n            break\n\n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n+1)]\n    \n    def can_make_number(num):\n        for i in range(n):\n            for j in range(6):\n                if num[j] == '6' and cubes[i][j] != '9':\n                    return False\n                elif num[j] == '9' and cubes[i][j] != '6':\n                    return False\n        return True\n    \n    max_x = 0\n    for x in range(1, 100):\n        found = False\n        for i in range(n):\n            for j in range(6):\n                if str(x)[j] == '6' and cubes[i][j] != '9':\n                    found = True\n                    break\n                elif str(x)[j] == '9' and cubes[i][j] != '6':\n                    found = True\n                    break\n            if found:\n                break\n        else:\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n\n    def get_number(cubes):\n        num = 0\n        for i in range(6):\n            num = num * 10 + cubes[i]\n        return num\n\n    def can_make(num, cubes):\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in cubes:\n                return False\n            elif digit == 9 and 6 in cubes:\n                return False\n            num //= 10\n        return True\n\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n\n    for x in range(1, 100):\n        found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        for m in range(l+1, n):\n                            for n in range(m+1, n):\n                                cubes_copy = cubes[:]\n                                cubes_copy[i] = cubes[j]\n                                cubes_copy[j] = cubes[k]\n                                cubes_copy[k] = cubes[l]\n                                cubes_copy[l] = cubes[m]\n                                cubes_copy[m] = cubes[n]\n                                cubes_copy[n] = cubes[i]\n                                num = get_number(cubes_copy)\n                                if can_make(num, cubes_copy):\n                                    found = True\n                                    break\n                            if found:\n                                break\n                        if found:\n                            break\n                    if found:\n                        break\n                if found:\n                    break\n            if found:\n                break\n        if found:\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    def can_make_number(number):\n        digits = [int(digit) for digit in str(number)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for face in range(6):\n                digit = digits[face]\n                if digit == 6 and 9 in used_digits:\n                    return False\n                elif digit == 9 and 6 in used_digits:\n                    return False\n                if digit in used_digits:\n                    continue\n                used_digits.add(digit)\n                \n        return True\n    \n    max_number = 0\n    for number in range(1, 100):\n        if can_make_number(number):\n            max_number = number\n            \n    return max_number\n\nif True:\n    n = int(input())\n    result = solve(n)\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def is_valid(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in str(x):\n                if int(d) == 6 and used[9]:\n                    return False\n                elif int(d) == 9 and used[6]:\n                    return False\n                if used[int(d)]:\n                    return False\n                used[int(d)] = True\n        \n        return True\n    \n    for x in range(1, 99):\n        if is_valid(x):\n            print(x)\n            return\n    \n    print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int,input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0,n*6,6)]\n    \n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits or digit == 9 and 6 in used_digits:\n                return False\n            if digit in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        return True\n    \n    max_x = 0\n    for x in range(1,100):\n        if all(can_make_number(x*i) for i in range(1,10)):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "from typing import *\nimport sys\n\ndef solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6 and num[(i+1)%6] != 9:\n                return False\n            elif num[i] == 9 and num[(i+1)%6] != 6:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 7)):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = [set() for _ in range(10)]\n    for _ in range(n):\n        for i in range(6):\n            digits[int(input().split()[i])].add(i)\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(1, x + 1):\n            if i == 0:\n                continue\n            found = False\n            for d in str(i):\n                if not used[int(d)]:\n                    found = True\n                    break\n            if not found:\n                return False\n            used[int(d)] = True\n        \n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    \n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    # Check if it's possible to form numbers from 1 to 99\n    def can_form_numbers(n):\n        for num in range(1, n + 1):\n            digits = str(num)\n            if len(digits) > 6:\n                return False\n            for i in range(6):\n                if digits[i] == '6' and digits[(i + 1) % 6] != '9':\n                    return False\n                if digits[i] == '9' and digits[(i + 1) % 6] != '6':\n                    return False\n        return True\n    \n    # Find the largest number that can be formed\n    for x in range(99, 0, -1):\n        if can_form_numbers(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make(x):\n        for i in range(1, x + 1):\n            num_str = str(i)\n            for j in range(6):\n                if num_str[j] == '6' and num_str[(j + 1) % 6] != '9':\n                    return False\n                elif num_str[j] == '9' and num_str[(j + 1) % 6] != '6':\n                    return False\n            for k in range(6):\n                if num_str[k] == '0':\n                    return False\n        return True\n    \n    for i in range(1, 99):\n        if can_make(i):\n            print(i)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(6)]\n    for _ in range(n):\n        for i in range(6):\n            digits[i].discard(int(input().split()[i]))\n    \n    def can_make(x):\n        for i in range(6):\n            if x % 10 not in digits[i]:\n                return False\n            x //= 10\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6' and digits[(i+1)%6] != '9':\n                return False\n            elif digits[i] == '9' and digits[(i+1)%6] != '6':\n                return False\n        return True\n    \n    max_number = 0\n    for num in range(1, 100):\n        if can_make_number(num):\n            max_number = num\n    \n    print(max_number)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make(n):\n        for i in range(1, n + 1):\n            if not can_form(i):\n                return False\n        return True\n    \n    def can_form(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '6':\n                if '9' not in num_str[i+1:]:\n                    return False\n            elif num_str[i] == '9':\n                if '6' not in num_str[i+1:]:\n                    return False\n        return True\n    \n    for n in range(1, 100):\n        if can_make(n):\n            print(n)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def check_number(n):\n    digits = [str(i) for i in range(10)]\n    for num in range(1, 100):\n        used_digits = set()\n        for _ in range(n):\n            for face in range(6):\n                if num % 10 == digits[face]:\n                    used_digits.add(face)\n                    break\n            else:\n                return False\n        if len(used_digits) != 6:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    max_x = 0\n    for num in range(1, 100):\n        if check_number(n):\n            max_x = num\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "import sys\nfrom typing import List\n\ndef solve(n: int, cubes: List[List[int]]) -> int:\n    def can_make_number(num: int) -> bool:\n        digits = [int(digit) for digit in str(num)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for face in range(6):\n                if cubes[_][face] == 6:\n                    if num % 10 != 9:\n                        return False\n                elif cubes[_][face] == 9:\n                    if num % 10 != 6:\n                        return False\n                else:\n                    if cubes[_][face] not in used_digits:\n                        used_digits.add(cubes[_][face])\n                    else:\n                        return False\n        \n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make_number(x):\n            return x\n    \n    return 0\n\nif True:\n    input_data = sys.stdin.read().splitlines()\n    n = int(input_data[0])\n    cubes = [[int(digit) for digit in line.split()] for line in input_data[1:n+1]]\n    result = solve(n, cubes)\n    print(result)",
    "def check_number(x):\n    digits = [str(i) for i in range(10)]\n    for i in range(1, x + 1):\n        num_str = str(i)\n        for j in range(len(num_str)):\n            if num_str[j] == '6':\n                if '9' in num_str:\n                    return False\n            elif num_str[j] == '9':\n                if '6' in num_str:\n                    return False\n        for k in range(6):\n            for l in range(k + 1, 6):\n                if num_str[k] == num_str[l]:\n                    return False\n    return True\n\ndef solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    max_x = 0\n    for i in range(1, 100):\n        if check_number(i):\n            max_x = i\n    \n    print(max_x)\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0625,
    0.0,
    0.0,
    0.041666666666666664,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0625,
    0.0,
    0.0625,
    0.0,
    0.041666666666666664,
    0.08333333333333333,
    0.0,
    0.041666666666666664,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0625,
    0.041666666666666664,
    0.041666666666666664,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.2708333333333333,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.16666666666666666,
    0.0,
    0.0,
    0.2708333333333333,
    0.16666666666666666,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.16666666666666666,
    0.0,
    0.16666666666666666,
    0.0,
    0.08333333333333333,
    0.2708333333333333,
    0.0,
    0.2708333333333333,
    0.16666666666666666,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.16666666666666666,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.16666666666666666,
    0.2708333333333333,
    0.16666666666666666,
    0.0
  ],
  "time": [
    4.429730653762817,
    9.162031173706055,
    14.13965392112732,
    18.6432945728302,
    22.694187879562378,
    26.23202633857727,
    30.000970602035522,
    34.4895875453949,
    38.85095763206482,
    44.38932418823242,
    79.26331996917725,
    83.4497721195221,
    86.860759973526,
    90.15313720703125,
    95.3122227191925,
    98.43352746963501,
    102.7814576625824,
    111.59035229682922,
    114.66979146003723,
    120.55773091316223,
    125.12897253036499,
    128.88065242767334,
    131.89330315589905,
    135.44520664215088,
    139.2914445400238,
    142.15759444236755,
    145.10357284545898,
    151.2929723262787,
    154.6375343799591,
    159.55052709579468,
    163.98626065254211,
    167.47190189361572,
    174.8045048713684,
    178.25824069976807,
    182.36706948280334,
    187.26605868339539,
    193.06598472595215,
    201.63905239105225,
    205.85017919540405,
    209.184344291687,
    213.8083040714264,
    217.7903664112091,
    222.26413798332214,
    226.8931155204773,
    230.9341766834259,
    234.1522479057312,
    237.31902146339417,
    241.26330089569092,
    245.8426480293274,
    257.48119592666626,
    262.74008440971375
  ],
  "sample times": 51
}