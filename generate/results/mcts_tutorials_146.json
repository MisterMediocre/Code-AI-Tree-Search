{
  "prompt": "\nQUESTION:\nThis morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.\n\nHe decided to accomplish this by closing every $k$-th ($2 \\leq k \\leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \\cdot k$ that satisfy the following condition: $1 \\leq c \\leq n$ and $i$ is an integer (it may be positive, negative or zero).\n\nFor example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.\n\nAfter closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq k < n \\leq 100$) \u2014 the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n\n\n-----Examples-----\nInput\n4 2\n1 1 -1 1\n\nOutput\n2\n\nInput\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.\n\nIn the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.\n\nTUTORIAL:\nThe constraints in this task allowed us to simply iterate over the closed tab and check the answer, but we can solve it more quickly \u2014 calculate the sum for each value modulo k and count the total sum for the whole array. After that, you just need to go through the module tab numbers that we delete, and update the answer.\n\nComplexity \u2014 O(n\u00b2) or O(n + k).\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab_info[i] % k for i in range(n))\n    \n    # Calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(1, k):\n        diff = abs((remainders_sum + i * k) % k)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab_info[i] % k for i in range(n))\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(remainders_sum)\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    # Calculate the sum of each value modulo k\n    mod_sum = [sum((i % k) * (-1)**(i % 2) for i in range(n)) % k for _ in range(k)]\n    \n    # Initialize the answer\n    max_diff = 0\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(k):\n        # Update the answer\n        max_diff = max(max_diff, abs(mod_sum[i] - (mod_sum[(i + 1) % k] + mod_sum[(i + 2) % k])))\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntab_info = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i] - (mod_sums[(i+1)%k] + mod_sums[(i+2)%k]))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    tab_info = list(map(int, sys.stdin.readline().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab_info[i] % k for i in range(n))\n    \n    # Calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(1, k):\n        diff = abs((remainders_sum + i * k) % k)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def max_difference(n, k, tabs):\n    # Calculate the sum of each value modulo k\n    mod_sum = [sum(tabs[i] % k for i in range(n)) for _ in range(k)]\n    \n    # Initialize the answer\n    ans = float('-inf')\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(k):\n        # Update the answer\n        ans = max(ans, abs(mod_sum[i]))\n    \n    return ans\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Print the output\nprint(max_difference(n, k, tabs))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i] - (mod_sums[(i+1)%k] + mod_sums[(i+2)%k]))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    main()",
    "from typing import List\n\ndef solve(n: int, k: int, tabs: List[int]) -> int:\n    e, s = 0, 0\n    mod_sum = [0] * k\n    \n    for tab in tabs:\n        mod_sum[tab % k] += tab\n    \n    for i in range(k):\n        if mod_sum[i] > 0:\n            e += mod_sum[i]\n        else:\n            s -= mod_sum[i]\n    \n    return abs(e - s)\n\n# Example usage:\nif True:\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    result = solve(n, k, tabs)\n    print(result)",
    "def solve(n, k, arr):\n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = mod_sum[(n - i) % k]\n        max_diff = max(max_diff, abs(e - s))\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, arr))",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for tab in tabs:\n        if tab == 1:\n            e_sum += tab\n        else:\n            s_sum += tab\n    \n    max_diff = abs(e_sum - s_sum)\n    \n    for i in range(1, k):\n        new_e_sum = e_sum - tabs[i] + tabs[(i + k) % n]\n        new_s_sum = s_sum - tabs[i] + tabs[(i + k) % n]\n        \n        max_diff = max(max_diff, abs(new_e_sum - new_s_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - mod_sum[(i + 1) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_types[i:] % k) for i in range(n)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(1, k):\n        diff = abs(mod_sums[i] - mod_sums[0])\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    # Read input\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tab_info[i - 1]) % k\n    \n    # Initialize variables to store the counts of test and social network tabs\n    e_count = 0\n    s_count = 0\n    \n    # Iterate over the possible starting points for deleting tabs\n    for start in range(1, n + 1):\n        # Calculate the sum of remaining tabs after deleting the current starting point\n        remaining_sum = (prefix_sums[n] - prefix_sums[start - 1]) % k\n        \n        # Update the counts of test and social network tabs based on the remaining sum\n        if remaining_sum == 0:\n            e_count += 1\n        else:\n            s_count += 1\n    \n    # Print the maximum absolute difference between the counts of test and social network tabs\n    print(abs(e_count - s_count))\n\n# Call the solve function to execute the solution\nsolve()",
    "def solve():\n    import sys\n\n    def read_input():\n        return map(int, sys.stdin.read().split())\n\n    def main():\n        n, k = read_input()\n        tab_info = list(read_input())\n        e, s = 0, 0\n        for i in range(1, n + 1):\n            if tab_info[i - 1] == 1:\n                e += 1\n            else:\n                s += 1\n        mod_k = [sum(tab_info[j:j+k]) % k for j in range(n)]\n        max_diff = 0\n        for i in range(k):\n            diff = abs(e - s)\n            if diff > max_diff:\n                max_diff = diff\n        print(max_diff)\n\n    if True:\n        main()",
    "def solve(n, k):\n    tab_info = [int(input()) for _ in range(n)]\n    tab_sum = sum(tab_info)\n    \n    # Calculate the sum modulo k for each tab\n    mod_sums = [tab_sum % k] * n\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(1, k):\n        diff = abs(mod_sums[i] - mod_sums[k-i])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntab_info = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sum = [sum(arr[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - (mod_sum[(i+1)%k] if i != k-1 else 0))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    data = sys.stdin.read().split()\n    n, k = int(data[0]), int(data[1])\n    tab_info = list(map(int, data[2:]))\n\n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i] % k for i in range(n)) for _ in range(k)]\n\n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i] - (mod_sums[(i + 1) % k] + mod_sums[(i + 2) % k]))\n        max_diff = max(max_diff, diff)\n\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    e, s = 0, 0\n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    for i in range(k):\n        if mod_sum[i] > 0:\n            e += mod_sum[i]\n        else:\n            s -= mod_sum[i]\n    max_diff = abs(e - s)\n    return max_diff\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    tab_info = list(map(int, data[2:]))\n\n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i] % k for i in range(n)) for _ in range(k)]\n\n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i] - (mod_sums[(i + 1) % k] + mod_sums[(i + 2) % k]))\n        max_diff = max(max_diff, diff)\n\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for num in arr:\n        if num == 1:\n            e_sum += num\n        else:\n            s_sum += num\n    \n    mod_k = [0] * k\n    for num in arr:\n        mod_k[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_k[i] - (mod_k[(i + k) % k]))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    info = [1] * n\n    for i in range(1, n):\n        info[i] += info[i - 1]\n    \n    mod_info = [info[i % k] for i in range(n)]\n    max_diff = 0\n    \n    for i in range(k):\n        diff = abs(sum(mod_info[:i]) - sum(mod_info[i:]))\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ninfo = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k))",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tabs[i] % k for i in range(n)) for _ in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i])\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    \n    def read_int():\n        return int(input().strip())\n    \n    def read_ints():\n        return list(map(int, input().split()))\n    \n    def read_str():\n        return input().strip()\n    \n    def read_strs():\n        return list(map(str, input().split()))\n    \n    n, k = read_ints()\n    tabs = read_ints()\n    \n    e = 0\n    s = 0\n    \n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    mod = k\n    ans = abs(e - s)\n    \n    for i in range(mod):\n        if tabs[(i * k) % n] == 1:\n            e -= 1\n        else:\n            s -= 1\n    \n    ans = max(ans, abs(e - s))\n    \n    print(ans)\n\nif True:\n    solve()",
    "def main():\n    # Read input\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tab_info[i - 1]) % k\n    \n    # Initialize variables to store the counts of test and social network tabs\n    e_count = 0\n    s_count = 0\n    \n    # Iterate over the possible starting points for deleting tabs\n    for start in range(1, n + 1):\n        # Calculate the sum of remaining tabs after deleting the current starting point\n        remaining_sum = (prefix_sums[n] - prefix_sums[start - 1]) % k\n        \n        # Update the counts of test and social network tabs based on the remaining sum\n        if remaining_sum == 0:\n            e_count += 1\n        else:\n            s_count += 1\n    \n    # Print the maximum absolute difference between the counts of test and social network tabs\n    print(max(e_count - s_count, s_count - e_count))\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    e, s = 0, 0\n    for tab in tabs:\n        if tab == 1:\n            e += 1\n        else:\n            s += 1\n    mod_sum = [0] * k\n    for tab in tabs:\n        mod_sum[tab % k] += 1\n    max_diff = 0\n    for i in range(k):\n        max_diff = max(max_diff, abs(mod_sum[i] - mod_sum[(k - i) % k]))\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_arr = [sum(arr[i::k]) % k for i in range(k)]\n    max_diff = 0\n    \n    for i in range(k):\n        mod_arr[i] = abs(mod_arr[i])\n        max_diff = max(max_diff, mod_arr[i])\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sums = [0] * k\n    for num in arr:\n        mod_sums[num % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sums[i]\n        s = mod_sums[(n - i) % k]\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + arr[i - 1]) % k\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(prefix_sums[k] - prefix_sums[i])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = mod_sum[(n - i) % k]\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [sum(arr[i::k]) % k for i in range(k)]\n    max_diff = 0\n    \n    for i in range(k):\n        mod_sum[i] += mod_sum[(i + 1) % k]\n        max_diff = max(max_diff, abs(mod_sum[i]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = [int(x) for x in input().split()]\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for tab in tabs:\n        if tab == 1:\n            e_sum += tab\n        else:\n            s_sum += tab\n    \n    max_diff = abs(e_sum - s_sum)\n    \n    for i in range(1, n):\n        if (i * k) % n == 0:\n            if tabs[i - 1] == 1:\n                e_sum -= 1\n            else:\n                s_sum -= 1\n    \n    max_diff = max(max_diff, abs(e_sum - s_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k, tabs):\n    e = s = 0\n    mod = [0] * k\n    for tab in tabs:\n        e += tab\n        s -= tab\n        mod[tab % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(e - s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tabs))",
    "def solve(n, k, tab_info):\n    # Calculate the sum of each value modulo k\n    mod_sum = [sum(tab_info[i:i+k]) % k for i in range(0, n-k+1)]\n    \n    # Initialize variables to store the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(k):\n        # Update the maximum absolute difference\n        max_diff = max(max_diff, abs(mod_sum[i] - mod_sum[(n-i)%k]))\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntab_info = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k, tab_info)\n\n# Print the result\nprint(result)",
    "def solve(n, k):\n    # Initialize arrays to store the sum of elements modulo k\n    mod_sum = [0] * (n + 1)\n    \n    # Calculate the sum of elements modulo k for each element in the array\n    for i in range(1, n + 1):\n        mod_sum[i] = (mod_sum[i - 1] + arr[i - 1]) % k\n    \n    # Initialize variables to keep track of the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate over the possible values of b (the number of tabs to close)\n    for b in range(1, n):\n        # Calculate the sum of elements modulo k after closing the tabs with number b\n        new_mod_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            new_mod_sum[i] = (new_mod_sum[i - 1] + mod_sum[i - b]) % k\n        \n        # Update the maximum absolute difference\n        max_diff = max(max_diff, abs(new_mod_sum[n] - new_mod_sum[0]))\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "from typing import *\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab_info[i] % k for i in range(n))\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(remainders_sum)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    \n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sums[i] - (mod_sums[(i+1)%k] + mod_sums[(i+2)%k]))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * (k + 1)\n    for num in arr:\n        mod_sum[num % k] += 1\n    \n    max_diff = 0\n    for i in range(1, k):\n        diff = abs(mod_sum[i] - mod_sum[k - i])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def max_diff(n, k, arr):\n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += 1\n    \n    e = sum(mod_sum[i] for i in range(k))\n    s = sum(mod_sum[i] for i in range(1, k))\n    \n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\n# Print output\nprint(max_diff(n, k, arr))",
    "def solve(n, k):\n    # Read the input\n    info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders = [info[i] % k for i in range(n)]\n    total_sum = sum(remainders)\n    \n    # Initialize variables to store the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate over the possible values of b\n    for b in range(1, n):\n        # Calculate the new sum after deleting the tab with number b\n        new_sum = total_sum - remainders[b - 1]\n        \n        # Update the maximum absolute difference\n        max_diff = max(max_diff, abs(new_sum))\n    \n    return max_diff\n\n# Main function to handle multiple test cases\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        result = solve(n, k)\n        print(result)\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for tab in tabs:\n        mod_sum[tab % k] += tab\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = mod_sum[(n - i) % k]\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split()))\n    \n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - mod_sum[(k-i) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab_info[i] % k for i in range(n))\n    \n    # Calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(1, k):\n        diff = abs((remainders_sum + i * k) % k)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for tab in tabs:\n        if tab == 1:\n            e += 1\n        else:\n            s += 1\n    \n    mod_sum = [0] * k\n    for tab in tabs:\n        mod_sum[tab % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - mod_sum[(i + 1) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tabs[i - 1]) % k\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(prefix_sums[k] - prefix_sums[i])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(tabs[i] % k == 0 for i in range(n))\n    s = sum(tabs[i] % k != 0 for i in range(n))\n    \n    max_diff = abs(e - s)\n    \n    for i in range(1, n):\n        if tabs[i] % k == 0:\n            e -= 1\n        else:\n            s += 1\n    \n    max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_network_tabs = [-1] * n\n    \n    # Calculate the sum of each value modulo k\n    mod_sum_info = sum(info_tabs) % k\n    mod_sum_social = sum(social_network_tabs) % k\n    \n    # Count the total sum for the whole array\n    total_mod_sum = (mod_sum_info + mod_sum_social) % k\n    \n    # Initialize the answer\n    max_diff = 0\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(1, k):\n        # Update the total sum after deleting the current tab\n        new_total_mod_sum = (total_mod_sum - mod_sum_info + mod_sum_social) % k\n        \n        # Calculate the difference between the amounts of remaining tabs of different types\n        diff = abs(new_total_mod_sum - mod_sum_info)\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ninfo_tabs = list(map(int, input().split()))\nsocial_network_tabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n\n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = mod_sum[(n - i) % k]\n        max_diff = max(max_diff, abs(e - s))\n\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    e, s = 0, 0\n    \n    # Calculate the sum of remainders when divided by k\n    mod_sum = [sum(tab_info[i] % k for i in range(j, j + k)) for j in range(0, n, k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - mod_sum[(i + 1) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(n):\n        if tab_info[i] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n    \n    max_diff = 0\n    for i in range(1, k):\n        diff = abs((e_sum - i * k) - (s_sum - i * k))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tab_info[i - 1]) % k\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(prefix_sums[n] - prefix_sums[k - i])\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for i in range(n):\n        mod_sum[(tab_info[i] + i) % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = mod_sum[k - i - 1]\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.046511627906976744,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.11627906976744186,
    0.046511627906976744,
    0.06976744186046512,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.046511627906976744,
    0.023255813953488372,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.046511627906976744
  ],
  "train rewards": [
    0.023809523809523808,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.023809523809523808,
    0.0,
    0.023809523809523808,
    0.16666666666666666,
    0.023809523809523808,
    0.0,
    0.16666666666666666,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023809523809523808,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.07142857142857142,
    0.047619047619047616,
    0.0,
    0.0,
    0.11904761904761904,
    0.0,
    0.047619047619047616,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.07142857142857142,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.09523809523809523,
    0.023809523809523808,
    0.09523809523809523
  ],
  "time": [
    14.969185590744019,
    21.324009895324707,
    26.25494956970215,
    33.46126675605774,
    42.27387547492981,
    46.29387927055359,
    53.50533986091614,
    60.76141309738159,
    64.41721653938293,
    72.07151985168457,
    80.51039242744446,
    88.10718154907227,
    95.36942219734192,
    100.20486330986023,
    104.68350648880005,
    113.2342140674591,
    121.57253623008728,
    124.58455157279968,
    128.9827811717987,
    138.81844019889832,
    142.7259817123413,
    150.43552708625793,
    158.6805613040924,
    172.80870485305786,
    176.4549057483673,
    181.66414403915405,
    187.11830306053162,
    195.6015260219574,
    203.26986861228943,
    211.1241865158081,
    217.83656334877014,
    221.78018140792847,
    226.66581273078918,
    234.50729727745056,
    241.41686129570007,
    248.69533562660217,
    253.58797979354858,
    256.96941614151,
    265.0927438735962,
    272.3744606971741,
    275.5705647468567,
    283.74414443969727,
    292.7633640766144,
    301.2327299118042,
    307.3881666660309,
    314.5913074016571,
    317.4000427722931,
    326.98462891578674,
    331.6803228855133,
    339.5581603050232,
    347.43238639831543
  ],
  "sample times": 51
}