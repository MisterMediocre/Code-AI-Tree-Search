{
  "prompt": "\nQUESTION:\nUnlucky year in Berland is such a year that its number n can be represented as n = x^{a} + y^{b}, where a and b are non-negative integer numbers. \n\nFor example, if x = 2 and y = 3 then the years 4 and 17 are unlucky (4 = 2^0 + 3^1, 17 = 2^3 + 3^2 = 2^4 + 3^0) and year 18 isn't unlucky as there is no such representation for it.\n\nSuch interval of years that there are no unlucky years in it is called The Golden Age.\n\nYou should write a program which will find maximum length of The Golden Age which starts no earlier than the year l and ends no later than the year r. If all years in the interval [l, r] are unlucky then the answer is 0.\n\n\n-----Input-----\n\nThe first line contains four integer numbers x, y, l and r (2 \u2264 x, y \u2264 10^18, 1 \u2264 l \u2264 r \u2264 10^18).\n\n\n-----Output-----\n\nPrint the maximum length of The Golden Age within the interval [l, r].\n\nIf all years in the interval [l, r] are unlucky then print 0.\n\n\n-----Examples-----\nInput\n2 3 1 10\n\nOutput\n1\n\nInput\n3 5 10 22\n\nOutput\n8\n\nInput\n2 3 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the unlucky years are 2, 3, 4, 5, 7, 9 and 10. So maximum length of The Golden Age is achived in the intervals [1, 1], [6, 6] and [8, 8].\n\nIn the second example the longest Golden Age is the interval [15, 22].\n\nTUTORIAL:\nNotice that x\u1d43 for x \u2265 2 has no more than 60 powers which give numbers no greater than 10\u00b9\u2078.\n\nSo let's store all possible sums of all powers of x and y. Now the answer to the query can be obtained in linear time by checking difference between neighbouring unlucky years in sorted order.\n\nDon't forget that you should handle multiplying of such big numbers very carefully. For example, instead of writing\n\nwhile (num <= 1e18)\n    num = num * x\n\nor\n\nwhile (num * x <= 1e18)\n    num = num * x\n\nyou should write\n\nwhile (num <= 1e18 / x)\n    num = num * x\n\nto avoid getting overflow errors of 64-bit type.\n\nInteger division will work fine in that case because num \u00b7 x will never exceed 10\u00b9\u2078 if num doesn\u2019t exceed \u230a10\u00b9\u2078 / x\u230b.\n\nOverall complexity: O(n \u00b7 log n).\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i - power_sums.index(l))\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x\n        power_sums_x.add(current_sum)\n        \n        if current_sum > r:\n            break\n        \n        current_sum += y\n        power_sums_y.add(current_sum)\n        \n        if current_sum > r:\n            break\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    i, j = 0, 0\n    \n    while i < len(power_sums_x) and j < len(power_sums_y):\n        if power_sums_x[i] < power_sums_y[j]:\n            i += 1\n        elif power_sums_x[i] > power_sums_y[j]:\n            j += 1\n        else:\n            max_length = max(max_length, power_sums_x[i])\n            i += 1\n            j += 1\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    max_length = solve(x, y, l, r)\n    print(max_length)\n\ndef solve(x, y, l, r):\n    power_x = []\n    power_y = []\n    \n    # Generate all possible sums of powers of x and y\n    for i in range(61):\n        power_x.append(x ** i)\n    for j in range(61):\n        power_y.append(y ** j)\n    \n    # Sort the lists\n    power_x.sort()\n    power_y.sort()\n    \n    # Find the longest subarray with no unlucky years\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(power_x)):\n        while i < len(power_x) and power_x[i] - power_y[0] >= l:\n            current_length += 1\n            i += 1\n        max_length = max(max_length, current_length)\n        current_length = 0\n    \n    return max_length\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    # Store all possible sums of all powers of x and y\n    sums = set()\n    current_sum = 0\n    while current_sum <= 10**18:\n        sums.add(current_sum)\n        current_sum += x**current_sum % (10**18)\n    \n    current_sum = 0\n    while current_sum <= 10**18:\n        sums.add(current_sum)\n        current_sum += y**current_sum % (10**18)\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] >= l and sums[i] <= r:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "from typing import *\nimport sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x\n        power_sums_x.add(current_sum)\n        \n        if current_sum > r:\n            break\n        \n        current_sum += y\n        power_sums_y.add(current_sum)\n        \n        if current_sum > r:\n            break\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    i, j = 0, 0\n    \n    while i < len(power_sums_x) and j < len(power_sums_y):\n        if power_sums_x[i] < power_sums_y[j]:\n            i += 1\n        elif power_sums_x[i] > power_sums_y[j]:\n            j += 1\n        else:\n            max_length = max(max_length, power_sums_x[i])\n            i += 1\n            j += 1\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= x ** i\n        power_sums_y.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= y ** i\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] > r or power_sums_y[j] < l:\n                break\n            if power_sums_x[i] >= l and power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= x ** i\n        power_sums_y.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= y ** i\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] > r or power_sums_y[j] < l:\n                break\n            if power_sums_x[i] >= l and power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom math import pow\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    sums = set()\n    for i in range(61):\n        for j in range(61):\n            sums.add(pow(x, i) + pow(y, j))\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] > r:\n            break\n        if sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def main():\n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= x ** i\n        power_sums_y.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= y ** i\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] > r or power_sums_y[j] < l:\n                break\n            if power_sums_x[i] >= l and power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n    \n    print(max_length)\n\nif True:\n    main()",
    "def solve():\n    from math import pow\n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    sums = set()\n    for i in range(61):\n        for j in range(61):\n            sums.add(pow(x, i) + pow(y, j))\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] > r:\n            break\n        if sums[i] >= l:\n            max_length = max(max_length, i - 0)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = defaultdict(list)\n    for i in range(61):\n        for j in range(61):\n            power_sums[i + j].append(x ** i + y ** j)\n    \n    # Sort the list of power sums\n    power_sums_sorted = sorted(power_sums.values())\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_sorted)):\n        for j in range(i + 1, len(power_sums_sorted)):\n            if power_sums_sorted[j] - power_sums_sorted[i] > r - l:\n                break\n            if power_sums_sorted[j] - power_sums_sorted[i] >= l:\n                max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\ndef main():\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n\n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n\n    def generate_power_sums(x, y, current_sum, max_length):\n        if current_sum > r:\n            return\n        if current_sum >= l:\n            power_sums_x.add(current_sum)\n        if current_sum >= l:\n            power_sums_y.add(current_sum)\n        for i in range(max_length):\n            new_sum = current_sum + x ** i\n            if new_sum <= r:\n                generate_power_sums(x, y, new_sum, max_length + 1)\n\n    generate_power_sums(x, y, 0, 0)\n\n    # Find the maximum length of The Golden Age\n    golden_age_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i + 1, len(power_sums_y)):\n            if power_sums_x[i] < power_sums_y[j]:\n                golden_age_length = max(golden_age_length, power_sums_y[j] - power_sums_x[i])\n\n    print(golden_age_length)\n\nif True:\n    main()",
    "import sys\ninput = sys.stdin.read\ndata = input().split()\nx, y, l, r = map(int, data)\n\ndef power(x, n):\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res *= x\n        x *= x\n        n //= 2\n    return res\n\nunlucky_years = set()\n\nfor i in range(l, r+1):\n    sum_of_powers = 0\n    for j in range(60):\n        sum_of_powers += power(x, j) + power(y, j)\n        if sum_of_powers >= i:\n            unlucky_years.add(i)\n            break\n\nif len(unlucky_years) == 0:\n    print(0)\nelse:\n    max_length = 0\n    for i in range(len(unlucky_years)-1):\n        if unlucky_years[i+1] - unlucky_years[i] > max_length:\n            max_length = unlucky_years[i+1] - unlucky_years[i]\n    print(max_length)",
    "def max_golden_age(x, y, l, r):\n    # Store all possible sums of all powers of x and y\n    sums = set()\n    current_sum = 0\n    power = 1\n    while current_sum <= 1e18:\n        sums.add(current_sum)\n        current_sum += power * x\n        power *= y\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] >= l and sums[i] <= r:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Print the result\nprint(max_golden_age(x, y, l, r))",
    "def solve():\n    import math\n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    for i in range(61):\n        power_sums_x.add(x**i)\n        power_sums_y.add(y**i)\n    \n    # Sort the power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the longest golden age\n    max_length = 0\n    current_sum = 0\n    for i in range(len(power_sums_x)):\n        while current_sum < l:\n            current_sum += power_sums_x[i]\n        while current_sum > r:\n            current_sum -= power_sums_x[i]\n        if current_sum >= l and current_sum <= r:\n            max_length = max(max_length, i + 1)\n    \n    # Check if all years in the interval [l, r] are unlucky\n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom typing import List\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "import sys\nfrom typing import *\ninput = sys.stdin.read\ndata = input().split()\nx, y, l, r = map(int, data)\n\ndef power(x, n):\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res *= x\n        x *= x\n        n //= 2\n    return res\n\nunlucky_years = set()\n\nfor i in range(1, x**60 + 1):\n    for j in range(1, y**60 + 1):\n        unlucky_years.add(power(x, i) + power(y, j))\n\nunlucky_years = sorted(unlucky_years)\n\nmax_length = 0\ncurrent_length = 0\n\nfor i in range(len(unlucky_years)):\n    if i == len(unlucky_years) - 1 or unlucky_years[i+1] != unlucky_years[i] + 1:\n        max_length = max(max_length, current_length)\n        current_length = 0\n    else:\n        current_length += 1\n\nif max_length == 0:\n    print(0)\nelse:\n    print(max_length)",
    "import sys\nfrom typing import *\nsys.setrecursionlimit(10**6)\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    for i in range(x):\n        for j in range(y):\n            power_sums_x.add(i**j)\n            power_sums_y.add(j**i)\n    \n    # Sort the power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(len(power_sums_y)):\n            if power_sums_x[i] + power_sums_y[j] >= l and power_sums_x[i] + power_sums_y[j] <= r:\n                max_length = max(max_length, i + j + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(x, y, l, r):\n    # Store all possible sums of all powers of x and y\n    sums = set()\n    current_sum = 0\n    power = 0\n    \n    while True:\n        current_sum += x ** power\n        if current_sum > r:\n            break\n        sums.add(current_sum)\n        power += 1\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    current_start = l\n    \n    for i in range(len(sums)):\n        if sums[i] >= r:\n            break\n        if sums[i] < current_start:\n            continue\n        current_end = min(r, sums[i])\n        max_length = max(max_length, current_end - current_start + 1)\n        current_start = current_end + 1\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "def main():\n    from sys import stdin, stdout\n    input = stdin.read\n    data = input().split()\n    x, y, l, r = map(int, data)\n    \n    def power(x, n):\n        res = 1\n        while n > 0:\n            if n % 2 == 1:\n                res *= x\n            x *= x\n            n //= 2\n        return res\n    \n    def generate_sums(x, y):\n        sums = set()\n        for i in range(61):\n            for j in range(61):\n                sums.add(power(x, i) + power(y, j))\n        return sorted(sums)\n    \n    sums = generate_sums(x, y)\n    left, right = 0, len(sums) - 1\n    max_length = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if sums[mid] >= l and sums[mid] <= r:\n            max_length = mid + 1\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    stdout.write(str(max_length))\n\nif True:\n    main()",
    "import sys\nfrom typing import *\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().strip().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "import sys\nfrom math import ceil\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    \n    current_sum = 0\n    for i in range(ceil(log(r, x)) + 1):\n        current_sum += x ** i\n        power_sums_x.add(current_sum)\n        \n    current_sum = 0\n    for i in range(ceil(log(r, y)) + 1):\n        current_sum += y ** i\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] > power_sums_y[j]:\n                break\n            if power_sums_x[i] + power_sums_y[j] >= l and power_sums_x[i] + power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    from math import pow\n    \n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    sums = set()\n    for i in range(61):\n        for j in range(61):\n            sums.add(pow(x, i) + pow(y, j))\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] > r:\n            break\n        if sums[i] >= l:\n            max_length = max(max_length, i - 0)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "from typing import *\nimport math\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "from typing import *\nfrom collections import *\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "from typing import List\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(60):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(60):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] >= l and power_sums[i] <= r:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "def solve(x, y, l, r):\n    def power_sum(a, b):\n        res = 0\n        for i in range(a + 1):\n            for j in range(b + 1):\n                res += pow(x, i) * pow(y, j)\n        return res\n    \n    def binary_search(start, end):\n        while start < end:\n            mid = (start + end) // 2\n            if power_sum(mid, 0) > r:\n                end = mid\n            else:\n                start = mid + 1\n        return start - 1\n    \n    left = binary_search(l, r)\n    right = binary_search(l, r)\n    \n    while left >= l and right <= r:\n        if power_sum(left, 0) == power_sum(right, 0):\n            break\n        elif power_sum(left, 0) < power_sum(right, 0):\n            left -= 1\n        else:\n            right += 1\n    \n    return right - left\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "import sys\nsys.setrecursionlimit(10**6)\n\ndef solve():\n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    for i in range(x):\n        for j in range(y):\n            power_sum = pow(x, i) + pow(y, j)\n            power_sums.add(power_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve(x, y, l, r):\n    from collections import defaultdict\n    from math import log\n\n    # Store all possible sums of all powers of x and y\n    power_sums = defaultdict(int)\n    for i in range(61):\n        for j in range(61):\n            power_sums[x**i + y**j] += 1\n\n    # Sort the keys of power_sums dictionary\n    sorted_keys = sorted(power_sums.keys())\n\n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sorted_keys)):\n        while i < len(sorted_keys) - 1 and sorted_keys[i+1] - sorted_keys[i] > r - l:\n            i += 1\n        if i == len(sorted_keys) - 1:\n            break\n        max_length = max(max_length, sorted_keys[i+1] - sorted_keys[i])\n\n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "import sys\nfrom math import log\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.read().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x ** log(current_sum + 1, x)\n        if current_sum > r:\n            break\n        power_sums_x.add(current_sum)\n        \n        current_sum += y ** log(current_sum + 1, y)\n        if current_sum > r:\n            break\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    i, j = 0, 0\n    \n    while i < len(power_sums_x) and j < len(power_sums_y):\n        if power_sums_x[i] == power_sums_y[j]:\n            max_length = max(max_length, power_sums_x[i])\n            i += 1\n            j += 1\n        elif power_sums_x[i] < power_sums_y[j]:\n            i += 1\n        else:\n            j += 1\n    \n    print(max_length)\n\nif True:\n    solve()",
    "from typing import *\nimport sys\ninput = sys.stdin.read\nreadline = sys.stdin.readline\n\ndef solve():\n    x, y, l, r = map(int, readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x\n        power_sums_x.add(current_sum)\n        \n        if current_sum > r:\n            break\n        \n        current_sum += y\n        power_sums_y.add(current_sum)\n        \n        if current_sum > r:\n            break\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    i, j = 0, 0\n    \n    while i < len(power_sums_x) and j < len(power_sums_y):\n        if power_sums_x[i] < power_sums_y[j]:\n            i += 1\n        elif power_sums_x[i] > power_sums_y[j]:\n            j += 1\n        else:\n            max_length = max(max_length, power_sums_x[i])\n            i += 1\n            j += 1\n    \n    return max_length\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i - power_sums.index(l))\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\nfrom typing import *\nfrom math import *\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = defaultdict(list)\n    for i in range(61):\n        for j in range(61):\n            power_sums[i + j].append(x ** i + y ** j)\n    \n    # Sort the list of power sums\n    power_sums_sorted = sorted(power_sums.values(), key=lambda x: x[0])\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    current_sum = 0\n    for i in range(len(power_sums_sorted)):\n        current_sum += power_sums_sorted[i][0]\n        while current_sum > r:\n            current_sum -= power_sums_sorted[max_length - 1][0]\n            max_length -= 1\n        if current_sum >= l:\n            max_length = max(max_length, i + 1)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\ndef main():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x ** len(power_sums)\n        if current_sum > r:\n            break\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    \n    while True:\n        current_sum += y ** len(power_sums)\n        if current_sum > r:\n            break\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] >= l:\n            j = i\n            while j < len(power_sums) and power_sums[j] <= r:\n                j += 1\n            max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    data = sys.stdin.read().split()\n    x, y, l, r = map(int, data)\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum_x = 0\n    current_sum_y = 0\n    \n    while True:\n        current_sum_x += x\n        if current_sum_x > 10**18:\n            break\n        power_sums_x.add(current_sum_x)\n        \n        current_sum_y += y\n        if current_sum_y > 10**18:\n            break\n        power_sums_y.add(current_sum_y)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] < power_sums_y[j]:\n                max_length = max(max_length, power_sums_y[j] - power_sums_x[i])\n            else:\n                break\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\n\ndef read_input():\n    return map(int, sys.stdin.read().split())\n\ndef solve(x, y, l, r):\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] >= l and power_sums[i] <= r:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\nif True:\n    x, y, l, r = read_input()\n    print(solve(x, y, l, r))",
    "import sys\n\ndef solve():\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n\n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n\n    def generate_powers(x, y, current_sum, max_power):\n        if current_sum > max_power:\n            return\n        power_sums_x.add(current_sum)\n        power_sums_y.add(current_sum)\n        generate_powers(x, y, current_sum + x, max_power)\n        generate_powers(x, y, current_sum + y, max_power)\n\n    generate_powers(x, y, 0, 60)\n\n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n\n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] + power_sums_y[j] >= l and power_sums_x[i] + power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n\n    print(max_length)\n\nif True:\n    solve()",
    "from typing import *\nimport collections\nimport math\nimport sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    for i in range(61):\n        for j in range(61):\n            power_sums.add(x**i + y**j)\n    \n    # Sort the list of power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i - 0)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= x ** i\n        power_sums_y.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums_x.add(current_sum)\n        \n        current_sum -= y ** i\n        power_sums_y.add(current_sum)\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums_x)):\n        for j in range(i, len(power_sums_y)):\n            if power_sums_x[i] > r or power_sums_y[j] < l:\n                break\n            if power_sums_x[i] >= l and power_sums_y[j] <= r:\n                max_length = max(max_length, j - i + 1)\n    \n    print(max_length)\n\n\nif True:\n    solve()",
    "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(61):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i - power_sums.index(l))\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\nfrom typing import List\n\ndef main():\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n\n    # Calculate all possible sums of powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n\n    def calculate_power_sums(x, y, max_power):\n        if max_power == 0:\n            return\n        power_sums_x.add(x ** max_power)\n        power_sums_y.add(y ** max_power)\n        calculate_power_sums(x, y, max_power - 1)\n\n    calculate_power_sums(x, y, 60)\n\n    # Sort the power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n\n    # Find the maximum length of The Golden Age\n    max_length = 0\n    current_sum = 0\n    for i in range(len(power_sums_x)):\n        while current_sum < l:\n            current_sum += power_sums_x[i]\n        while current_sum > r:\n            current_sum -= power_sums_x[i]\n        if current_sum >= l and current_sum <= r:\n            max_length = max(max_length, i + 1)\n\n    # Check if all years in the interval [l, r] are unlucky\n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    main()",
    "def solve():\n    from collections import defaultdict\n    from math import pow\n    \n    x, y, l, r = map(int, input().split())\n    \n    # Store all possible sums of all powers of x and y\n    sums = defaultdict(list)\n    for i in range(61):\n        for j in range(61):\n            sums[i + j].append(pow(x, i) + pow(y, j))\n    \n    # Sort the sums\n    sums = {k: sorted(v) for k, v in sums.items()}\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(l, r + 1):\n        if i not in sums:\n            continue\n        \n        # Find the longest subarray with sum less than i\n        left, right = 0, 0\n        current_sum = 0\n        while right < len(sums[i]):\n            current_sum += sums[i][right]\n            while current_sum >= i:\n                current_sum -= sums[i][left]\n                left += 1\n            max_length = max(max_length, right - left + 1)\n            right += 1\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    ans = solve(x, y, l, r)\n    print(ans)\n\ndef solve(x, y, l, r):\n    power_x = []\n    power_y = []\n    for i in range(61):\n        power_x.append(x ** i)\n        power_y.append(y ** i)\n    \n    power_x.sort()\n    power_y.sort()\n    \n    max_len = 0\n    for i in range(len(power_x)):\n        for j in range(i, len(power_y)):\n            sum_xy = power_x[i] + power_y[j]\n            if sum_xy >= l and sum_xy <= r:\n                max_len = max(max_len, j - i + 1)\n    \n    return max_len\n\nif True:\n    main()",
    "from typing import *\nimport sys\n\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n\nif True:\n    x, y, l, r = map(int, sys.stdin.read().split())\n    print(solve(x, y, l, r))",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().strip().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "import sys\nfrom math import pow, floor\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    # Store all possible sums of all powers of x and y\n    sums = set()\n    for i in range(61):\n        for j in range(61):\n            sums.add(pow(x, i) + pow(y, j))\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] > r:\n            break\n        if sums[i] >= l:\n            max_length = max(max_length, i - bisect.bisect_left(sums, l))\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve(x, y, l, r):\n    # Generate all possible sums of powers of x and y\n    sums = set()\n    for i in range(61):\n        for j in range(61):\n            sums.add(x**i + y**j)\n    \n    # Sort the sums\n    sums = sorted(sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        if sums[i] > r:\n            break\n        if sums[i] >= l:\n            max_length = max(max_length, i - bisect.bisect_left(sums, l))\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nprint(solve(x, y, l, r))",
    "from typing import *\nimport math\n\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(61):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i + 1)\n    \n    return max_length\n\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(x, y, l, r):\n    # Store all possible sums of all powers of x and y\n    power_sums = set()\n    current_sum = 0\n    for i in range(60):\n        current_sum += x ** i\n        power_sums.add(current_sum)\n    \n    current_sum = 0\n    for i in range(60):\n        current_sum += y ** i\n        power_sums.add(current_sum)\n    \n    # Sort the power sums\n    power_sums = sorted(power_sums)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(power_sums)):\n        if power_sums[i] > r:\n            break\n        if power_sums[i] >= l:\n            max_length = max(max_length, i - bisect_left(power_sums, l))\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    x, y, l, r = map(int, data)\n    \n    # Store all possible sums of all powers of x and y\n    power_sums_x = set()\n    power_sums_y = set()\n    current_sum = 0\n    \n    while True:\n        current_sum += x\n        power_sums_x.add(current_sum)\n        \n        if current_sum > r:\n            break\n        \n        current_sum += y\n        power_sums_y.add(current_sum)\n        \n        if current_sum > r:\n            break\n    \n    # Sort the sets of power sums\n    power_sums_x = sorted(power_sums_x)\n    power_sums_y = sorted(power_sums_y)\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    i, j = 0, 0\n    \n    while i < len(power_sums_x) and j < len(power_sums_y):\n        if power_sums_x[i] == power_sums_y[j]:\n            max_length = max(max_length, power_sums_x[i])\n            i += 1\n            j += 1\n        elif power_sums_x[i] < power_sums_y[j]:\n            i += 1\n        else:\n            j += 1\n    \n    print(max_length)\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    from math import pow\n    from collections import defaultdict\n    \n    # Store all possible sums of all powers of x and y\n    sums = defaultdict(int)\n    for i in range(61):\n        for j in range(61):\n            sums[pow(x, i) + pow(y, j)] += 1\n            \n    # Sort the sums\n    sums = sorted(sums.items())\n    \n    # Find the maximum length of The Golden Age\n    max_length = 0\n    for i in range(len(sums)):\n        while i < len(sums) - 1 and sums[i][0] == sums[i+1][0]:\n            i += 1\n        max_length = max(max_length, i - l + 1)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nprint(solve(x, y, l, r))"
  ],
  "rewards": [
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.06976744186046512,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.0,
    0.09302325581395349,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.046511627906976744,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.023809523809523808,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.047619047619047616,
    0.047619047619047616,
    0.0,
    0.047619047619047616,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.047619047619047616,
    0.0,
    0.09523809523809523,
    0.0,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.09523809523809523,
    0.023809523809523808,
    0.0,
    0.09523809523809523,
    0.09523809523809523,
    0.09523809523809523,
    0.0,
    0.0,
    0.047619047619047616,
    0.047619047619047616,
    0.0,
    0.023809523809523808,
    0.0,
    0.11904761904761904,
    0.0,
    0.09523809523809523,
    0.0,
    0.0,
    0.047619047619047616,
    0.023809523809523808,
    0.0,
    0.0,
    0.023809523809523808,
    0.09523809523809523,
    0.09523809523809523,
    0.0,
    0.0,
    0.09523809523809523,
    0.023809523809523808,
    0.0,
    0.023809523809523808
  ],
  "time": [
    5.7916882038116455,
    13.147207260131836,
    31.775311946868896,
    37.58733105659485,
    54.77867269515991,
    72.40817785263062,
    80.29021549224854,
    84.7153069972992,
    92.23022246360779,
    96.58856749534607,
    102.23817133903503,
    109.39656090736389,
    114.97710728645325,
    129.75111150741577,
    136.0974636077881,
    157.2015278339386,
    163.17584085464478,
    179.12420916557312,
    220.49384808540344,
    226.87801718711853,
    232.968430519104,
    240.36883163452148,
    244.74134182929993,
    250.141446352005,
    255.5217559337616,
    261.6495683193207,
    267.7910418510437,
    282.6328401565552,
    298.44179034233093,
    306.8755087852478,
    314.2307183742523,
    329.8869731426239,
    335.8231945037842,
    342.0161108970642,
    355.5989851951599,
    376.39707922935486,
    383.8000726699829,
    398.5538001060486,
    406.4711172580719,
    411.97740054130554,
    419.5775489807129,
    440.5707516670227,
    455.4346055984497,
    460.6451675891876,
    466.0463719367981,
    470.6200039386749,
    475.09965777397156,
    480.55818819999695,
    495.9708020687103,
    503.1229920387268,
    518.074874162674
  ],
  "sample times": 51
}