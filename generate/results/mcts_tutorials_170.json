{
  "prompt": "\nQUESTION:\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n\n-----Examples-----\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\n\n-----Note-----\n\nFirst sample:  [Image] \n\nSecond sample:  [Image]\n\nTUTORIAL:\nIt's easy to count who wins and after how many \"fights\", but it's harder to say, that game won't end. How to do it?\n\nFirstly let's count a number of different states that we can have in the game. Cards can be arranged in any one of n! ways. In every of this combination, we must separate first soldier's cards from the second one's. We can separate it in n + 1 places (because we can count the before and after deck case too).\n\nSo war has (n + 1)! states. If we'd do (n + 1)! \"fights\" and we have not finished the game yes, then we'll be sure that there is a state, that we passed at least twice. That means that we have a cycle, and game won't end.\n\nAfter checking this game more accurately I can say that the longest path in the state-graph for n = 10 has length 106, so it is enough to do 106 fights, but solutions that did about 40 millions also passed.\n\nAlternative solution is to map states that we already passed. If we know, that the longest time needed to return to state is about 100, then we know that this solution is correct and fast.\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k1, k2):\n    import math\n    total_states = math.factorial(n + 1)\n    \n    # Check if the game will end\n    if total_states <= 100:\n        return -1\n    \n    # Calculate the number of fights\n    fights = total_states // 2\n    \n    # Determine the winner\n    if fights % 2 == 0:\n        winner = 1\n    else:\n        winner = 2\n    \n    print(fights, winner)\n\n# Read input\nn = int(input())\nk1 = int(input())\nk2 = int(input())\n\n# Parse the card values\ncards1 = list(map(int, input().split()))\ncards2 = list(map(int, input().split()))\n\n# Solve the problem\nsolve(n, k1, k2)",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    res += 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:])\n                    break\n        memo[(s1, s2)] = res\n        return res\n\n    memo = defaultdict(int)\n    res = dfs(s1, s2)\n    if res == 0:\n        print(-1)\n    else:\n        print(res // 2, res % 2)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        \n        max_fights = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    max_fights = max(max_fights, 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:]))\n        \n        memo[(s1, s2)] = max_fights\n        return max_fights\n    \n    memo = {}\n    max_fights = dfs(s1, s2)\n    if max_fights == 0:\n        print(-1)\n    else:\n        print(max_fights, 1)\n\nif True:\n    solve()",
    "from collections import defaultdict\nimport sys\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(state, depth):\n        if state in memo:\n            return memo[state], depth\n        max_depth = 0\n        for i in range(k1):\n            for j in range(k2):\n                new_state = tuple(sorted(cards1[:i] + cards2[j:] + cards1[i+1:] + cards2[j+1:]))\n                result, subdepth = dfs(new_state, depth + 1)\n                max_depth = max(max_depth, subdepth)\n        memo[state] = result, max_depth\n        return result, max_depth\n    \n    memo = defaultdict(lambda: (-sys.maxsize, 0))\n    result, _ = dfs(tuple(cards1) + tuple(cards2), 0)\n    if result == 1:\n        return f\"{result} 1\"\n    elif result == 2:\n        return f\"{result} 2\"\n    else:\n        return \"-1\"\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n    print(solve(n, k1, k2, cards1, cards2))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        \n        max_fights = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    max_fights = max(max_fights, 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:]))\n        \n        memo[(s1, s2)] = max_fights\n        return max_fights\n    \n    memo = {}\n    max_fights = dfs(s1, s2)\n    print(max_fights, 1 if max_fights % 2 == 0 else 2)\n\nif True:\n    main()",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    res += 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:])\n                    break\n        memo[(s1, s2)] = res\n        return res\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res == 0:\n        print(-1)\n    else:\n        print(res // 2, res % 2)\n\nif True:\n    solve()",
    "from typing import *\nimport sys\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> Tuple[int, int]:\n    def dfs(i, j):\n        nonlocal cnt\n        if i == len(cards1) or j == len(cards2):\n            cnt += 1\n            return\n        dfs(i + 1, j)\n        dfs(i, j + 1)\n    \n    cnt = 0\n    dfs(0, 0)\n    return cnt // 2, 1 if cnt % 2 else 2\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    cards1 = list(map(int, input().split()))\n    cards2 = list(map(int, input().split()))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "def read_input():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    return data\n\ndef solve(data):\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    # Calculate the number of different states\n    total_states = factorial(n)\n    \n    # Check if the game will end\n    if len(cards1) == 0 or len(cards2) == 0:\n        return -1\n    \n    # Count the number of fights\n    fights = 0\n    while True:\n        # Find the next state\n        next_state = find_next_state(cards1, cards2)\n        \n        # If we've returned to the same state, the game will end\n        if next_state == (cards1, cards2):\n            break\n        \n        # Update the states\n        cards1, cards2 = next_state\n        \n        # Increment the number of fights\n        fights += 1\n    \n    # Determine the winner\n    if len(cards1) > len(cards2):\n        winner = 1\n    elif len(cards1) < len(cards2):\n        winner = 2\n    else:\n        winner = 0\n    \n    return fights, winner\n\ndef find_next_state(cards1, cards2):\n    # Try to swap the top two cards of each stack\n    for i in range(len(cards1)):\n        for j in range(i+1, len(cards1)):\n            for k in range(len(cards2)):\n                for l in range(k+1, len(cards2)):\n                    new_cards1 = cards1[:i] + cards1[i+1:j] + cards1[j:] + cards1[i:i] + cards1[j+1:l] + cards1[l:]\n                    new_cards2 = cards2[:k] + cards2[k+1:l] + cards2[l:] + cards2[k:k] + cards2[l+1:j] + cards2[j:]\n                    yield new_cards1, new_cards2\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif True:\n    data = read_input()\n    result = solve(data)\n    print(*result)",
    "import sys\nfrom collections import deque\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(k1):\n            for j in range(i+1, k1):\n                for l in range(j+1, k1):\n                    new_state = tuple(sorted(cards1[i:j+1] + cards2[l:k2+1]))\n                    if dfs(new_state):\n                        return True\n        return False\n    \n    visited = set()\n    cycles = []\n    if dfs(tuple(cards1) + tuple(cards2)):\n        print(len(cycles), 1)\n    else:\n        print(-1)\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    k2 = data[2]\n    cards1 = data[3:k1+3]\n    cards2 = data[k1+3:]\n    solve(n, k1, k2, cards1, cards2)",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> Tuple[int, int]:\n    def dfs(i, j):\n        nonlocal ans\n        if i == len(cards1) or j == len(cards2):\n            ans += 1\n            return\n        if (i, j) in seen:\n            return\n        seen.add((i, j))\n        dfs(i + 1, j)\n        dfs(i, j + 1)\n    \n    ans = 0\n    seen = set()\n    dfs(0, 0)\n    return ans, 1 if ans % 2 else 2\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    k2 = data[2]\n    cards1 = data[3:k1+3]\n    cards2 = data[k1+3:]\n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "import sys\nfrom itertools import permutations\n\ndef solve(n, k1, k2):\n    cards1 = list(range(1, k1 + 1))\n    cards2 = list(range(k1 + 1, k1 + k2 + 1))\n    \n    def get_state(cards1, cards2):\n        return tuple(cards1) + tuple(cards2)\n    \n    def dfs(state, visited):\n        if state in visited:\n            return True\n        visited.add(state)\n        \n        for i in range(len(cards1)):\n            for j in range(i + 1, len(cards1)):\n                new_cards1 = cards1[:i] + cards1[i+1:j] + cards1[j:]\n                new_cards2 = cards2[:j] + cards2[j+1:] + cards1[i]\n                \n                if dfs(get_state(new_cards1, new_cards2), visited):\n                    return True\n        \n        return False\n    \n    visited = set()\n    if dfs(get_state(cards1, cards2), visited):\n        return (len(visited) - 1, 2)\n    else:\n        return (-1)\n\nif True:\n    input_data = sys.stdin.read().splitlines()\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    k2 = int(input_data[2])\n    cards1 = list(map(int, input_data[3].split()))\n    cards2 = list(map(int, input_data[4].split()))\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 1 + max(dfs(s1[1:], s2), dfs(s1, s2[1:]))\n        memo[(s1, s2)] = res\n        return res\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res == n * (n - 1) // 2:\n        print(res, 1)\n    else:\n        print(res, 2)\n\nif True:\n    main()",
    "import sys\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> str:\n    def dfs(state):\n        nonlocal count\n        if state in seen:\n            return\n        seen.add(state)\n        count += 1\n        for i in range(k1):\n            for j in range(i + 1, k1):\n                new_state = tuple(sorted(cards1[:i] + cards1[i+1:j] + cards1[j:] + cards2))\n                dfs(new_state)\n        for i in range(k2):\n            for j in range(i + 1, k2):\n                new_state = tuple(sorted(cards2[:i] + cards2[i+1:j] + cards2[j:] + cards1))\n                dfs(new_state)\n\n    count = 0\n    seen = set()\n    dfs(tuple(cards1) + tuple(cards2))\n    return f\"{count} {1 if count % 2 == 0 else 2}\"\n\nif True:\n    input_data = sys.stdin.read().strip().split(\"\\n\")\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    cards1 = list(map(int, input_data[2].split()))\n    k2 = int(input_data[3])\n    cards2 = list(map(int, input_data[4].split()))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(result)",
    "import sys\n\ndef solve(n, k1, k2):\n    def dfs(i, j):\n        nonlocal cnt\n        if i == j:\n            return 0\n        if dp[i][j] != -1:\n            return dp[i][j]\n        dp[i][j] = max(dfs(i+1, j) + 1, dfs(i, j-1) + 1)\n        cnt += 1\n        return dp[i][j]\n    \n    cnt = 0\n    dp = [[-1] * (n+1) for _ in range(n+1)]\n    dfs(0, n-1)\n    if cnt < 10**6:\n        return cnt, 2\n    else:\n        return -1\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k1, k2 = data[0], data[1], data[2]\n    result = solve(n, k1, k2)\n    print(*result)",
    "import sys\n\ndef read_input():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n    return n, k1, s1, k2, s2\n\ndef solve(n, k1, s1, k2, s2):\n    # Calculate the total number of states\n    total_states = factorial(n)\n    \n    # Initialize a dictionary to keep track of visited states\n    visited = set()\n    \n    # Function to perform DFS and check cycles\n    def dfs(state):\n        if state in visited:\n            return True\n        visited.add(state)\n        # Check all possible moves\n        for i in range(k1):\n            for j in range(k2):\n                new_state = tuple(sorted(s1[:i] + s2[j:] + s1[i+1:] + s2[j+1:]))\n                if dfs(new_state):\n                    return True\n        return False\n    \n    # Perform DFS starting from the initial state\n    if dfs(tuple(s1)):\n        return total_states // 2, 2\n    else:\n        return total_states // 2, 1\n\ndef main():\n    n, k1, s1, k2, s2 = read_input()\n    result = solve(n, k1, s1, k2, s2)\n    print(*result)\n\nif True:\n    main()",
    "import sys\nfrom collections import deque\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        visited = set()\n        queue = deque([(s1, s2)])\n        while queue:\n            cur_s1, cur_s2 = queue.popleft()\n            if tuple(cur_s1) in visited or tuple(cur_s2) in visited:\n                return len(visited)\n            visited.add(tuple(cur_s1))\n            visited.add(tuple(cur_s2))\n            for i in range(len(cur_s1)):\n                new_s1 = cur_s1[:i] + cur_s1[i+1:]\n                new_s2 = cur_s2[:len(cur_s2)-1]\n                queue.append((new_s1, new_s2))\n        return len(visited)\n\n    result = dfs(s1, s2)\n    if result == len(s1) + len(s2):\n        print(-1)\n    else:\n        print(result, 1 if result % 2 == 0 else 2)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(state):\n        nonlocal count\n        if state in seen:\n            return\n        seen.add(state)\n        count += 1\n        for i in range(k1):\n            for j in range(k2):\n                new_state = tuple(sorted(cards1[:i] + cards2[j:] + cards1[i+1:] + cards2[j+1:]))\n                dfs(new_state)\n\n    count = 0\n    seen = set()\n    dfs(tuple(cards1) + tuple(cards2))\n    return count, 1 if count % 2 == 0 else 2\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    k2 = data[2]\n    cards1 = data[3:k1+3]\n    cards2 = data[k1+3:]\n    result = solve(n, k1, k2, cards1, cards2)\n    print(*result)",
    "def solve():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    res += 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:])\n                    break\n        memo[(s1, s2)] = res\n        return res\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res == 0:\n        print(-1)\n    else:\n        print(res // 2, res % 2)\n\nif True:\n    solve()",
    "def solve(n, k1, values1, k2, values2):\n    import math\n    # Calculate the total number of states\n    total_states = math.factorial(n)\n    \n    # Initialize variables to keep track of the current state and the number of fights\n    current_state = tuple(values1) + tuple(values2)\n    num_fights = 0\n    \n    # Iterate through all possible states\n    while True:\n        # Check if the current state has been seen before\n        if current_state in seen_states:\n            break\n        \n        # Add the current state to the set of seen states\n        seen_states.add(current_state)\n        \n        # Increment the number of fights\n        num_fights += 1\n        \n        # Find the next state by moving the top card from one stack to the other\n        if len(values1) > 0:\n            values1.pop(0)\n        else:\n            values2.pop(0)\n        \n        # Update the current state with the new values\n        current_state = tuple(values1) + tuple(values2)\n    \n    # Determine the winner based on the number of fights\n    if num_fights % 2 == 0:\n        winner = 2\n    else:\n        winner = 1\n    \n    # Print the result\n    print(num_fights, winner)\n\n# Read input\nn = int(input())\nk1 = int(input())\nvalues1 = list(map(int, input().split()))\nk2 = int(input())\nvalues2 = list(map(int, input().split()))\n\n# Solve the problem\nsolve(n, k1, values1, k2, values2)",
    "import sys\ninput = sys.stdin.read\ndata = input().split()\ndef solve():\n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[2+k1])\n    s2 = list(map(int, data[2+k1+2:]))\n    s1.sort(reverse=True)\n    s2.sort(reverse=True)\n    i = j = 0\n    fights = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s2.pop())\n            i += 1\n        else:\n            s2.append(s1.pop())\n            j += 1\n        fights += 1\n    if i == k1:\n        print(fights, 2)\n    elif j == k2:\n        print(fights, 1)\n    else:\n        print(-1)\nsolve()",
    "import sys\ndef solve():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        \n        res = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    res += 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:])\n                elif s1[i] < s2[j]:\n                    res += 1 + dfs(s1[:i], s2[:j] + s2[j+1:])\n                else:\n                    res += max(dfs(s1[:i] + s1[i+1:], s2[:j]), dfs(s1[:i], s2[:j] + s2[j+1]))\n        \n        memo[(s1, s2)] = res\n        return res\n    \n    memo = {}\n    res = dfs(s1, s2)\n    print(res // 2, 1 if res % 2 == 1 else 2)\n\nif True:\n    solve()",
    "import sys\nfrom collections import deque\n\ndef main():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        q = deque([(s1, s2)])\n        visited = set()\n        while q:\n            s1, s2 = q.popleft()\n            if tuple(s1) == tuple(s2):\n                return len(q)\n            visited.add(tuple(s1))\n            for i in range(n):\n                new_s1 = s1[:i] + s1[i+1:]\n                new_s2 = s2[:i] + s2[i+1:]\n                if new_s1 not in visited:\n                    q.append((new_s1, s2))\n                if new_s2 not in visited:\n                    q.append((s1, new_s2))\n\n    result = dfs(s1, s2)\n    if result == -1:\n        print(-1)\n    else:\n        print(result, 1)\n\nif True:\n    main()",
    "import sys\nfrom collections import defaultdict\n\ndef main():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0, 1 if len(s1) > len(s2) else 2\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        \n        f1, w1 = dfs(s1[1:], s2)\n        f2, w2 = dfs(s1, s2[1:])\n        \n        memo[(s1, s2)] = max(f1 + w1, f2 + w2)\n        return memo[(s1, s2)]\n\n    memo = defaultdict(lambda: -1)\n    result = dfs(s1, s2)\n    \n    if result == -1:\n        print(-1)\n    else:\n        print(result[0], result[1])\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 1 + max(dfs(s1[1:], s2), dfs(s1, s2[1:]))\n        memo[(s1, s2)] = res\n        return res\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res == n * (n - 1) // 2:\n        print(res, 1)\n    else:\n        print(res, 2)\n\nif True:\n    main()",
    "import sys\nfrom collections import deque\n\ndef parse_input():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n    return n, k1, s1, k2, s2\n\ndef find_cycle(n, k1, s1, k2, s2):\n    visited = set()\n    queue = deque([(s1, s2)])\n    \n    while queue:\n        current_s1, current_s2 = queue.popleft()\n        \n        if tuple(current_s1) == tuple(current_s2):\n            return True\n        \n        for i in range(k1):\n            new_s1 = current_s1[:i] + current_s1[i+1:]\n            new_s2 = current_s2[:i] + current_s2[i+1:]\n            if tuple(new_s1) not in visited:\n                visited.add(tuple(new_s1))\n                queue.append((new_s1, current_s2))\n        \n        for j in range(k2):\n            new_s1 = current_s1[:j] + current_s1[j+1:]\n            new_s2 = current_s2[:j] + current_s2[j+1:]\n            if tuple(new_s2) not in visited:\n                visited.add(tuple(new_s2))\n                queue.append((current_s1, new_s2))\n    \n    return False\n\ndef solve(n, k1, s1, k2, s2):\n    if find_cycle(n, k1, s1, k2, s2):\n        print(10**6, 2)\n    else:\n        print(-1)\n\nif True:\n    n, k1, s1, k2, s2 = parse_input()\n    solve(n, k1, s1, k2, s2)",
    "def solve(n, k1, l1, k2, l2):\n    from collections import defaultdict\n    from math import factorial\n    \n    # Calculate the total number of states\n    total_states = factorial(n)\n    \n    # Create a dictionary to store the number of times each state appears\n    state_count = defaultdict(int)\n    \n    # Initialize the current state with the two decks\n    current_state = tuple(l1) + tuple(l2)\n    state_count[current_state] += 1\n    \n    # Perform the fights until we reach a cycle or run out of states\n    for _ in range(total_states):\n        # Find the next state by taking the top card from each deck\n        next_state = tuple(current_state[-k1:]) + tuple(current_state[:-k1])\n        \n        # Increment the count of the next state\n        state_count[next_state] += 1\n        \n        # Check if we've seen this state before\n        if state_count[next_state] > 1:\n            # This means we have found a cycle\n            break\n        \n        # Move to the next state\n        current_state = next_state\n    \n    # Determine the winner based on the number of fights\n    if state_count[current_state] == 1:\n        winner = 1\n    elif state_count[current_state] == 2:\n        winner = 2\n    else:\n        winner = -1\n    \n    # Print the result\n    print(state_count[current_state], winner)\n\n# Read input\nn = int(input())\nk1 = int(input())\nl1 = list(map(int, input().split()))\nk2 = int(input())\nl2 = list(map(int, input().split()))\n\n# Solve the problem\nsolve(n, k1, l1, k2, l2)",
    "import sys\nfrom collections import defaultdict, deque\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(k1):\n            for j in range(i+1, k1):\n                new_state = tuple(sorted(cards1[:i] + cards1[j:] + cards2))\n                if dfs(new_state):\n                    return True\n        for i in range(k2):\n            for j in range(i+1, k2):\n                new_state = tuple(sorted(cards1 + cards2[:i] + cards2[j:]))\n                if dfs(new_state):\n                    return True\n        return False\n    \n    visited = set()\n    cycles = []\n    if dfs(tuple(cards1) + tuple(cards2)):\n        print(len(cycles), 1)\n    else:\n        print(-1)\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    k2 = data[2]\n    cards1 = data[3:k1+3]\n    cards2 = data[k1+3:]\n    solve(n, k1, k2, cards1, cards2)",
    "import sys\nfrom collections import defaultdict\n\ndef parse_input():\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    k2 = int(sys.stdin.readline())\n    s2 = list(map(int, sys.stdin.readline().split()))\n    return n, k1, s1, k2, s2\n\ndef find_cycle(n, k1, s1, k2, s2):\n    visited = set()\n    stack = [(s1, s2)]\n    \n    while stack:\n        current_s1, current_s2 = stack.pop()\n        \n        if tuple(current_s1) == tuple(current_s2):\n            return True\n        \n        visited.add(tuple(current_s1))\n        \n        next_s1 = current_s1[1:] + [current_s1[0]]\n        next_s2 = current_s2[1:] + [current_s2[0]]\n        \n        if tuple(next_s1) not in visited:\n            stack.append((next_s1, current_s2))\n        if tuple(next_s2) not in visited:\n            stack.append((current_s1, next_s2))\n    \n    return False\n\ndef solve(n, k1, s1, k2, s2):\n    if find_cycle(n, k1, s1, k2, s2):\n        print(10**6, 2)\n    else:\n        print(-1)\n\nif True:\n    n, k1, s1, k2, s2 = parse_input()\n    solve(n, k1, s1, k2, s2)",
    "def solve(n):\n    def dfs(state, depth):\n        nonlocal cycles\n        if state in seen:\n            cycles.append(depth)\n            return True\n        seen.add(state)\n        for i in range(1, n + 1):\n            new_state = tuple(sorted(state[:i] + state[i+1:] + (state[i],)))\n            if dfs(new_state, depth + 1):\n                return True\n        return False\n    \n    seen = set()\n    cycles = []\n    dfs(tuple(range(1, n + 1)), 0)\n    \n    if len(cycles) == 0:\n        return -1\n    else:\n        return len(cycles) - 1, 1 if len(cycles) % 2 == 1 else 2\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n    \n    result = solve(n)\n    print(*result)",
    "import sys\nfrom typing import List\n\ndef solve(n: int, k1: int, k2: int, cards1: List[int], cards2: List[int]) -> str:\n    def dfs(state):\n        nonlocal count\n        if state == 0:\n            return\n        count += 1\n        next_state = (state * 10 + cards1.pop(0)) % (n + 1)\n        dfs(next_state)\n        next_state = (state * 10 + cards2.pop(0)) % (n + 1)\n        dfs(next_state)\n\n    count = 0\n    dfs((k1 + k2) * 10)\n    if count < (n + 1) ** 2:\n        return f\"{count} 2\"\n    else:\n        return \"-1\"\n\nif True:\n    input_data = sys.stdin.read().split()\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    k2 = int(input_data[2])\n    cards1 = list(map(int, input_data[3:k1+3]))\n    cards2 = list(map(int, input_data[k1+3:]))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(result)",
    "import sys\nfrom collections import deque\n\ndef solve(n, k1, values1, k2, values2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(k1):\n            for j in range(i + 1, k1):\n                new_state = tuple(sorted(values1[:i] + values1[j:] + values2))\n                if dfs(new_state):\n                    return True\n        for i in range(k2):\n            for j in range(i + 1, k2):\n                new_state = tuple(sorted(values1 + values2[:i] + values2[j:]))\n                if dfs(new_state):\n                    return True\n        return False\n    \n    visited = set()\n    cycles = []\n    if dfs(tuple(sorted(values1 + values2))):\n        print(len(cycles) * 2, 1)\n    else:\n        print(-1)\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    values1 = data[2:k1+2]\n    k2 = data[k1+2]\n    values2 = data[k1+2:]\n    solve(n, k1, values1, k2, values2)",
    "import sys\nfrom collections import defaultdict\nfrom math import factorial\n\ndef solve(n, k1, k2):\n    # Calculate the total number of states\n    total_states = factorial(n)\n    \n    # Initialize a dictionary to keep track of visited states\n    visited = defaultdict(int)\n    \n    # Function to perform DFS and check for cycles\n    def dfs(state):\n        visited[state] += 1\n        # Check if we've seen this state before\n        if visited[state] > 1:\n            return True\n        # Try all possible moves\n        for i in range(k1):\n            for j in range(k2):\n                new_state = state ^ (1 << i) ^ (1 << j)\n                if dfs(new_state):\n                    return True\n        return False\n    \n    # Perform DFS starting from the initial state\n    if dfs(0):\n        print(total_states // 2, 2)\n    else:\n        print(-1)\n\nif True:\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    k2 = int(sys.stdin.readline())\n    solve(n, k1, k2)",
    "from collections import deque\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(k1):\n            for j in range(i + 1, k1):\n                new_state = tuple(sorted(cards1[:i] + cards1[j:] + cards2))\n                if dfs(new_state):\n                    return True\n        for i in range(k2):\n            for j in range(i + 1, k2):\n                new_state = tuple(sorted(cards1 + cards2[:i] + cards2[j:]))\n                if dfs(new_state):\n                    return True\n        return False\n    \n    visited = set()\n    cycles = []\n    if dfs(tuple(cards1) + tuple(cards2)):\n        print(len(cycles), 1)\n    else:\n        print(-1)\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n    solve(n, k1, k2, cards1, cards2)",
    "import sys\nfrom collections import Counter\n\ndef solve():\n    n = int(sys.stdin.readline())\n    s1 = list(map(int, sys.stdin.readline().split()))\n    s2 = list(map(int, sys.stdin.readline().split()))\n\n    def get_state(s):\n        return tuple(sorted(s))\n\n    def dfs(state, visited):\n        if state in visited:\n            return True\n        visited.add(state)\n        for i in range(n):\n            for j in range(i+1, n):\n                new_s1 = s1[:i] + s1[i+1:j] + s1[j:]\n                new_s2 = s2[:j] + s2[j+1:i] + s2[i:]\n                if dfs(get_state(new_s1), visited) or dfs(get_state(new_s2), visited):\n                    return True\n        return False\n\n    visited = set()\n    if dfs(get_state(s1), visited):\n        print(len(visited) - 1, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "import sys\nfrom collections import deque\n\ndef solve(n, k1, cards1, k2, cards2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(k1):\n            for j in range(i+1, k1):\n                new_state = tuple(sorted(cards1[:i] + cards1[j:] + cards2))\n                if dfs(new_state):\n                    return True\n        for i in range(k2):\n            for j in range(i+1, k2):\n                new_state = tuple(sorted(cards1 + cards2[:i] + cards2[j:]))\n                if dfs(new_state):\n                    return True\n        return False\n    \n    visited = set()\n    cycles = []\n    if dfs(tuple(cards1) + tuple(cards2)):\n        print(len(cycles), 1)\n    else:\n        print(-1)\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2:]\n    solve(n, k1, cards1, k2, cards2)",
    "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\n\ndef solve(n, k1, k2, cards1, cards2):\n    def dfs(i, j):\n        nonlocal ans\n        if i == len(cards1) or j == len(cards2):\n            ans += 1\n            return\n        if dp[i][j] != -1:\n            return dp[i][j]\n        dp[i][j] = max(dfs(i+1, j), dfs(i, j+1))\n        if cards1[i] > cards2[j]:\n            dp[i][j] = max(dp[i][j], dfs(i+1, j+1) + 1)\n        return dp[i][j]\n\n    ans = 0\n    dp = [[-1]*n for _ in range(n)]\n    dfs(0, 0)\n    if ans < n * (n + 1) // 2:\n        print(ans, 2)\n    else:\n        print(-1)\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = n - k1\n    cards1 = list(map(int, input().split()))\n    cards2 = list(map(int, input().split()))\n    solve(n, k1, k2, cards1, cards2)",
    "import sys\nfrom collections import deque\n\ndef solve(n, s1, s2):\n    def dfs(state):\n        nonlocal visited, cycles\n        if state in visited:\n            cycles.append(state)\n            return True\n        visited.add(state)\n        for i in range(len(s1)):\n            for j in range(i+1, len(s1)):\n                new_state = tuple(sorted([s1[i], s1[j]])) + tuple(s2)\n                if dfs(new_state):\n                    return True\n        return False\n    \n    visited = set()\n    cycles = []\n    dfs(tuple(s1) + tuple(s2))\n    \n    if cycles:\n        return len(cycles) - 1, 2\n    else:\n        return len(visited), 1\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    s1 = data[1:n]\n    s2 = data[n:]\n    result = solve(n, s1, s2)\n    print(*result)",
    "def solve(n, k1, k2, cards1, cards2):\n    from collections import defaultdict\n    from functools import lru_cache\n    \n    @lru_cache(None)\n    def dfs(state):\n        if len(cards1) == 0 or len(cards2) == 0:\n            return 0\n        \n        max_fights = 0\n        for i in range(len(cards1)):\n            for j in range(len(cards2)):\n                new_state = tuple(sorted([cards1[i], cards2[j]]))\n                if new_state != state:\n                    max_fights = max(max_fights, 1 + dfs(new_state))\n        \n        return max_fights\n    \n    total_fights = dfs(tuple(cards1))\n    \n    if total_fights > 10**6:\n        print(-1)\n    else:\n        print(total_fights, 1)\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    cards1 = list(map(int, input().split()))\n    cards2 = list(map(int, input().split()))\n    solve(n, k1, k2, cards1, cards2)",
    "import sys\n\ndef solve():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = max(dfs(s1[1:], s2), dfs(s1, s2[1:]))\n        memo[(s1, s2)] = res + 1\n        return res + 1\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res > 10**6:\n        print(-1)\n    else:\n        print(res, 2)\n\nif True:\n    solve()",
    "import sys\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    res += 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:])\n                    break\n        memo[(s1, s2)] = res\n        return res\n\n    memo = {}\n    res = dfs(s1, s2)\n    if res == 0:\n        print(-1)\n    else:\n        print(res // 2, res % 2)\n\nif True:\n    solve()",
    "import sys\nfrom collections import deque\n\ndef solve(n, k1, k2):\n    cards1 = list(map(int, sys.stdin.readline().split()))\n    cards2 = list(map(int, sys.stdin.readline().split()))\n\n    def get_state(cards1, cards2):\n        return tuple(cards1) + tuple(cards2)\n\n    def dfs(state, visited):\n        if state in visited:\n            return True\n        visited.add(state)\n        for i in range(len(cards1)):\n            for j in range(i + 1, len(cards1)):\n                new_cards1 = cards1[:i] + cards1[i+1:j] + cards1[j:]\n                new_cards2 = cards2[:j] + cards1[j:i] + cards2[i:]\n                if dfs(get_state(new_cards1, new_cards2), visited):\n                    return True\n        return False\n\n    visited = set()\n    if dfs(get_state(cards1, cards2), visited):\n        print(10**6, 2)\n    else:\n        print(-1)\n\nif True:\n    solve(*map(int, sys.stdin.readline().split()))",
    "import sys\nfrom collections import defaultdict\n\ndef solve(n, k1, values1, k2, values2):\n    def dfs(state, depth):\n        nonlocal cycles\n        if state in seen:\n            cycles.append(depth)\n            return True\n        seen.add(state)\n        for i in range(k1):\n            for j in range(i + 1, k1):\n                new_state = tuple(sorted(values1[:i] + values1[j:] + values2))\n                if dfs(new_state, depth + 1):\n                    return True\n        for i in range(k2):\n            for j in range(i + 1, k2):\n                new_state = tuple(sorted(values1 + values2[:i] + values2[j:]))\n                if dfs(new_state, depth + 1):\n                    return True\n        return False\n    \n    seen = set()\n    cycles = []\n    dfs(tuple(values1), 0)\n    \n    if len(cycles) == 0:\n        print(-1)\n    else:\n        max_cycle = max(cycles)\n        print(max_cycle // 2, 1 if max_cycle % 2 == 0 else 2)\n\nif True:\n    input_data = sys.stdin.read().splitlines()\n    n = int(input_data[0])\n    k1 = int(input_data[1])\n    values1 = list(map(int, input_data[2].split()))\n    k2 = int(input_data[3])\n    values2 = list(map(int, input_data[4].split()))\n    solve(n, k1, values1, k2, values2)",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        res = 1 + max(dfs(s1[1:], s2), dfs(s1, s2[1:]))\n        memo[(s1, s2)] = res\n        return res\n\n    memo = defaultdict(int)\n    res = dfs(s1, s2)\n    if res == 0:\n        print(-1)\n    else:\n        print(res // 2, res % 2)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\n\ndef solve(n, k1, cards1, k2, cards2):\n    def dfs(state):\n        nonlocal count\n        if state in seen:\n            return\n        seen.add(state)\n        count += 1\n        for i in range(k1):\n            for j in range(i + 1, k1):\n                for l in range(j + 1, k1):\n                    for m in range(l + 1, k1):\n                        for o in range(m + 1, k1):\n                            for p in range(o + 1, k1):\n                                for q in range(p + 1, k1):\n                                    for r in range(q + 1, k1):\n                                        for s in range(r + 1, k1):\n                                            for t in range(s + 1, k1):\n                                                for u in range(t + 1, k1):\n                                                    for v in range(u + 1, k1):\n                                                        for w in range(v + 1, k1):\n                                                            for x in range(w + 1, k1):\n                                                                for y in range(x + 1, k1):\n                                                                    new_state = tuple(sorted(cards1[:i] + cards1[j:] + cards1[l:] + cards1[m:] + cards1[o:] + cards1[p:] + cards1[q:] + cards1[r:] + cards1[s:] + cards1[t:] + cards1[u:] + cards1[v:] + cards1[w:] + cards1[x:] + cards1[y:] + cards2[:j] + cards2[k:] + cards2[l:] + cards2[m:] + cards2[o:] + cards2[p:] + cards2[q:] + cards2[r:] + cards2[s:] + cards2[t:] + cards2[u:] + cards2[v:] + cards2[w:] + cards2[x:] + cards2[y:] + cards2[z]))\n                                                                    dfs(new_state)\n\n    count = 0\n    seen = set()\n    dfs(tuple(cards1))\n    return count\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2:]\n    result = solve(n, k1, cards1, k2, cards2)\n    print(result)",
    "import sys\nfrom collections import deque\n\ndef solve(n):\n    def dfs(state, visited):\n        if state in visited:\n            return True\n        visited.add(state)\n        for i in range(1, n + 1):\n            if i == len(state) or state[i] != state[0]:\n                continue\n            new_state = state[:i] + state[i+1:]\n            if dfs(new_state, visited):\n                return True\n        return False\n    \n    visited = set()\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            state = list(range(1, n + 1))\n            state[i], state[j] = state[j], state[i]\n            if dfs(state, visited):\n                return True\n    return False\n\nif True:\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = n - k1\n    s1 = list(map(int, data[k1 + 1:k1 + k1 + 1 + k1]))\n    s2 = list(map(int, data[k1 + k1 + 1 + k1 + 1:]))\n    if solve(n):\n        print(len(s1) * 2 + len(s2) * 2, 2)\n    else:\n        print(-1)",
    "def solve(n, s1, s2):\n    from collections import defaultdict\n    from functools import lru_cache\n    \n    @lru_cache(None)\n    def dfs(i, j):\n        if i == len(s1) or j == len(s2):\n            return 0\n        \n        if s1[i] > s2[j]:\n            return dfs(i+1, j) + 1\n        elif s1[i] < s2[j]:\n            return dfs(i, j+1) + 1\n        else:\n            return max(dfs(i+1, j), dfs(i, j+1))\n    \n    total_fights = dfs(0, 0)\n    if total_fights == n * (n - 1) // 2:\n        print(total_fights, 1)\n    else:\n        print(total_fights, 2)\n\nif True:\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    solve(n, s1, s2)",
    "import sys\nfrom itertools import combinations\n\ndef solve(n, k1, k2):\n    cards1 = list(range(1, k1 + 1))\n    cards2 = list(range(k1 + 1, k1 + k2 + 1))\n    \n    def get_next_state(state):\n        i, j = state\n        if i == len(cards1) - 1:\n            return (i, j)\n        else:\n            return (i + 1, j)\n    \n    def is_cycle(state):\n        seen = set()\n        while state not in seen:\n            seen.add(state)\n            state = get_next_state(state)\n        return state in seen\n    \n    def count_fights():\n        total_fights = 0\n        for i in range(n + 1):\n            for j in range(i + 1, n + 1):\n                if is_cycle((i, j)):\n                    total_fights += 1\n        return total_fights\n    \n    total_fights = count_fights()\n    if total_fights > 100:\n        print(-1)\n    else:\n        print(total_fights, 2)\n\nif True:\n    n = int(sys.stdin.readline())\n    k1 = int(sys.stdin.readline())\n    k2 = int(sys.stdin.readline())\n    solve(n, k1, k2)",
    "import sys\nfrom collections import deque\n\ndef solve():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        visited = set()\n        queue = deque([(s1, s2)])\n        \n        while queue:\n            curr_s1, curr_s2 = queue.popleft()\n            \n            if tuple(curr_s1) in visited or tuple(curr_s2) in visited:\n                continue\n            \n            visited.add(tuple(curr_s1))\n            visited.add(tuple(curr_s2))\n            \n            if len(curr_s1) == 0 or len(curr_s2) == 0:\n                return 1\n            \n            queue.append((curr_s1[:-1], curr_s2[-1:] + curr_s2[:-1]))\n            queue.append((curr_s1[-1:], curr_s2[:-1] + curr_s2[-1:]))\n        \n        return 0\n    \n    result = dfs(s1, s2)\n    print(result)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\n\ndef solve(n, s1, s2):\n    def dfs(i, j, visited):\n        if i == len(s1) or j == len(s2):\n            return True\n        if (i, j) in visited:\n            return False\n        visited.add((i, j))\n        if s1[i] > s2[j]:\n            return dfs(i+1, j, visited)\n        elif s1[i] < s2[j]:\n            return dfs(i, j+1, visited)\n        else:\n            return dfs(i+1, j+1, visited) or dfs(i+1, j, visited) or dfs(i, j+1, visited)\n\n    visited = set()\n    if dfs(0, 0, visited):\n        return n * (n + 1) // 2, 2\n    else:\n        return -1\n\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    s1 = data[1:n]\n    s2 = data[n:]\n    result = solve(n, s1, s2)\n    print(*result)",
    "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        visited = set()\n        queue = deque([(s1, s2)])\n        \n        while queue:\n            curr_s1, curr_s2 = queue.popleft()\n            \n            if tuple(curr_s1) in visited or tuple(curr_s2) in visited:\n                continue\n            \n            visited.add(tuple(curr_s1))\n            visited.add(tuple(curr_s2))\n            \n            if len(curr_s1) == 0 or len(curr_s2) == 0:\n                return 1\n            \n            queue.append((curr_s1[:-1], curr_s2[-1:] + curr_s2[:-1]))\n            queue.append((curr_s1[-1:], curr_s2[:-1] + curr_s2[-1:]))\n        \n        return 0\n    \n    result = dfs(s1, s2)\n    print(result)\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    def dfs(s1, s2):\n        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        \n        if (s1, s2) in memo:\n            return memo[(s1, s2)]\n        \n        max_fights = 0\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] > s2[j]:\n                    max_fights = max(max_fights, 1 + dfs(s1[:i] + s1[i+1:], s2[:j] + s2[j+1:]))\n        \n        memo[(s1, s2)] = max_fights\n        return max_fights\n    \n    memo = {}\n    max_fights = dfs(s1, s2)\n    if max_fights == 0:\n        print(-1)\n    else:\n        print(max_fights, 1)\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.07317073170731707,
    0.04878048780487805,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.04878048780487805,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.024390243902439025,
    0.0,
    0.024390243902439025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2,
    0.0,
    0.0,
    0.0,
    0.0,
    0.05,
    0.0,
    0.0,
    0.05,
    0.0,
    0.0,
    0.075,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.1,
    0.0,
    0.0,
    0.0,
    0.15,
    0.0,
    0.0,
    0.1,
    0.1,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.1,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    4.918293714523315,
    11.898180723190308,
    19.47954249382019,
    27.183984994888306,
    34.69561719894409,
    41.525821924209595,
    47.167614459991455,
    62.56817078590393,
    69.27214074134827,
    76.01356267929077,
    84.74851536750793,
    90.63813424110413,
    99.2823133468628,
    105.36686968803406,
    113.97688388824463,
    121.39501643180847,
    127.91231346130371,
    134.5344696044922,
    143.72126531600952,
    149.43404722213745,
    158.11417245864868,
    164.34210062026978,
    170.71913313865662,
    176.2843198776245,
    186.90695071220398,
    196.41890835762024,
    204.06627011299133,
    213.05772972106934,
    219.20475912094116,
    226.5861349105835,
    234.13338541984558,
    240.519686460495,
    247.70450448989868,
    253.69648218154907,
    261.425359249115,
    268.99596977233887,
    274.84657192230225,
    281.3842737674713,
    286.74277210235596,
    292.78495502471924,
    298.89615845680237,
    307.5474874973297,
    312.6521382331848,
    326.1940908432007,
    334.1706893444061,
    340.38652896881104,
    347.92229413986206,
    355.448527097702,
    362.171320438385,
    369.9994750022888,
    377.46321415901184
  ],
  "sample times": 51
}