{
  "prompt": "\nQUESTION:\nAmr doesn't like Maths as he finds it really boring, so he usually sleeps in Maths lectures. But one day the teacher suspected that Amr is sleeping and asked him a question to make sure he wasn't.\n\nFirst he gave Amr two positive integers n and k. Then he asked Amr, how many integer numbers x > 0 exist such that:  Decimal representation of x (without leading zeroes) consists of exactly n digits;  There exists some integer y > 0 such that:   $y \\operatorname{mod} k = 0$;  decimal representation of y is a suffix of decimal representation of x.  \n\nAs the answer to this question may be pretty huge the teacher asked Amr to output only its remainder modulo a number m.\n\nCan you help Amr escape this embarrassing situation?\n\n\n-----Input-----\n\nInput consists of three integers n, k, m (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 100, 1 \u2264 m \u2264 10^9).\n\n\n-----Output-----\n\nPrint the required number modulo m.\n\n\n-----Examples-----\nInput\n1 2 1000\n\nOutput\n4\nInput\n2 2 1000\n\nOutput\n45\nInput\n5 3 1103\n\nOutput\n590\n\n\n-----Note-----\n\nA suffix of a string S is a non-empty string that can be obtained by removing some number (possibly, zero) of first characters from S.\n\nTUTORIAL:\nHint: Dynamic programming problem. To handle repetitions we have to construct the number from right to the left and calculate the answer when we reach a number equivalent to 0 modulo k.\n\nSolution: Let's define count(i, j) as a recursive function that calculates the number of numbers consisting of n digits satisfying the conditions of the problem and with a specific suffix of length i, S\u1d62 such that S\u1d62 \u2261 j (mod k).\n\nWe want to avoid repetition so by constructing the number from the right to the left when we reach a state with j = 0 with suffix \u2260 0 we return the answer immediately so any other suffix that contains this suffix won\u2019t be calculated.\n\nSo the base cases are count(n, 0) = 1, count(i, 0) = 9 * 10\u207f\u207b\u2071\u207b\u00b9 : i < n.\n\nSo state transitions will be  \ncount(i, j) = \u2211\u208d\u2093\u208c\u2080 \u209c\u2092 \u2089\u208e count(i + 1, (j + (x * 10\u2071)) % k)  \n(We add a digit to the left).\n\nAnd we can handle j = 0 case coming from a zero suffix easily with a boolean variable we set to true when we use a digit \u2260 0 in constructing the number.\n\nTime complexity: O(n * k)\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    mod = 10**9 + 7\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans % mod\n    \n    result = count(n, 0)\n    print(result)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve(n, k, m):\n    MOD = 10**9 + 7\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(1, 10):\n            if j + (x * 10**i) % k == 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        \n        if j == 0:\n            ans += count(i - 1, 0)\n        \n        return ans % MOD\n    \n    return count(n, 0)\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k, m)\n\n# Print the result\nprint(result)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    print(solve(n, k, m))\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = (dp[i - 1][(j + 1) % k] + 9 * dp[i - 1][j]) % mod\n    \n    ans = 0\n    for j in range(k + 1):\n        if j == 0:\n            ans += dp[n][j]\n        else:\n            ans += (dp[n][(j + 1) % k] + 9 * dp[n][j]) % mod\n    \n    return ans % mod\n\nif True:\n    main()",
    "def solve():\n    n, k, m = map(int, input().split())\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 9 * 10**(n - i - 1)\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i + 1][(j + (x * 10**(i))) % k]\n    \n    ans = sum(dp[n]) % m\n    print(ans)\n\nif True:\n    solve()",
    "def count(n, k, m):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 9 * 10**(i - 1)\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    \n    return dp[n][0] % m\n\ndef main():\n    n, k, m = map(int, input().split())\n    print(count(n, k, m))\n\nif True:\n    main()",
    "from typing import *\nimport sys\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0 and j == 0:\n                continue\n            ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "import sys\nfrom typing import *\nfrom collections import *\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0 and j == 0:\n                continue\n            ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def main():\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))\n\ndef solve(n, k, m):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 9 * 10**(i - 1)\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    \n    return dp[n][0] % m\n\nif True:\n    main()",
    "def count_numbers(n, k, m):\n    MOD = 10**9 + 7\n    \n    def dp(i, j, used_zero):\n        if i == n:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(1, 10):\n            new_j = (j + (x * 10**i)) % k\n            if not used_zero or x != 0:\n                ans += dp(i + 1, new_j, True)\n        \n        return ans % MOD\n    \n    return dp(0, 0, False)\n\ndef main():\n    n, k, m = map(int, input().split())\n    print(count_numbers(n, k, m))\n\nif True:\n    main()",
    "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    result = solve(n, k, m)\n    print(result)\n\ndef solve(n, k, m):\n    MOD = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] = (dp[i][j] + dp[i - 1][(j + (x * 10**(i - 1))) % k]) % MOD\n    \n    return dp[n][0]\n\nif True:\n    main()",
    "def solve(n, k, m):\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    ans = count(n, 0)\n    return ans % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    mod = 10**9 + 7\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans % mod\n    \n    result = count(n, 0)\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    from collections import defaultdict\n    n, k, m = map(int, input().split())\n    dp = defaultdict(lambda: [0] * (k + 1))\n    dp[n][0] = 1\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = sum(dp[i + 1][(j + (x * 10 ** i)) % k] for x in range(10))\n            else:\n                dp[i][j] = sum(dp[i + 1][(j + (x * 10 ** i)) % k] for x in range(10) if x != 0)\n    \n    ans = sum(dp[0]) % m\n    print(ans)\n\nif True:\n    solve()",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(1, min(k + 1, 10)):\n        dp[1][i] = 9\n    \n    # State transitions\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            for x in range(10):\n                if x == 0 and j == 0:\n                    continue\n                new_j = (j + (x * 10**(i - 1))) % k\n                dp[i][new_j] = (dp[i][new_j] + dp[i - 1][j]) % mod\n    \n    # Final result\n    result = sum(dp[n]) % mod\n    return result\n\n# Main function\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve():\n    import sys\n    data = sys.stdin.read().split()\n    n, k, m = int(data[0]), int(data[1]), int(data[2])\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "import sys\n\ndef count(n, k, m):\n    if n == 0:\n        return 1 if k == 0 else 0\n    if n == 1:\n        return 9 if k == 0 else 0\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    \n    return dp[n][0] % m\n\ndef main():\n    input_data = sys.stdin.read().split()\n    n, k, m = map(int, input_data)\n    result = count(n, k, m)\n    print(result)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k, m = map(int, data)\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**(i-1))) % k)\n        return ans\n    \n    n, k, m = map(int, input().split())\n    \n    print(count(n, 0) % m)\n\nif True:\n    solve()",
    "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    dp = defaultdict(lambda: [0] * (k + 1))\n    dp[n][0] = 1\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i + 1][j]\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i + 1][(j + (x * 10 ** i)) % k]\n    \n    result = sum(dp[0]) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n - i - 1)\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n\n    n, k, m = map(int, sys.stdin.readline().split())\n    print(count(n, 0) % m)\n\nif True:\n    solve()",
    "def solve():\n    n, k, m = map(int, input().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(1, 10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        if j == 0:\n            ans += count(i - 1, 0)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def main():\n    t = int(input())\n    for _ in range(t):\n        n, k, m = map(int, input().split())\n        ans = solve(n, k, m)\n        print(ans)\n\ndef solve(n, k, m):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j == 0:\n                continue\n            for x in range(1, 10):\n                if (j + (x * 10**(i - 1))) % k == 0:\n                    dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    return dp[n][0] % m\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input=sys.stdin.read\n    data=input().split()\n    n=int(data[0])\n    k=int(data[1])\n    m=int(data[2])\n    def count(i,j):\n        if i==n:\n            return int(j==0)\n        if j==0:\n            return 9*10**(n-i-1)\n        ans=0\n        for x in range(10):\n            if x!=0:\n                ans+=count(i+1,(j+(x*10**i))%k)\n        return ans\n    print(count(0,0)%m)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(n, k, m):\n    mod = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 9 * 10**(i - 1)\n    \n    # State transitions\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    \n    # Final result\n    result = sum(dp[n]) % mod\n    \n    return result\n\nif True:\n    input_data = sys.stdin.read().split()\n    n, k, m = map(int, input_data)\n    print(solve(n, k, m))",
    "```python\ndef solve():\n    import sys\n    def read_int():\n        return int(sys.stdin.readline())\n    \n    def read_string():\n        return sys.stdin.readline().strip()\n    \n    def read_list():\n        return list(map(int, read_string().split()))\n    \n    def read_matrix():\n        return [read_list() for _ in range(read_int())]\n    \n    def read_tuple():\n        return tuple(read_list())\n    \n    def read_set():\n        return set(read_list())\n    \n    def read_dict():\n        return {k: v for k, v in zip(read_list(), read_list())}\n    \n    def read_map():\n        return {k: v for k, v in zip(read_list(), read_list())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def read_dicts():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_maps():\n        return {k: v for k, v in zip(read_lists(), read_lists())}\n    \n    def read_ints():\n        return map(int, read_string().split())\n    \n    def read_strings():\n        return read_string().split()\n    \n    def read_lists():\n        return list(map(int, read_string().split()))\n    \n    def read_matrices():\n        return [read_lists() for _ in range(read_int())]\n    \n    def read_tuples():\n        return tuple(read_lists())\n    \n    def read_sets():\n        return set(read_lists())\n    \n    def",
    "from collections import defaultdict\n\ndef solve():\n    n, k, m = map(int, input().split())\n    \n    dp = defaultdict(lambda: [0] * (k + 1))\n    dp[n][0] = 1\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i + 1][j]\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i + 1][(j + (x * 10 ** i)) % k]\n    \n    result = sum(dp[0]) % m\n    print(result)\n\nif True:\n    solve()",
    "def count(n, j, m):\n    if n == 0:\n        return 1 if j == 0 else 0\n    if j == 0:\n        return 9 * 10**(n-1)\n    ans = 0\n    for x in range(10):\n        if x != 0:\n            ans += count(n-1, (j + (x * 10**(n-1))) % m, m)\n    return ans\n\ndef solve():\n    n, k, m = map(int, input().split())\n    print(count(n, 0, m))\n\nif True:\n    solve()",
    "def solve():\n    n, k, m = map(int, input().split())\n    mod = 10**9 + 7\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**(i-1))) % k)\n        return ans % mod\n    \n    print(count(n, 0))\n\nif True:\n    solve()",
    "def main():\n    import sys\n    data = sys.stdin.read().split()\n    n, k, m = int(data[0]), int(data[1]), int(data[2])\n    print(solve(n, k, m))\n\ndef solve(n, k, m):\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    return count(n, 0) % m\n\nif True:\n    main()",
    "import sys\n\ndef solve():\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    n, k, m = map(int, input().split())\n    MOD = 10**9 + 7\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**(i-1))) % k)\n        return ans % MOD\n    \n    result = count(n, 0)\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    import math\n    n, k, m = map(int, input().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    n, k, m = map(int, input().split())\n    \n    @cache\n    def count(i, j):\n        if i == 0:\n            return j == 0\n        \n        ans = 0\n        for x in range(1, 10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        if j != 0:\n            ans += count(i - 1, 0)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int,input().split()))\n    n, k, m = data\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    ans = count(n, 0)\n    print(ans % m)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "from typing import *\nimport math\n\ndef solve(n: int, k: int, m: int) -> int:\n    MOD = 10**9 + 7\n    \n    def count(i: int, j: int, has_zero_suffix: bool) -> int:\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            new_j = (j + x * 10**i) % k\n            if new_j == 0 and not has_zero_suffix:\n                continue\n            ans += count(i - 1, new_j, has_zero_suffix or x != 0)\n        \n        return ans % MOD\n    \n    return count(n, 0, False)\n\n# Main function to read input and call solve()\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def count(n, k, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 9\n    \n    dp = [[0] * k for _ in range(n)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n):\n        dp[i][0] = 9 * 10**(i-1)\n    \n    # Fill DP table\n    for i in range(1, n):\n        for j in range(k):\n            for x in range(10):\n                new_j = (j + (x * 10**i)) % k\n                if new_j != 0:\n                    dp[i][new_j] += dp[i-1][j]\n    \n    # Calculate result\n    result = sum(dp[n-1]) % m\n    return result\n\ndef main():\n    n, k, m = map(int, input().split())\n    print(count(n, k, m))\n\nif True:\n    main()",
    "def solve(n, k, m):\n    def count(i, j, used_zero=False):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if used_zero and j == 0:\n            return 0\n        ans = 0\n        for x in range(1, 10):\n            if not used_zero and x == 0:\n                continue\n            new_j = (j + (x * 10 ** i)) % k\n            ans += count(i - 1, new_j, used_zero or x != 0)\n        return ans\n    \n    return count(n, 0, False) % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve():\n    from sys import stdin, stdout\n    input = stdin.read\n    data = input().split()\n    n, k, m = map(int, data)\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    ans = count(n, 0) % m\n    stdout.write(str(ans))\n\nif True:\n    solve()",
    "def solve(n, k, m):\n    mod = pow(10, 9) + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(k + 1):\n        dp[1][i] = 9\n    \n    # Fill DP table\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            for x in range(10):\n                if x == 0 and j == 0:\n                    continue\n                new_j = (j + (x * 10**(i - 1))) % k\n                dp[i][new_j] = (dp[i][new_j] + dp[i - 1][j]) % mod\n    \n    # Calculate result\n    result = sum(dp[n]) % mod\n    return result\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve and print output\nprint(solve(n, k, m))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k, m = data\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "import sys\nfrom functools import lru_cache\n\ndef solve():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    @lru_cache(None)\n    def count(i, j):\n        if i == 0:\n            return j == 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    solve()",
    "from typing import *\nfrom collections import *\n\ndef solve(n: int, k: int, m: int) -> int:\n    MOD = 10**9 + 7\n    \n    def count(i: int, j: int, has_zero_suffix: bool) -> int:\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            new_j = (j + x * 10**i) % k\n            if new_j == 0 and not has_zero_suffix:\n                continue\n            ans += count(i - 1, new_j, has_zero_suffix or x != 0)\n        \n        return ans % MOD\n    \n    return count(n, 0, False)\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "import sys\n\ndef main():\n    n, k, m = map(int, sys.stdin.readline().split())\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        \n        return ans\n    \n    result = count(n, 0) % m\n    print(result)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    def readline(): return input().strip()\n    \n    n, k, m = map(int, readline().split())\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][0]\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n    \n    ans = sum(dp[n]) % m\n    \n    print(ans)\n\nif True:\n    solve()",
    "def count(n, k, m):\n    MOD = 10**9 + 7\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 9 * 10**(i - 1)\n    \n    # State transitions\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i - 1][(j + (x * 10**(i - 1))) % k]\n                        dp[i][j] %= MOD\n    \n    return dp[n][0]\n\ndef main():\n    n, k, m = map(int, input().split())\n    print(count(n, k, m))\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(i - 1, (j + (x * 10**(i-1))) % k)\n        return ans\n\n    n, k, m = map(int, input().split())\n    print(count(n, 0) % m)\n\nif True:\n    solve()",
    "def solve():\n    n, k, m = map(int, input().split())\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                dp[i][j] = 9 * 10**(n - i - 1)\n            else:\n                for x in range(10):\n                    if x != 0:\n                        dp[i][j] += dp[i + 1][(j + (x * 10**(i))) % k]\n    \n    result = sum(dp[n]) % m\n    \n    print(result)\n\nif True:\n    solve()",
    "def solve(n, k, m):\n    MOD = 1_000_000_007\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(1, 10):\n            if j + (x * 10**i) % k == 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        \n        return ans % MOD\n    \n    return count(n, 0)\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "from typing import *\nimport collections\n\ndef solve(n: int, k: int, m: int) -> int:\n    MOD = 10**9 + 7\n    \n    @cache\n    def count(i: int, j: int) -> int:\n        if i == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(1, 10):\n            if j + (x * 10**i) % k == 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        \n        if j == 0:\n            ans += count(i - 1, 0)\n        \n        return ans % MOD\n    \n    return count(n, 0)\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.075,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    7.225457191467285,
    12.95821762084961,
    31.661076068878174,
    51.41276001930237,
    59.178003787994385,
    76.98587369918823,
    92.83278369903564,
    96.99574589729309,
    105.07227420806885,
    121.70121550559998,
    140.17354226112366,
    153.738422870636,
    170.159428358078,
    178.22258830070496,
    197.9793038368225,
    214.08304071426392,
    232.06517219543457,
    248.39099287986755,
    254.90793418884277,
    262.09624671936035,
    276.10222339630127,
    282.4011285305023,
    298.3868842124939,
    302.3020896911621,
    311.8747127056122,
    357.05096793174744,
    365.5198929309845,
    379.434996843338,
    385.5797255039215,
    390.31861186027527,
    406.35726952552795,
    412.77087116241455,
    418.79182481765747,
    424.7375822067261,
    428.2037568092346,
    443.5071964263916,
    462.30992889404297,
    480.6769063472748,
    497.16294050216675,
    511.1505947113037,
    527.768232345581,
    543.3446841239929,
    560.9300162792206,
    568.9493358135223,
    584.7481770515442,
    602.1326551437378,
    620.4732577800751,
    634.4358341693878,
    641.5248837471008,
    658.3794233798981,
    676.2532505989075
  ],
  "sample times": 51
}