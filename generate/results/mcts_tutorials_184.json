{
  "prompt": "\nQUESTION:\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n\n-----Examples-----\nInput\n1 4 2\n\nOutput\n6\n\nInput\n5 5 5\n\nOutput\n14\n\nInput\n0 2 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.\n\nTUTORIAL:\nHint: Dynamic programming problem. To handle repetitions we have to construct the number from right to the left and calculate the answer when we reach a number equivalent to 0 modulo k.\n\nSolution: Let's define count(i, j) as a recursive function that calculates the number of numbers consisting of n digits satisfying the conditions of the problem and with a specific suffix of length i, S\u1d62 such that S\u1d62 \u2261 j (mod k).\n\nWe want to avoid repetition so by constructing the number from the right to the left when we reach a state with j = 0 with suffix \u2260 0 we return the answer immediately so any other suffix that contains this suffix won\u2019t be calculated.\n\nSo the base cases are count(n, 0) = 1, count(i, 0) = 9 * 10\u207f\u207b\u2071\u207b\u00b9 : i < n.\n\nSo state transitions will be  \ncount(i, j) = \u2211\u208d\u2093\u208c\u2080 \u209c\u2092 \u2089\u208e count(i + 1, (j + (x * 10\u2071)) % k)  \n(We add a digit to the left).\n\nAnd we can handle j = 0 case coming from a zero suffix easily with a boolean variable we set to true when we use a digit \u2260 0 in constructing the number.\n\nTime complexity: O(n * k)\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def count(n, j, k):\n    if n == 0:\n        return 1 if j == 0 else 0\n    ans = 0\n    for x in range(10):\n        if j + (x * 10**(n-1)) % k == 0:\n            ans += count(n - 1, 0, k)\n        elif j != 0:\n            ans += count(n - 1, j + (x * 10**(n-1)), k)\n    return ans\n\ndef solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n    if right > a:\n        right -= a\n    return count(left + right, 0, 10)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def main():\n    l, r, a = map(int, input().split())\n    max_team_size = max(l // 2, r // 2)\n    if a > 0:\n        max_team_size += min(a, max_team_size)\n    print(max_team_size)\n\nif True:\n    main()",
    "```python\ndef solve():\n    l, r, a = map(int, input().split())\n    total = l + r + a\n    if total % 2 != 0:\n        print(0)\n        return\n    max_team_size = 0\n    for i in range(total // 2):\n        for j in range(10):\n            if i == 0 and j == 0:\n                continue\n            if i > 0 and j == 0:\n                break\n            if i > 0 and j == 10:\n                break\n            if i > 0 and j == 100:\n                break\n            if i > 0 and j == 1000:\n                break\n            if i > 0 and j == 10000:\n                break\n            if i > 0 and j == 100000:\n                break\n            if i > 0 and j == 1000000:\n                break\n            if i > 0 and j == 10000000:\n                break\n            if i > 0 and j == 100000000:\n                break\n            if i > 0 and j == 1000000000:\n                break\n            if i > 0 and j == 10000000000:\n                break\n            if i > 0 and j == 100000000000:\n                break\n            if i > 0 and j == 1000000000000:\n                break\n            if i > 0 and j == 10000000000000:\n                break\n            if i > 0 and j == 100000000000000:\n                break\n            if i > 0 and j == 1000000000000000:\n                break\n            if i > 0 and j == 10000000000000000:\n                break\n            if i > 0 and j == 100000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000",
    "import sys\n\ndef solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    input_data = sys.stdin.read().strip()\n    l, r, a = map(int, input_data.split())\n    result = solve(l, r, a)\n    print(result)",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(1, min(l, r) + 1):\n        total += count(i, 0)\n    \n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    mod = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= mod\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "from typing import *\nimport sys\n\ndef solve(l: int, r: int, a: int) -> int:\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    l, r, a = data\n    result = solve(l, r, a)\n    print(result)",
    "def solve(l, r, a):\n    def count(i, j):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * 10**(n-i-1)\n        ans = 0\n        for x in range(10):\n            if j + (x * 10**i) % k == 0:\n                ans += count(i - 1, (j + (x * 10**i)) % k)\n        return ans\n    \n    n = l + r + a\n    k = 2\n    ans = 0\n    for i in range(n // 2):\n        if i % 2 == 0:\n            ans += count(i, 0)\n        else:\n            ans += count(i, 1)\n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def count(i, j, k):\n    if i == 0:\n        return 1 if j == 0 else 0\n    ans = 0\n    for x in range(10):\n        if j + (x * 10 ** i) % k == 0:\n            ans += count(i - 1, (j + (x * 10 ** i)) % k, k)\n    return ans\n\ndef solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    total //= 2\n    max_team_size = 0\n    for i in range(total + 1):\n        for j in range(i + 1):\n            k = (total - i - j) // 2\n            if k >= 0:\n                max_team_size = max(max_team_size, count(i, j, k))\n    return max_team_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = (dp[i - 1][j] * 9) % MOD\n            else:\n                dp[i][j] = (dp[i - 1][(j + 1) % 10] + dp[i - 1][(j - 1) % 10]) % MOD\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n    \n    return ans % MOD\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10 ** 9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    l, r, a = data\n    \n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    max_size = 0\n    for i in range(l + r + a + 1):\n        if i % 2 == 0:\n            max_size = max(max_size, count(i // 2, 0))\n    \n    print(max_size)\n\nif True:\n    solve()",
    "def solve(l, r, a):\n    def count(n, j, used_left, used_right):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used_left and x != 0:\n                ans += count(n - 1, (j + x) % k, True, used_right)\n            elif not used_right and x != 0:\n                ans += count(n - 1, (j + x) % k, used_left, True)\n            else:\n                ans += count(n - 1, (j + x) % k, used_left, used_right)\n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    total //= 2\n    return count(total, 0, False, False)\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j, used_left, used_right):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used_left and x != 0:\n                ans += count(i - 1, (j + x) % k, True, used_right)\n            elif not used_right and x != 0:\n                ans += count(i - 1, (j + x) % k, used_left, True)\n            else:\n                ans += count(i - 1, (j + x) % k, used_left, used_right)\n        return ans\n    \n    k = 10\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    total //= 2\n    used_left = False\n    used_right = False\n    return count(total, 0, used_left, used_right)\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    l, r, a = data\n    print(max_team(l, r, a))\n\ndef max_team(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(r + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, r + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j + 1]) % MOD\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][(j - 1) % 10]) % MOD\n    \n    total = 0\n    for i in range(l + r + a):\n        if i % 2 == 0:\n            total += dp[r][i // 2]\n    \n    return total % MOD\n\nif True:\n    main()",
    "def solve(l, r, a):\n    mod = 1000000007\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = (dp[i - 1][j] * 9) % mod\n            else:\n                dp[i][j] = (dp[i - 1][(j + 1) % 10] + dp[i - 1][(j - 1) % 10]) % mod\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n    \n    return ans % mod\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1_000_000_007\n    dp = [[0] * MOD for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(MOD):\n            if j == 0:\n                dp[i][j] = dp[i - 1][(j + 1) % MOD]\n            else:\n                dp[i][j] = (dp[i - 1][(j + 1) % MOD] + 9 * dp[i - 1][j]) % MOD\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if j == 0 and n > 0:\n            return 0\n        if n == 0:\n            return 1\n        ans = 0\n        for x in range(10):\n            if x != 0 or j != 0:\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(1, min(l, r) + 1):\n        total += count(i, 0)\n    total += count(min(l, r), 0) * (l + r + a)\n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def count(n, j):\n    if n == 0:\n        return 1 if j == 0 else 0\n    ans = 0\n    for x in range(10):\n        if j + (x * 10**(n-1)) % k == 0:\n            ans += count(n-1, (j + (x * 10**(n-1))) % k)\n    return ans\n\ndef solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    max_team_size = 0\n    for i in range(total // 2):\n        for j in range(k):\n            if count(i, j) > 0:\n                max_team_size = max(max_team_size, 2 * i + 2 * count(i, j))\n    return max_team_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        \n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans = (ans + count(n - 1, (j + (x * 10**(n - 1))) % MOD)) % MOD\n        \n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left = count(total // 2, 0)\n    right = count(total // 2, 0)\n    \n    return (left * right) % MOD\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    mod = 10 ** 9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= mod\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        nonlocal dp\n        if n == 0:\n            return 1 if j == 0 else 0\n        if dp[n][j] != -1:\n            return dp[n][j]\n        ans = 0\n        for x in range(10):\n            if j == 0 and x == 0:\n                continue\n            ans += count(n - 1, (j + (x * 10**(n - 1))) % k)\n        dp[n][j] = ans\n        return ans\n    \n    k = 10\n    dp = [[-1] * k for _ in range(101)]\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left = min(total // 2, l)\n    right = min(total // 2, r)\n    \n    result = 0\n    for i in range(left, right + 1):\n        for j in range(k):\n            if j == 0 and i > 0:\n                continue\n            result += count(i, (j + (i * 10**(i - 1))) % k)\n    \n    return result\n\n# Example usage\nprint(solve(1, 4, 2))\nprint(solve(5, 5, 5))\nprint(solve(0, 2, 0))",
    "def solve(l, r, a):\n    def count(n, j, zero_suffix=False):\n        if n == 0:\n            return 1 if j == 0 else 0\n        if zero_suffix and j == 0:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if x != 0 or not zero_suffix:\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(1, min(l, r) // 2 + 1):\n        total += count(i, 0) * count(min(r - i, l - i), 0)\n    total += count((l + r) // 2, 0) * count((l + r) // 2, 0)\n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal mod\n        if i == 0:\n            return 1 if j == 0 else 0\n        res = 0\n        for x in range(10):\n            if j + (x * 10 ** i) % mod == 0:\n                res += count(i - 1, (j + (x * 10 ** i)) % mod)\n        return res\n    \n    mod = 10 ** 9 + 7\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    if left > l or right > r:\n        return 0\n    return count(left, 0)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def main():\n    def solve(l, r, a):\n        MOD = 10**9 + 7\n        dp = [[0] * 10 for _ in range(l + r + a + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, l + r + a + 1):\n            for j in range(10):\n                if j == 0:\n                    dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n                else:\n                    dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n        \n        ans = 0\n        for i in range(l + r + a + 1):\n            if dp[i][0] > 0:\n                ans += dp[i][0]\n        \n        return ans % MOD\n    \n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))\n\nif True:\n    main()",
    "def solve(l: int, r: int, a: int) -> int:\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans = (ans + count(n - 1, (j + (x * 10**(n - 1))) % MOD)) % MOD\n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left = count(total // 2, 0)\n    right = count(total // 2, 0)\n    \n    return (left * right) % MOD\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print the result\nprint(solve(l, r, a))",
    "def solve(l,r,a):\n    def count(n,j,k):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j + (x * 10**(n-1)) % k == 0:\n                ans += count(n-1,(j + (x * 10**(n-1))) % k,k)\n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total - left\n    if left > r:\n        return 0\n    if right > a:\n        return 0\n    return count(left,right,10)\n\nif True:\n    l,r,a = map(int,input().split())\n    print(solve(l,r,a))",
    "import sys\nfrom typing import *\ndef solve(l: int, r: int, a: int) -> int:\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n            ans %= MOD\n    \n    return ans\nif True:\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    l, r, a = data\n    print(solve(l, r, a))",
    "```python\ndef solve(l, r, a):\n    def count(n, j, use_left):\n        if n == 0:\n            return 1 if j == 0 else 0\n        if j == 0 and not use_left:\n            return 0\n        ans = 0\n        for x in range(10):\n            if use_left:\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k, False)\n            else:\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k, True)\n        return ans\n    \n    k = 10\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:\n        return 0\n    if left > a:\n        left -= a\n        right += a\n    if right > a:\n        right -= a\n        left += a\n    if left > l or right > r:",
    "def solve(l, r, a):\n    def count(i, j, use_left):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0 and not use_left:\n            return 0\n        ans = 0\n        for x in range(10):\n            if use_left:\n                ans += count(i - 1, (j + x) % k, False)\n            else:\n                ans += count(i - 1, (j + x) % k, True)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(k):\n        total += count(l + r + a, i, True)\n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        if j == 0 and i > 0:\n            return 0\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    if left <= l and right <= r:\n        return count(left, 0) * count(right, 0) * count(a, 0)\n    elif left <= l and right <= r + a:\n        return count(left, 0) * count(right, 0) * count(a, 0) + count(left, 0) * count(r + a, 0) * count(a, 0)\n    elif left <= l + a and right <= r:\n        return count(left, 0) * count(right, 0) * count(a, 0) + count(left + a, 0) * count(right, 0) * count(a, 0)\n    else:\n        return count(left, 0) * count(right, 0) * count(a, 0) + count(left + a, 0) * count(right, 0) * count(a, 0)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j, used):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used[x]:\n                if j == 0 and x != 0:\n                    continue\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k, used | {x})\n        return ans\n    \n    k = 10\n    used = [False] * 10\n    ans = count(l + r + a, 0, used)\n    return ans\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0 and j == 0:\n            return 1\n        if n == 0:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    max_size = 0\n    for i in range(1, min(l, r) + 1):\n        for j in range(k):\n            if count(i, j) > max_size:\n                max_size = count(i, j)\n    return max_size\n\n# Example usage:\nprint(solve(1, 4, 2))\nprint(solve(5, 5, 5))\nprint(solve(0, 2, 0))",
    "def solve(l, r, a):\n    MOD = 1e9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = (dp[i - 1][j] * 9) % MOD\n            else:\n                dp[i][j] = (dp[i - 1][j] * 9 + dp[i - 1][(j - 1) % 10]) % MOD\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n    \n    return ans % MOD\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "```python\ndef solve(l, r, a):\n    def count(i, j, used):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used[x]:\n                if j == 0:\n                    used[x] = True\n                    ans += count(i - 1, 0, used)\n                    used[x] = False\n                else:\n                    new_j = (j + x * 10**(i-1)) % k\n                    if new_j == 0:\n                        ans += count(i - 1, 0, used)\n                    else:\n                        ans += count(i - 1, new_j, used)\n        return ans\n    \n    k = 10\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = min(l, r)\n    right = min(r, l)\n    ambidexters = a\n    if left > right:\n        left, right = right, left\n    if left == 0:\n        return 0\n    if right == 0:\n        return 0\n    if ambidexters == 0:\n        return 0\n    if left == 0 and right == 0 and ambidexters == 0:\n        return 0\n    if left == 0 and right == 0 and ambidexters == 1:\n        return 2\n    if left == 0 and right == 1 and ambidexters == 0:\n        return 2\n    if left == 0 and right == 1 and ambidexters == 1:\n        return 4\n    if left == 1 and right == 0 and ambidexters == 0:\n        return 2\n    if left == 1 and right == 0 and ambidexters == 1:\n        return 4\n    if left == 1 and right == 1 and ambidexters == 0:\n        return 4\n    if left == 1 and right == 1 and ambidexters == 1:\n        return 8\n    if left == 2 and right == 0 and ambidexters == 0:\n        return 4\n    if left == 2 and right == 0 and ambidexters == 1:\n        return 8\n    if left == 2 and right == 1 and ambidexters == 0:\n        return 8\n    if left == 2 and right == 1 and ambidexters == 1:\n        return 16\n    if left == 2 and right == 2 and ambidexters == 0:\n        return 16\n    if left == 2 and right == 2 and ambidexters == 1:\n        return 32\n    if left == 3 and right == 0 and ambidexters == 0:\n        return 8\n    if left == 3 and right == 0 and ambidexters == 1:\n        return 16\n    if left == 3 and right == 1 and ambidexters == 0:\n        return 16\n    if left == 3 and right == 1 and ambidexters == 1:\n        return 32\n    if left == 3 and right == 2 and ambidexters == 0:\n        return 32\n    if left == 3 and right == 2 and ambidexters == 1:\n        return 64\n    if left == 4 and right == 0 and ambidexters == 0:\n        return 16\n    if left == 4 and right == 0 and ambidexters == 1:\n        return 32\n    if left == 4 and right == 1 and ambidexters == 0:\n        return 32\n    if left == 4 and right == 1 and ambidexters == 1:\n        return 64\n    if left == 4 and right == 2 and ambidexters == 0:\n        return 64\n    if left == 4 and right == 2 and ambidexters == 1:\n        return 128\n    if left == 5 and right == 0 and ambidexters == 0:\n        return 32\n    if left == 5 and right == 0 and ambidexters == 1:\n        return 64\n    if left == 5 and right == 1 and ambidexters == 0:\n        return 64\n    if left == 5 and right == 1 and ambidexters == 1:\n        return 128\n    if left == 5 and right == 2 and ambidexters == 0:\n        return 128\n    if left == 5 and right == 2 and ambidexters == 1:\n        return 256\n    if left == 6 and right == 0 and ambidexters == 0:\n        return 64\n    if left == 6 and right == 0 and ambidexters == 1:\n        return 128\n    if left == 6 and right == 1 and ambidexters == 0:\n        return 128\n    if left == 6 and right == 1 and ambidexters == 1:\n        return 256\n    if left == 6 and right == 2 and ambidexters == 0:\n        return 256\n    if left == 6 and right == 2 and ambidexters == 1:\n        return 512\n    if left == 7 and right == 0 and ambidexters == 0:\n        return",
    "def solve(l, r, a):\n    MOD = 10**9+7\n    dp = [[0]*MOD for _ in range(l+r+a+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l+r+a+1):\n        for j in range(MOD):\n            if j == 0:\n                dp[i][j] = (dp[i-1][j]*(l+r+a-i)%MOD + dp[i-1][j]*(r+a-i)%MOD + dp[i-1][j]*(a-i)%MOD) % MOD\n            else:\n                dp[i][j] = (dp[i-1][(j-1)*10%MOD]) % MOD\n                \n    return dp[l+r+a][0]\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def count(n, j, used):\n    if n == 0:\n        return 1 if j == 0 else 0\n    ans = 0\n    for x in range(10):\n        if not used[x]:\n            new_j = (j + x * 10**(n-1)) % k\n            if new_j == 0:\n                ans += count(n-1, 0, True)\n            else:\n                ans += count(n-1, new_j, False)\n    return ans\n\ndef solve(l, r, a):\n    k = 10\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total - left\n    if left > r:\n        return 0\n    if right > a:\n        return 0\n    return count(left, 0, False) + count(right, 0, False)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal dp\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * 10**(n-i-1)\n        if dp[i][j] != -1:\n            return dp[i][j]\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(i-1, (j+(x*10**i))%k)\n        dp[i][j] = ans\n        return ans\n    \n    n = l + r + a\n    dp = [[-1]*(k+1) for _ in range(n+1)]\n    return count(n, 0)\n\n# Example usage:\nprint(solve(1, 4, 2))\nprint(solve(5, 5, 5))\nprint(solve(0, 2, 0))",
    "```python\ndef solve(l, r, a):\n    def count(i, j, used_left):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used_left and x != 0:\n                ans += count(i - 1, (j + x * 10 ** i) % k, True)\n            else:\n                ans += count(i - 1, (j + x * 10 ** i) % k, False)\n        return ans\n    \n    k = 10\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    if left > l or right > r:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right > l:\n        return 0\n    if left > a:\n        return 0\n    if right > a:\n        return 0\n    if left > r:\n        return 0\n    if right >",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return j == 0\n        if j == 0:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(n-1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    ans = 0\n    for i in range(1, min(l+r+a, 10)):\n        for j in range(k):\n            if count(i, j) > 0:\n                ans += count(i, j)\n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if j == 0:\n            return 1 if n == 0 else 0\n        if n == 0:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(1, min(l, r) + 1):\n        total += count(i, 0)\n    \n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def count(i, j):\n    if i == 0:\n        return 1 if j == 0 else 0\n    ans = 0\n    for x in range(10):\n        if j + (x * 10 ** i) % k == 0:\n            ans += count(i - 1, (j + (x * 10 ** i)) % k)\n    return ans\n\ndef solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    total //= 2\n    k = 10\n    dp = [[0] * k for _ in range(total + 1)]\n    dp[0][0] = 1\n    for i in range(1, total + 1):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][(j + (i % k)) % k]\n    return dp[total][0]\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = sum(dp[i - 1][k] for k in range(10))\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + k) % 10] for k in range(10))\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] > 0:\n            ans += dp[i][0]\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal ans\n        if i == 0:\n            if j == 0:\n                ans += 1\n            return\n        for x in range(10):\n            if j + (x * 10 ** i) % k == 0:\n                count(i - 1, (j + (x * 10 ** i)) % k)\n    \n    k = 10\n    ans = 0\n    count(l + r + a, 0)\n    return ans\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        nonlocal mod\n        if n == 0:\n            return 1 if j == 0 else 0\n        res = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            res += count(n - 1, (j + (x * mod)) % mod)\n        return res\n    \n    mod = 10 ** 9 + 7\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = total // 2\n    right = total // 2\n    return count(left, 0) * count(right, 0)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "```python\nimport sys\n\ndef solve():\n    l, r, a = map(int, sys.stdin.readline().split())\n    total = l + r + a\n    if total % 2 != 0:\n        print(0)\n        return\n    max_team_size = 0\n    for i in range(total // 2):\n        for j in range(10):\n            if i == 0 and j == 0:\n                continue\n            if i > 0 and j == 0:\n                break\n            if i > 0 and j == 10:\n                break\n            if i > 0 and j == 100:\n                break\n            if i > 0 and j == 1000:\n                break\n            if i > 0 and j == 10000:\n                break\n            if i > 0 and j == 100000:\n                break\n            if i > 0 and j == 1000000:\n                break\n            if i > 0 and j == 10000000:\n                break\n            if i > 0 and j == 100000000:\n                break\n            if i > 0 and j == 1000000000:\n                break\n            if i > 0 and j == 10000000000:\n                break\n            if i > 0 and j == 100000000000:\n                break\n            if i > 0 and j == 1000000000000:\n                break\n            if i > 0 and j == 10000000000000:\n                break\n            if i > 0 and j == 100000000000000:\n                break\n            if i > 0 and j == 1000000000000000:\n                break\n            if i > 0 and j == 10000000000000000:\n                break\n            if i > 0 and j == 100000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000000:\n                break\n            if i > 0 and j == 1000000000000000000000000000000000:\n                break\n            if i > 0 and j == 10000000000000000000000000000000000:\n                break\n            if i > 0 and j == 100000000000000000000000000000000000:\n                break\n            if i > 0 and j == 10000",
    "def solve(l, r, a):\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j + (x * 10 ** i) % k == 0:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    k = 10\n    total = 0\n    for i in range(1, l + r + a + 1):\n        if i % 2 == 0:\n            total += count(i // 2, 0)\n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    mod = 1_000_000_007\n    dp = [[0] * (mod + 1) for _ in range(l + r + a + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, l + r + a + 1):\n        dp[i][0] = 9 * pow(10, i - 1, mod)\n    \n    # State transitions\n    for i in range(1, l + r + a + 1):\n        for j in range(mod + 1):\n            for x in range(10):\n                new_j = (j + (x * 10**(i - 1))) % mod\n                if new_j == 0:\n                    dp[i][new_j] += dp[i - 1][0]\n                else:\n                    dp[i][new_j] += dp[i - 1][new_j]\n                dp[i][new_j] %= mod\n    \n    # Calculate the maximum number of players\n    max_players = 0\n    for i in range(l + r + a + 1):\n        for j in range(mod + 1):\n            if i % 2 == 0 and j == 0:\n                max_players = max(max_players, dp[i][j])\n    \n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)"
  ],
  "rewards": [
    0.0,
    0.025,
    0.075,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.1,
    0.025,
    0.025,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.025,
    0.025,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.025,
    0.025,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.07692307692307693,
    0.02564102564102564,
    0.0,
    0.0,
    0.10256410256410256,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.10256410256410256,
    0.02564102564102564,
    0.0,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.10256410256410256,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": [
    5.858999490737915,
    12.09520959854126,
    18.24489426612854,
    48.51354432106018,
    56.616525650024414,
    61.022615909576416,
    66.60658955574036,
    75.36222338676453,
    80.84552526473999,
    96.90955328941345,
    112.57806754112244,
    118.13665390014648,
    123.07985067367554,
    128.48991775512695,
    134.45307993888855,
    150.7054419517517,
    156.37907528877258,
    161.87042117118835,
    177.6565158367157,
    182.37917113304138,
    187.85922241210938,
    192.69241380691528,
    198.1530840396881,
    208.62062168121338,
    214.37552881240845,
    229.3106336593628,
    235.24697637557983,
    241.5854938030243,
    246.5121042728424,
    251.43744444847107,
    257.73329281806946,
    287.81723189353943,
    292.274276971817,
    311.06585478782654,
    315.2834196090698,
    322.5157356262207,
    337.95533561706543,
    367.6313729286194,
    372.23705196380615,
    388.06835198402405,
    395.08683133125305,
    424.80939388275146,
    429.17585849761963,
    443.36811113357544,
    449.9646804332733,
    455.2243893146515,
    458.95677518844604,
    473.5105788707733,
    503.57162284851074,
    507.79770708084106,
    525.8355193138123
  ],
  "sample times": 51
}