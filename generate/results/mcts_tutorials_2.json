{
  "prompt": "\nQUESTION:\nApart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^9) \u2014 current year in Berland.\n\n\n-----Output-----\n\nOutput amount of years from the current year to the next lucky one.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n201\n\nOutput\n99\n\nInput\n4000\n\nOutput\n1000\n\n\n\n-----Note-----\n\nIn the first example next lucky year is 5. In the second one \u2014 300. In the third \u2014 5000.\n\nTUTORIAL:\nNotice that the next lucky year always looks like (first digit of the current + 1) \u00b7 10^(number of digits of the current - 1). It holds also for numbers starting with 9, it will be 10 \u00b7 10^(number of digits - 1). The answer is the difference between the next lucky year and current year.\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n):\n    while True:\n        n += 1\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    while True:\n        n += 1\n        if '0' not in str(n):\n            break\n    print(n - n)\n\nif True:\n    main()",
    "def solve(n):\n    def next_lucky_year(year):\n        while True:\n            year += 1\n            if len(str(year)) == 1:\n                continue\n            if sum(int(digit) for digit in str(year)) <= 1:\n                return year\n    \n    return next_lucky_year(n)\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    i = 1\n    while True:\n        num = int(str(i) + '0' * (len(str(n)) - len(str(i))))\n        if str(num).count('0') <= 1:\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def next_lucky_year(current):\n    while True:\n        current += 1\n        if '0' not in str(current) and len(str(current)) <= 1:\n            return current\n\ndef solve():\n    current = int(input())\n    print(next_lucky_year(current))\n\nif True:\n    solve()",
    "def solve(n):\n    def count_digits(num):\n        return len(str(num))\n    \n    while True:\n        if count_digits(n) <= 1:\n            return n - n % 10\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        if '0' not in str(n):\n            return n - n % 10**(len(str(n)) - 1)\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    \n    # Find the next lucky year\n    while True:\n        n += 1\n        num_str = str(n)\n        if '0' not in num_str and len(num_str) <= 1:\n            break\n    \n    # Calculate the number of years until the next lucky year\n    years_until_lucky = n - n\n    \n    print(years_until_lucky)\n\nif True:\n    solve()",
    "def solve(year):\n    while True:\n        year += 1\n        if len(str(year)) == 1:\n            continue\n        count = 0\n        for digit in str(year):\n            if digit != '0':\n                count += 1\n        if count <= 1:\n            return year - year\n\nif True:\n    year = int(input())\n    print(solve(year))",
    "def solve(n):\n    def get_next_lucky_year(year):\n        while True:\n            year += 1\n            num_str = str(year)\n            if len(num_str) == 1:\n                continue\n            if '0' not in num_str:\n                return year\n    \n    current_year = int(input())\n    next_lucky_year = get_next_lucky_year(current_year)\n    print(next_lucky_year - current_year)\n\nif True:\n    solve()",
    "def solve(n):\n    i = len(str(n))\n    while True:\n        n += 1\n        if '0' not in str(n)[1:]:\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    solve(data[0])\n\ndef solve(n):\n    while True:\n        n += 1\n        s = str(n)\n        if len(s) == 1 or all(d == '0' for d in s):\n            break\n    print(n - n)\n\nif True:\n    main()",
    "import sys\n\ndef solve(n):\n    while True:\n        n += 1\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n\n\nif True:\n    n = int(sys.stdin.read())\n    print(solve(n))",
    "def solve(n):\n    i = n\n    while True:\n        s = str(i)\n        if len(s) == 1 or all(d == '0' for d in s[1:]):\n            return i - n\n        i += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "import sys\nfrom typing import *\ndef solve(n: int) -> int:\n    while True:\n        n += 1\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n\nif True:\n    n = int(sys.stdin.read())\n    print(solve(n))",
    "def solve(n):\n    while True:\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n % 10\n        n += 1\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10 + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int):\n    while True:\n        n += 1\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    while True:\n        n += 1\n        if len(str(n)) == 1 or all(int(digit) == 0 for digit in str(n)):\n            return n - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    def next_lucky_year(year):\n        while True:\n            year += 1\n            if all(int(digit) == 0 for digit in str(year)):\n                return year\n\n    return next_lucky_year(n) - n\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return ((n // 10) * 10 + 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (10**(len(str(n)) - 1) * (n // 10 + 1) - n)\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[0]) + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (10 * (len(str(n)) - 1) + (n // 10 + 1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n+1)[0]) * 10**(len(str(n))-1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (10 ** len(str(n)) - n) // 10\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[1]) + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // (10**(len(str(n)) - 1))) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[0]) + 1) * (10 ** (len(str(n)) - 1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[-1]) + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n + 9) // 10\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[0]) + 1) * pow(10, len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str((n // 10) + 1)) * pow(10, len(str(n)) - 1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(10**(len(str(n)))-1)[1])+1)*10**(len(str(n))-1-n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    def get_next_lucky_year(year):\n        while True:\n            year += 1\n            num_str = str(year)\n            if len(num_str) == 1:\n                continue\n            if sum(int(digit) for digit in num_str) <= 1:\n                return year\n    \n    return get_next_lucky_year(n) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (int(str(n)[0]) + 1) * 10 ** (len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int):\n    def next_lucky_year(year: int) -> int:\n        while True:\n            year += 1\n            if all(int(digit) == 0 for digit in str(year)):\n                return year\n    \n    return next_lucky_year(n) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n)) - 1) + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10 + 1) * pow(10, len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10 + 1) * (10 ** (len(str(n)) - 1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10 + (n % 10 == 9)) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n)) - 1)) * 10**(len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10 + 1) * 10 ** (len(str(n)) - 1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n))-1)) * 10**(len(str(n))-1) - n\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n)) - 1) * 10**(len(str(n)) - 1) + 1 - n)\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n)) - 1) + 1) * 10**(len(str(n)) - 1) - n\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    print(solve(n))",
    "def solve(n: int) -> int:\n    return (n // 10**(len(str(n)) - 1) + 1) * (10**(len(str(n)) - 1)) - n\n\nif True:\n    n = int(input())\n    print(solve(n))"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.014705882352941176,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8235294117647058,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0,
    0.0,
    0.0,
    0.0,
    0.058823529411764705,
    0.0,
    0.0,
    1.0,
    0.058823529411764705,
    0.007352941176470588,
    1.0,
    0.0,
    0.0,
    0.25735294117647056,
    1.0,
    0.0,
    1.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.7111111111111111,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.7111111111111111,
    1.0,
    0.0,
    0.15555555555555556,
    0.06666666666666667,
    0.08888888888888889,
    0.0,
    0.0,
    1.0,
    0.2074074074074074,
    0.15555555555555556,
    1.0,
    0.7111111111111111,
    0.0,
    0.0,
    1.0,
    0.0,
    1.0,
    0.7111111111111111,
    0.7111111111111111,
    0.08148148148148149,
    0.0,
    0.7111111111111111,
    0.0,
    0.0962962962962963,
    1.0,
    1.0
  ],
  "time": [
    29.20272946357727,
    40.76257586479187,
    52.134610414505005,
    63.535754919052124,
    75.67836618423462,
    87.74125409126282,
    99.58916640281677,
    111.31423759460449,
    122.83131766319275,
    135.80301523208618,
    148.05512237548828,
    160.52416157722473,
    162.40644025802612,
    174.72082042694092,
    186.5130054950714,
    198.38602471351624,
    210.46387314796448,
    222.11809611320496,
    233.65268993377686,
    235.72100639343262,
    247.392662525177,
    259.71383690834045,
    270.80080580711365,
    272.3447904586792,
    274.0711569786072,
    275.81491589546204,
    277.5345666408539,
    279.12134432792664,
    280.56280398368835,
    282.2366666793823,
    284.0452845096588,
    285.5976903438568,
    287.1389739513397,
    288.8271253108978,
    290.19341945648193,
    291.7279169559479,
    293.52215600013733,
    295.2592704296112,
    297.552841424942,
    308.6243164539337,
    310.98493576049805,
    322.4367907047272,
    323.93735909461975,
    325.43679094314575,
    327.1743338108063,
    328.73281931877136,
    330.1994354724884,
    331.7509834766388,
    333.3382420539856,
    334.77215933799744,
    336.4459888935089
  ],
  "sample times": 51
}