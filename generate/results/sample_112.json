{
  "prompt": "\nQUESTION:\nAbsent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def is_valid(num):\n        num_str = str(num)\n        if num_str.startswith('0'):\n            return False\n        for i in range(len(num_str)-1):\n            if int(num_str[i]) == 6 and int(num_str[i+1]) == 9 or int(num_str[i]) == 9 and int(num_str[i+1]) == 6:\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 100000):\n        found = False\n        for j in range(n):\n            for k in range(6):\n                if is_valid(cubes[j][k]*i):\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            break\n        max_x = i\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def can_make_number(cubes):\n        digits = set()\n        for cube in cubes:\n            for digit in cube:\n                if digit == '6' or digit == '9':\n                    return False\n                digits.add(digit)\n        \n        return len(digits) == 10\n    \n    max_number = 0\n    for i in range(1, 100000):\n        if can_make_number([cube[:3] + cube[-3:] for cube in cubes]):\n            max_number = i\n            break\n    \n    print(max_number)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate(cube):\n        return [cube[3], cube[0], cube[1], cube[2]]\n\n    def build_number(cubes):\n        num = \"\"\n        for _ in range(6):\n            num += str(max([c[_] for c in cubes]))\n        return int(num)\n\n    def check_number(num):\n        digits = set(str(num))\n        if len(digits) != 10:\n            return False\n        for d in \"69\":\n            if d in digits:\n                return False\n        return True\n\n    max_num = 0\n    for i in range(1, 10**n):\n        if check_number(i):\n            max_num = max(max_num, i)\n    return max_num if max_num > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def can_make_number(x):\n        used_cubes = set()\n        for _ in range(x):\n            found = False\n            for i in range(n):\n                cube = cubes[i]\n                for j in range(6):\n                    if cube[j] == '0' and found:\n                        return False\n                    elif cube[j] != '0':\n                        found = True\n                        used_cubes.add(cube)\n            if len(used_cubes) < n:\n                return False\n        return True\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = [list(map(int, data[i+1:i+7])) for i in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6):\n            for i in range(6):\n                if cubes[_][i] != 6 and cubes[_][i] != 9:\n                    used_digits.add(cubes[_][i])\n        \n        for i in range(1, x + 1):\n            num_str = str(i)\n            if '6' in num_str or '9' in num_str:\n                return False\n            \n            if len(num_str) > len(used_digits):\n                return False\n            \n            for j in range(len(num_str)):\n                if num_str[j] not in used_digits:\n                    return False\n            \n            used_digits.update(set(num_str))\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 10**6):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def rotate(cube):\n        return [\n            cube[5], cube[4], cube[3],\n            cube[2], cube[1], cube[0]\n        ]\n    \n    def get_number(cube):\n        return int(''.join(map(str, cube)))\n    \n    max_num = 0\n    \n    for i in range(1, 10):\n        for j in range(i + 1, 10):\n            for k in range(j + 1, 10):\n                for l in range(k + 1, 10):\n                    for m in range(l + 1, 10):\n                        for n in range(m + 1, 10):\n                            num = get_number(cubes[i]) * 100000 + \\\n                                  get_number(cubes[j]) * 10000 + \\\n                                  get_number(cubes[k]) * 1000 + \\\n                                  get_number(cubes[l]) * 100 + \\\n                                  get_number(cubes[m]) * 10 + \\\n                                  get_number(cubes[n])\n                            \n                            if num > max_num:\n                                max_num = num\n    \n    return max_num if max_num != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_valid(x):\n        used = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[j][i] != '6':\n                    return False\n                if cubes[i][j] in used:\n                    return False\n                used.add(cubes[i][j])\n        \n        num = 0\n        for c in str(x):\n            if c in used:\n                return False\n            num = num * 10 + int(c)\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 10**6):\n        if is_valid(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make_number(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if data[i][j] == 6 or data[j][i] == 6:\n                    return False\n                used_digits.add(data[i][j])\n        \n        for num in range(1, x + 1):\n            str_num = str(num)\n            if len(str_num) > 6:\n                continue\n            \n            digits_used = set()\n            for c in str_num:\n                if c not in used_digits:\n                    return False\n                digits_used.add(c)\n            \n            if len(digits_used) != 6:\n                return False\n        \n        return True\n    \n    max_x = 0\n    for n in range(1, 4):\n        for i in range(n):\n            for j in range(i, n):\n                for k in range(j, n):\n                    for l in range(k, n):\n                        for m in range(l, n):\n                            if can_make_number(m + 1):\n                                max_x = max(max_x, m + 1)\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, data[_ + 1])))\n    \n    def can_make_number(num):\n        digits = [str(digit) for digit in num]\n        for i in range(6):\n            if digits[i] == '6':\n                return False\n            if digits[i] == '9' and digits[(i + 1) % 6] != '6':\n                return False\n        return True\n    \n    max_number = 0\n    for i in range(1, 1000001):\n        if can_make_number(i):\n            max_number = i\n    \n    print(max_number)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n\n    def get_number(cube):\n        return int(''.join(str(digit) for digit in rotate(cube)))\n\n    max_number = 0\n    for i in range(1, 10**n + 1):\n        num_str = str(i)\n        found = True\n        for j in range(len(num_str)):\n            if not any(cubes[j][k] == int(num_str[j]) for k in range(6)):\n                found = False\n                break\n        if found:\n            max_number = max(max_number, i)\n\n    print(max_number if max_number else 0)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6:\n                return False\n            if num[i] == 9:\n                return True\n        return True\n\n    def find_max_number(cubes):\n        max_num = 0\n        for i in range(1, 10):\n            if can_make_number(i * (10**(n-1))):\n                max_num = max(max_num, i * (10**(n-1)))\n        return max_num\n\n    print(find_max_number(cubes))\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def rotate(cube):\n        return [cube[1], cube[5], cube[4], cube[2], cube[0], cube[3]]\n    \n    def get_number(cube):\n        return int(''.join(str(face) for face in cube))\n    \n    def can_make(x):\n        used_digits = set()\n        for _ in range(6):\n            for face in range(6):\n                if face == 0 and x // 10 == 0:\n                    continue\n                digit = x % 10\n                if digit < 0 or digit > 9 or digit in used_digits:\n                    return False\n                used_digits.add(digit)\n                x //= 10\n        \n        for _ in range(6):\n            cube = rotate(cube)\n            for face in range(6):\n                if face == 0 and x // 10 == 0:\n                    continue\n                digit = x % 10\n                if digit < 0 or digit > 9 or digit in used_digits:\n                    return False\n                used_digits.add(digit)\n                x //= 10\n        \n        return True\n    \n    for x in range(98, 0, -1):\n        if can_make(x):\n            return x\n    \n    return 0\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n\n    def get_number(cube):\n        return int(''.join(str(num) for num in cube))\n\n    def check_validity(number):\n        return '6' not in str(number) and '9' not in str(number)\n\n    def find_max_number():\n        max_number = 0\n        for i in range(1, 10**n + 1):\n            digits = list(map(int, str(i)))\n            valid = True\n            for cube in cubes:\n                rotated_cube = rotate(cube)\n                if not check_validity(get_number(rotated_cube)):\n                    valid = False\n                    break\n            if valid:\n                max_number = max(max_number, i)\n        return max_number\n\n    return find_max_number()\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n+1)]\n    \n    def can_make_number(num):\n        used_digits = set()\n        for _ in range(len(str(num))):\n            if num % 10 in used_digits:\n                return False\n            used_digits.add(num % 10)\n            num //= 10\n        return True\n    \n    max_x = 0\n    for i in range(1, 10**len(str(max_x)) + 1):\n        if can_make_number(i):\n            max_x = i\n            \n    if max_x == 0:\n        print(0)\n    else:\n        print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n+1)]\n    \n    def can_form_number(num):\n        digits = str(num)\n        for i in range(len(digits)):\n            if digits[i] == '6' and digits[(i-1)%len(digits)] != '9':\n                return False\n            if digits[i] == '9' and digits[(i-1)%len(digits)] != '6':\n                return False\n        return True\n    \n    max_x = 0\n    for num in range(1, 10**n):\n        if can_form_number(num):\n            max_x = num\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for cube in cubes:\n            num_str = ''.join(map(str, cube))\n            if num_str.startswith(str(i)):\n                found = True\n                break\n        if not found:\n            break\n        max_number = max(max_number, i)\n    \n    if max_number == 0:\n        print(0)\n    else:\n        print(max_number)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, data[i+1])))\n    \n    def is_valid(x):\n        used_digits = [False] * 10\n        for _ in range(6*n):\n            num = 0\n            for j in range(6):\n                num = num * 10 + cubes[_//6][j]\n            if num == 0 or used_digits[num]:\n                return False\n            used_digits[num] = True\n        return True\n    \n    max_x = 0\n    for x in range(1, 10**6 + 1):\n        if is_valid(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    max_num = 0\n    for num in range(1, 10**n + 1):\n        str_num = str(num)\n        if len(str_num) > n:\n            continue\n        \n        valid = True\n        for i in range(n):\n            if cubes[i][0] == '6' and cubes[i][1] == '9':\n                valid = False\n                break\n            elif cubes[i][1] == '6' and cubes[i][0] == '9':\n                valid = False\n                break\n            if cubes[i][0] != str_num[i]:\n                valid = False\n                break\n            if cubes[i][1] != str_num[i+1]:\n                valid = False\n                break\n        \n        if valid:\n            max_num = max(max_num, num)\n    \n    print(max_num)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, data[i+1])))\n    \n    def is_valid(x):\n        used = [False] * 10\n        for i in range(6):\n            num = sum(cubes[i][j]*10**(5-i) for j in range(6))\n            if num == 0:\n                continue\n            if used[num]:\n                return False\n            used[num] = True\n        \n        return True\n    \n    x = 0\n    while True:\n        if is_valid(x + 1):\n            break\n        x += 1\n    \n    if x == 0:\n        print(0)\n    else:\n        print(x)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def check(x):\n        digits = [0] * 10\n        for _ in range(6):\n            for d in str(x):\n                digits[int(d)] += 1\n        \n        return all(digits[i] <= 1 for i in range(10))\n    \n    for n in range(1, max(data) + 1):\n        if check(n):\n            print(n)\n            return\n    \n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def rotate_cube(cube):\n        rotated_cubes = [cube]\n        for _ in range(5):\n            rotated_cubes.append([cube[5-i][j] for i in range(6)])\n        return rotated_cubes\n    \n    def get_number_from_faces(faces):\n        num_str = ''.join(str(face) for face in faces)\n        while num_str.startswith('0'):\n            num_str = num_str[1:]\n        return int(num_str)\n    \n    def check_number(number):\n        for i in range(1, number + 1):\n            if str(i) not in [str(face) for face in get_number_from_faces(cubes)]:\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 10**6):\n        if check_number(i):\n            max_x = i\n            break\n    \n    return max_x if max_x > 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    for _ in range(6*n):\n        for i in range(n):\n            for j in range(6):\n                if digits[i][j] == {0}:\n                    digits[i].remove(0)\n                elif digits[i][j] == {1}:\n                    digits[i].add(9)\n                elif digits[i][j] == {2}:\n                    digits[i].add(8)\n                elif digits[i][j] == {3}:\n                    digits[i].add(7)\n                elif digits[i][j] == {4}:\n                    digits[i].add(6)\n                elif digits[i][j] == {5}:\n                    digits[i].add(5)\n                elif digits[i][j] == {6}:\n                    digits[i].add(4)\n                elif digits[i][j] == {7}:\n                    digits[i].add(3)\n                elif digits[i][j] == {8}:\n                    digits[i].add(2)\n                elif digits[i][j] == {9}:\n                    digits[i].add(1)\n    \n    max_number = 0\n    for i in range(1, 10):\n        found = False\n        for j in range(n):\n            for k in range(6):\n                if i in digits[j][k]:\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            max_number = max(max_number, i * (10**(n-1)))\n    \n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, data[i + 1])))\n    \n    max_x = solve(cubes)\n    print(max_x)\n\ndef solve(cubes):\n    digits = [set(range(10)) for _ in range(6)]\n    for i in range(n):\n        for j in range(6):\n            digits[j].discard(cubes[i][j])\n    \n    def can_make_number(x):\n        used_digits = [False] * 10\n        for i in range(n):\n            num = 0\n            for j in range(6):\n                if cubes[i][j] != 0:\n                    num += cubes[i][j] * (10 ** (5 - j))\n            if num > x:\n                return False\n            while num:\n                d = num % 10\n                used_digits[d] = True\n                num //= 10\n        \n        for d in range(10):\n            if not used_digits[d]:\n                return False\n        \n        return True\n    \n    low, high = 1, 999999\n    while low <= high:\n        mid = (low + high) // 2\n        if can_make_number(mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return high\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_digits = set()\n        for _ in range(6 * n):\n            face = sum(cubes[i][j] for i in range(n) for j in range(6))\n            if face == 0:\n                return False\n            if face in used_digits:\n                return False\n            used_digits.add(face)\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 10**n + 1):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def rotate_cube(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n    \n    def find_max_number(cubes):\n        max_number = 0\n        for num in range(1, 1000001):\n            digits = list(str(num))\n            if len(digits) > 6:\n                continue\n            \n            rotated_cubes = [rotate_cube(cube) for cube in cubes]\n            \n            for i in range(6):\n                if digits[i] == '0':\n                    break\n                if rotated_cubes[i][i] != digits[i]:\n                    break\n            else:\n                max_number = num\n                break\n        \n        return max_number\n    \n    print(find_max_number(cubes))\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_valid(num):\n        s = str(num)\n        return '0' not in s and len(s) == len(set(s))\n    \n    max_x = 0\n    for num in range(1, 10**n + 1):\n        if is_valid(num):\n            max_x = max(max_x, num)\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_valid(num):\n        num_str = str(num)\n        for i in range(6):\n            if num_str[i] == '6' and num_str[(i+1)%6] != '9':\n                return False\n            elif num_str[i] == '9' and num_str[(i+1)%6] != '6':\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 1000000):\n        if is_valid(i):\n            max_x = i\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make_number(x):\n        digits = [str(i) for i in range(1, x + 1)]\n        for d in digits:\n            found = False\n            for i in range(len(data)):\n                if ''.join(str(digit) for digit in data[i]) == d:\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n    \n    for n in range(1, 10):\n        if can_make_number(n):\n            print(n)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def is_valid(num):\n        str_num = str(num)\n        if str_num[0] == '0':\n            return False\n        for i in range(6):\n            if num // (10 ** i % 10) != cubes[i][str_num[i]]:\n                return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 10 ** n + 1):\n        if is_valid(i):\n            max_x = i\n    \n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate_cube(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n\n    def get_number(cube):\n        return int(''.join(str(num) for num in cube))\n\n    max_number = 0\n    for i in range(1, 10**n):\n        number_str = str(i)\n        number_list = list(number_str)\n        found = True\n        for j in range(n):\n            rotated_cube = rotate_cube(cubes[j])\n            rotated_number = get_number(rotated_cube)\n            if rotated_number != int(number_list[j]):\n                found = False\n                break\n        if found:\n            max_number = i\n\n    print(max_number if max_number > 0 else 0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def is_valid(x):\n        for i in range(6):\n            for j in range(i+1, 6):\n                if str(data[i][j]) == '6' and str(data[j][i]) != '6':\n                    return False\n        return True\n    \n    def find_max_x():\n        x = 1\n        while True:\n            if is_valid(x):\n                return x\n            x += 1\n        \n    print(find_max_x())\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(len(digits)):\n            if digits[i] == '0':\n                return False\n        return True\n    \n    max_number = 0\n    for num in range(1, 10**n + 1):\n        if can_make_number(num):\n            max_number = num\n            break\n    \n    print(max_number)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n\n    def generate_number(cube):\n        digits = ''.join(str(digit) for digit in cube)\n        while digits.startswith('0'):\n            digits = digits[1:]\n        return int(digits)\n\n    max_number = 0\n    for _ in range(100):  # Arbitrary limit to prevent infinite loop\n        found = False\n        for i in range(n):\n            rotated_cube = rotate(cubes[i])\n            for j in range(i + 1, n):\n                rotated_j_cube = rotate(cubes[j])\n                combined_digits = ''.join(str(digit) for digit in rotated_cube + rotated_j_cube)\n                while combined_digits.startswith('0'):\n                    combined_digits = combined_digits[1:]\n                if int(combined_digits) > max_number:\n                    max_number = int(combined_digits)\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            break\n\n    return max_number if max_number != 0 else 0\n\nif True:\n    n = int(input())\n    result = solve(n)\n    print(result)",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def rotate(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n\n    def get_number(cube):\n        return int(''.join(str(num) for num in cube))\n\n    max_num = 0\n    for cube in cubes:\n        cube = rotate(cube)\n        while True:\n            num = get_number(cube)\n            if num > max_num:\n                max_num = num\n            elif num == max_num:\n                break\n            else:\n                cube = rotate(cube)\n\n    if max_num == 0:\n        print(0)\n    else:\n        print(max_num)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n*6, 6)]\n    \n    def can_make(x):\n        used = [False]*10\n        for i in range(n):\n            for j in range(6):\n                if used[cubes[i][j]]:\n                    return False\n                used[cubes[i][j]] = True\n        return True\n    \n    x = 0\n    while True:\n        if can_make(x):\n            break\n        x += 1\n    \n    print(x)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def is_valid(x):\n        for i in range(1, x + 1):\n            num_str = str(i)\n            for j in range(len(num_str)):\n                if num_str[j] == '6' and num_str[j - 1] != '9':\n                    return False\n                if num_str[j] == '9' and num_str[j - 1] != '6':\n                    return False\n            for i in range(6):\n                for j in range(6):\n                    if cubes[i][j] == int(num_str[0]):\n                        break\n                else:\n                    continue\n                for k in range(6):\n                    if cubes[i][k] == int(num_str[1]):\n                        break\n                else:\n                    continue\n                for l in range(6):\n                    if cubes[i][l] == int(num_str[2]):\n                        break\n                else:\n                    continue\n                for m in range(6):\n                    if cubes[i][m] == int(num_str[3]):\n                        break\n                else:\n                    continue\n                for n in range(6):\n                    if cubes[i][n] == int(num_str[4]):\n                        break\n                else:\n                    continue\n                for o in range(6):\n                    if cubes[i][o] == int(num_str[5]):\n                        break\n                else:\n                    continue\n                return True\n        return False\n\n    x = 1\n    while not is_valid(x):\n        x += 1\n\n    return x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6:\n                return False\n        return True\n    \n    max_number = 0\n    for i in range(1, 10**6 + 1):\n        if can_make_number(i):\n            max_number = i\n            break\n    \n    print(max_number)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_form_number(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6' and digits[(i+1)%6] != '9':\n                return False\n            elif digits[i] == '9' and digits[(i+1)%6] != '6':\n                return False\n        return True\n    \n    max_x = 0\n    for num in range(1, 10**n):\n        if can_form_number(num):\n            max_x = num\n    \n    return max_x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n+1)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        for cube in cubes:\n            digits = ''.join(str(digit) for digit in cube)\n            if '6' in digits and '9' in digits:\n                continue\n            if len(digits) != len(set(digits)):\n                return False\n            if any(digit in used_digits for digit in digits):\n                return False\n            used_digits.update(digits)\n        \n        return True\n    \n    max_x = 0\n    for x in range(1, 100000):\n        if can_make_number(x):\n            max_x = x\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_valid(num):\n        s = str(num)\n        if s[0] == '0':\n            return False\n        for i in range(1, len(s)):\n            if abs(cubes[i][s[i]-1]) != 1:\n                return False\n        return True\n    \n    max_num = 0\n    for num in range(1, 10**n + 1):\n        if is_valid(num):\n            max_num = num\n    \n    print(max_num)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def can_make_number(x):\n        cubes = [data[i*6:(i+1)*6] for i in range(len(data)//6)]\n        \n        def rotate_cube(cube):\n            return [cube[1], cube[2], cube[3], cube[4], cube[5], cube[0]]\n        \n        def get_number(cubes):\n            num = ''\n            for i in range(6):\n                for j in range(6):\n                    num += str(cubes[i][j])\n            return int(num)\n        \n        def check_digit(a, b):\n            if a == 6 and b == 9 or a == 9 and b == 6:\n                return False\n            return True\n        \n        for _ in range(6):\n            for _ in range(6):\n                for _ in range(6):\n                    for _ in range(6):\n                        for _ in range(6):\n                            for _ in range(6):\n                                if get_number([rotate_cube(cube) for cube in cubes]) <= x:\n                                    return True\n        return False\n    \n    max_x = 0\n    for x in range(1, 1000001):\n        if can_make_number(x):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(num):\n        for i in range(6):\n            for j in range(i+1, 6):\n                if abs(cubes[i][j] - cubes[j][i]) == 6:\n                    return False\n        return True\n    \n    max_x = 0\n    for i in range(1, 10):\n        for j in range(i+1, 10):\n            for k in range(j+1, 10):\n                for l in range(k+1, 10):\n                    for m in range(l+1, 10):\n                        for n in range(m+1, 10):\n                            num = i * 100000 + j * 10000 + k * 1000 + l * 100 + m * 10 + n\n                            if can_make_number(num):\n                                max_x = max(max_x, num)\n    \n    if max_x == 0:\n        print(0)\n    else:\n        print(max_x)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def can_make_number(num):\n        for cube in cubes:\n            if str(num).count(str(cube)) > 0:\n                return False\n        return True\n    \n    max_number = 0\n    for num in range(1, 10**n + 1):\n        if can_make_number(num):\n            max_number = num\n    \n    print(max_number)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for cube in cubes:\n            rotated_cube = [cube[5-i] for i in range(6)]\n            num_str = ''.join(str(x) for x in rotated_cube)\n            if num_str.startswith('0'):\n                return False\n            num *= 10\n            num += int(num_str)\n        return True\n\n    max_x = 0\n    for i in range(1, 10**6 + 1):\n        if can_make_number(i):\n            max_x = i\n            break\n\n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def is_valid(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    return False\n                if cubes[j][i] == 6:\n                    return False\n                if cubes[i][j] == 9:\n                    used_digits.add(6)\n                elif cubes[j][i] == 9:\n                    used_digits.add(6)\n                else:\n                    used_digits.add(cubes[i][j])\n        return len(used_digits) == 10\n\n    x = 0\n    while True:\n        if is_valid(x + 1):\n            break\n        x += 1\n\n    if x == 0:\n        print(0)\n    else:\n        print(x)\n\nif True:\n    solve()",
    "def solve(n):\n    digits = []\n    for _ in range(n):\n        digits.append(list(map(int, input().split())))\n    \n    def is_valid(num):\n        s = str(num)\n        return '0' not in s\n    \n    max_num = 0\n    for i in range(1, 10**n + 1):\n        if is_valid(i):\n            num_str = ''.join(str(digit) for digit in digits[0])\n            for j in range(1, n):\n                num_str += str(digits[j][num_str.index('0')])\n            if int(num_str) <= i:\n                max_num = max(max_num, i)\n    \n    return max_num if max_num != 0 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    def is_valid(x):\n        cubes = []\n        for _ in range(6):\n            cubes.append([int(digit) for digit in data[_]])\n        \n        digits = set(range(10))\n        for _ in range(6):\n            for i in range(len(cubes)):\n                if cubes[i][_] == 6:\n                    digits.remove(9)\n                elif cubes[i][_] == 9:\n                    digits.remove(6)\n        \n        for num in range(1, x + 1):\n            str_num = str(num)\n            if len(str_num) > 1:\n                return False\n            if int(str_num[0]) not in digits:\n                return False\n        \n        return True\n    \n    n = int(data[0])\n    max_x = 0\n    for _ in range(n):\n        if is_valid(int(data[_])):\n            max_x = max(max_x, int(data[_]))\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    cubes = [data[i:i+6] for i in range(1, n*6, 6)]\n    \n    max_x = 0\n    for num in range(1, 100000):\n        digits = str(num)\n        if len(digits) > 6:\n            continue\n        \n        valid = True\n        for i in range(6):\n            if digits[i] == '6' and digits[(i+1)%6] != '9':\n                valid = False\n                break\n            if digits[i] != '6' and digits[(i+1)%6] == '9':\n                valid = False\n                break\n        \n        if valid:\n            for i in range(n):\n                for j in range(6):\n                    if cubes[i][j] != digits[j]:\n                        valid = False\n                        break\n                if not valid:\n                    break\n            if valid:\n                max_x = num\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def rotate(cube):\n        return [cube[5], cube[4], cube[3], cube[2], cube[1], cube[0]]\n    \n    def find_max_number(cubes):\n        max_num = 0\n        for i in range(6):\n            for j in range(6):\n                for k in range(6):\n                    for l in range(6):\n                        for m in range(6):\n                            num = 0\n                            for face in range(6):\n                                num = num * 10 + cubes[i][face]\n                            for face in range(6):\n                                num = num * 10 + cubes[j][face]\n                            for face in range(6):\n                                num = num * 10 + cubes[k][face]\n                            for face in range(6):\n                                num = num * 10 + cubes[l][face]\n                            for face in range(6):\n                                num = num * 10 + cubes[m][face]\n                            if num > max_num:\n                                max_num = num\n        return max_num\n    \n    max_num = find_max_number(cubes)\n    if max_num == 0:\n        print(0)\n    else:\n        print(max_num)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = []\n    for i in range(n):\n        cubes.append(data[i*6:(i+1)*6])\n    \n    def can_make(x):\n        used_digits = set()\n        for cube in cubes:\n            for face in range(6):\n                digit = str(cube[face])\n                if digit == '6' and '9' in used_digits:\n                    return False\n                elif digit == '9' and '6' in used_digits:\n                    return False\n                if digit in used_digits:\n                    return False\n                used_digits.add(digit)\n        \n        digits = ''.join(sorted(used_digits))\n        return int(digits) <= x\n    \n    low, high = 0, 10**9\n    while low < high:\n        mid = (low + high) // 2\n        if can_make(mid):\n            low = mid + 1\n        else:\n            high = mid\n    \n    if low > 0:\n        print(low - 1)\n    else:\n        print(0)\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.10416666666666667,
    0.0,
    0.041666666666666664,
    0.0,
    0.041666666666666664,
    0.0,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.041666666666666664
  ],
  "train rewards": [
    0.0,
    0.2708333333333333,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.14583333333333334,
    0.0,
    0.2708333333333333,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.16666666666666666,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.125
  ],
  "time": 290.6891918182373,
  "sample times": 50
}