{
  "prompt": "\nQUESTION:\nThe Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.\n\n\n-----Input-----\n\nThe single line contains three integers r, s and p (1 \u2264 r, s, p \u2264 100)\u00a0\u2014 the original number of individuals in the species of rock, scissors and paper, respectively.\n\n\n-----Output-----\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n0.333333333333 0.333333333333 0.333333333333\n\nInput\n2 1 2\n\nOutput\n0.150000000000 0.300000000000 0.550000000000\n\nInput\n1 1 3\n\nOutput\n0.057142857143 0.657142857143 0.285714285714\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "import sys\nfrom fractions import Fraction\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probabilities using the formula for absorbing states\n    prob_r = Fraction((r * (p + s)) + (s * r), total * (p + s))\n    prob_s = Fraction((s * (r + p)) + (p * s), total * (r + p))\n    prob_p = Fraction((p * (r + s)) + (r * p), total * (r + s))\n    \n    return prob_r, prob_s, prob_p\n\n# Read input from stdin\ninput_data = sys.stdin.read().strip()\ndata = list(map(int, input_data.split()))\n\n# Solve the problem\nresult = solve(*data)\n\n# Print the result\nprint(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    \n    # Calculate the probabilities\n    prob_r = r / (r + s + p)\n    prob_s = s / (r + s + p)\n    prob_p = p / (r + s + p)\n    \n    # Print the results\n    print(prob_r, prob_s, prob_p)\n\nif True:\n    solve()",
    "import sys\n\ndef solve(r, s, p):\n    # Initialize the probabilities of each species\n    prob_rock = r / (r + s + p)\n    prob_scissors = s / (r + s + p)\n    prob_paper = p / (r + s + p)\n\n    # Iterate until there's only one species left\n    while True:\n        new_prob_rock = prob_rock * (prob_scissors + prob_paper)\n        new_prob_scissors = prob_scissors * (prob_rock + prob_paper)\n        new_prob_paper = prob_paper * (prob_rock + prob_scissors)\n\n        # Check if there's only one species left\n        if new_prob_rock == 1:\n            return [new_prob_rock, new_prob_scissors, new_prob_paper]\n        elif new_prob_scissors == 1:\n            return [new_prob_rock, new_prob_scissors, new_prob_paper]\n        elif new_prob_paper == 1:\n            return [new_prob_rock, new_prob_scissors, new_prob_paper]\n\nif True:\n    # Read the input\n    r, s, p = map(int, sys.stdin.readline().split())\n\n    # Solve the problem\n    result = solve(r, s, p)\n\n    # Print the result\n    print(*result)",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.read().split())\n    \n    # Calculate the probability of each species being the last survivor\n    prob_rock = (r * s + r * p + s * p) / (r + s + p)\n    prob_scissors = (s * r + s * p + r * p) / (r + s + p)\n    prob_paper = (p * r + p * s + r * s) / (r + s + p)\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = (r * (s + p)) / total\n    prob_s = (s * (r + p)) / total\n    prob_p = (p * (r + s)) / total\n    return prob_r, prob_s, prob_p\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "import math\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals initially\n    total = r + s + p\n    \n    # Calculate the probability that the first species will be the only one left\n    prob_rock = math.pow(math.factorial(total) / (math.factorial(r) * math.factorial(s) * math.factorial(p)), 1/total)\n    \n    # Calculate the probability that the second species will be the only one left\n    prob_scissors = math.pow(math.factorial(total) / (math.factorial(r) * math.factorial(s) * math.factorial(p)), 1/total)\n    \n    # Calculate the probability that the third species will be the only one left\n    prob_paper = math.pow(math.factorial(total) / (math.factorial(r) * math.factorial(s) * math.factorial(p)), 1/total)\n    \n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    # Calculate the total number of possible pairs\n    total_pairs = r * s + s * p + p * r\n    \n    # Calculate the probabilities for each species to survive\n    prob_rock_survive = (r * (s + p)) / total_pairs\n    prob_scissors_survive = (s * (p + r)) / total_pairs\n    prob_paper_survive = (p * (r + s)) / total_pairs\n    \n    return prob_rock_survive, prob_scissors_survive, prob_paper_survive\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve():\n    r, s, p = map(int, input().split())\n    \n    # Calculate the probability of each species being the only one to survive\n    prob_rock = (r * s + r * p) / ((r + s) * (r + p))\n    prob_scissors = (s * r + s * p) / ((r + s) * (r + p))\n    prob_paper = (p * r + p * s) / ((r + s) * (r + p))\n    \n    # Print the probabilities\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "import math\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = math.pow((r-1)/total, r)\n    prob_scissors = math.pow((s-1)/total, s)\n    prob_paper = math.pow((p-1)/total, p)\n    \n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rock, prob_scissors, prob_paper)",
    "import sys\nfrom fractions import Fraction\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rock = Fraction(r * r, total * total)\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors = Fraction(s * s, total * total)\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper = Fraction(p * p, total * total)\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Calculate the probabilities\n    prob_rock = (r * s + r * p) / (r + s + p)\n    prob_scissors = (s * r + s * p) / (r + s + p)\n    prob_paper = (p * r + p * s) / (r + s + p)\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve():\n    r, s, p = map(int, input().split())\n    \n    # Calculate the probabilities using the formula for absorbing Markov chains\n    prob_r = (r * (s + p)) / ((r + s) * (r + p))\n    prob_s = (s * (r + p)) / ((r + s) * (r + p))\n    prob_p = (p * (r + s)) / ((r + s) * (r + p))\n    \n    print(prob_r, prob_s, prob_p)\n\nif True:\n    solve()",
    "import math\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rocks = math.pow(r / total, total)\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors = math.pow(s / total, total)\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper = math.pow(p / total, total)\n    \n    return prob_rocks, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    prob_rocks, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rocks, prob_scissors, prob_paper)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    \n    def probability(r, s, p):\n        return (r * s + r * p + s * p) / (r + s + p)\n    \n    print(probability(r, s, p))\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    # Calculate the probabilities of each species surviving\n    prob_rock = ((r + s + p) * (r + s)) / ((r + s + p) * (r + s + p))\n    prob_scissors = ((r + s + p) * (s + p)) / ((r + s + p) * (r + s + p))\n    prob_paper = ((r + s + p) * (p + r)) / ((r + s + p) * (r + s + p))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\nr, s, p = map(int, input().split())\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(r, s, p)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    def prob(r, s, p):\n        if r == 0 or s == 0 or p == 0:\n            return 1\n        else:\n            return (prob(r-1, s, p) + prob(r, s-1, p) + prob(r, s, p-1)) / 3\n    \n    return prob(r, s, p)\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    print(solve(r, s, p))",
    "def solve(r, s, p):\n    def simulate(r, s, p):\n        while True:\n            pairs = [(i, j) for i in range(r) for j in range(s)]\n            for i, j in pairs:\n                if (i == 'r' and j == 's') or (i == 's' and j == 'p') or (i == 'p' and j == 'r'):\n                    return i, j\n    \n    rock, scissors = simulate(r, s, p)\n    if rock == 'r':\n        return p / (r + s + p)\n    elif rock == 's':\n        return r / (r + s + p)\n    else:\n        return s / (r + s + p)\n\nif True:\n    r, s, p = map(int, input().split())\n    print(*solve(r, s, p))",
    "def solve(r, s, p):\n    total = r + s + p\n    if total == 1:\n        return [1, 0, 0]\n    elif total == 2:\n        return [1/3, 1/3, 1/3]\n    else:\n        prob_rock = (r * (s + p)) / (total * (total - 1))\n        prob_scissors = (s * (p + r)) / (total * (total - 1))\n        prob_paper = (p * (r + s)) / (total * (total - 1))\n        return [prob_rock, prob_scissors, prob_paper]\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    import sys\n    input_values = list(map(int, sys.stdin.read().split()))\n    r, s, p = input_values\n    result = solve(r, s, p)\n    print(*result)",
    "import sys\nfrom fractions import Fraction\n\ndef solve(r, s, p):\n    # Calculate the total number of individuals initially\n    total = r + s + p\n    \n    # Calculate the probability of each species being the last survivor\n    prob_rock = Fraction(total - s - p, total)\n    prob_scissors = Fraction(total - r - p, total)\n    prob_paper = Fraction(total - r - s, total)\n    \n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    input_data = sys.stdin.read().split()\n    r, s, p = map(int, input_data)\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    def prob(r, s, p):\n        if r == 0 or s == 0 or p == 0:\n            return 0\n        if r == 1 and s == 1 and p == 1:\n            return 1\n        return prob(r-1, s, p) + prob(r, s-1, p) + prob(r, s, p-1)\n\n    return [prob(r, s, p), prob(s, p, r), prob(p, r, s)]\n\nif True:\n    import sys\n    data = sys.stdin.read().split()\n    r, s, p = map(int, data)\n    result = solve(r, s, p)\n    print(\" \".join(map(str, result)))",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r * s * p) / (total * total * total)\n    prob_scissors = (s * r * p) / (total * total * total)\n    prob_paper = (p * r * s) / (total * total * total)\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s / total) * (p / total))\n    prob_scissors = (s / total) * ((r / total) * (p / total))\n    prob_paper = (p / total) * ((r / total) * (s / total))\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    def simulate(r, s, p):\n        while True:\n            x = y = None\n            while not x or not y:\n                x = random.choice(['r', 's', 'p'])\n                y = random.choice(['r', 's', 'p'])\n            if x != y:\n                if x == 'r':\n                    p -= 1\n                elif x == 's':\n                    s -= 1\n                else:\n                    r -= 1\n            if r + s + p == 0:\n                return r / (r + s + p)\n\n    return [simulate(r, s, p), simulate(s, r, p), simulate(p, s, r)]\n\nif True:\n    import sys\n    import random\n    input_data = list(map(int, sys.stdin.read().split()))\n    result = solve(*input_data)\n    print(' '.join(map(str, result)))",
    "def solve():\n    r, s, p = map(int, input().split())\n    \n    # Calculate the probabilities using the formula for absorbing states in Markov chains\n    prob_r = (r * s + r * p) / (r * s + r * p + s * p)\n    prob_s = (s * r + s * p) / (r * s + r * p + s * p)\n    prob_p = (p * r + p * s) / (r * s + r * p + s * p)\n    \n    print(prob_r, prob_s, prob_p)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Calculate the probability of the rock species being the only survivor\n    prob_rock = (r * s * p) / ((r + s + p) * (r + s + p))\n    \n    # Calculate the probability of the scissors species being the only survivor\n    prob_scissors = (r * s * p) / ((s + p + r) * (s + p + r))\n    \n    # Calculate the probability of the paper species being the only survivor\n    prob_paper = (r * s * p) / ((p + r + s) * (p + r + s))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "import math\n\ndef solve(r, s, p):\n    total = r + s + p\n    prob_rock = r / total\n    prob_scissors = s / total\n    prob_paper = p / total\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock_only = (prob_scissors * prob_paper) / (prob_scissors + prob_paper)\n    prob_scissors_only = (prob_rock * prob_paper) / (prob_rock + prob_paper)\n    prob_paper_only = (prob_rock * prob_scissors) / (prob_rock + prob_scissors)\n    \n    return prob_rock_only, prob_scissors_only, prob_paper_only\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "import sys\nfrom math import *\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Calculate probabilities using the formula derived from combinatorial analysis\n    prob_rock = pow(r + s + p, -1)\n    prob_scissors = pow(s + p, -1)\n    prob_paper = pow(p, -1)\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    # Calculate the probabilities of survival for each species\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(*result)",
    "import sys\n\ndef solve(r, s, p):\n    total = r + s + p\n    if total == 1:\n        return [1, 0, 0]\n    \n    # Calculate the probabilities\n    prob_r = (r / total) * ((s / (total - r)) + (p / (total - r)))\n    prob_s = (s / total) * ((r / (total - s)) + (p / (total - s)))\n    prob_p = (p / total) * ((r / (total - p)) + (s / (total - p)))\n    \n    return [prob_r, prob_s, prob_p]\n\ndef main():\n    data = list(map(int, sys.stdin.read().split()))\n    result = solve(*data)\n    print(' '.join(map(str, result)))\n\nif True:\n    main()",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = r / total\n    prob_s = s / total\n    prob_p = p / total\n    \n    # Calculate the probability that the rocks will be the only surviving species\n    prob_rock_only = (prob_r * prob_s * prob_p) / ((prob_r + prob_s + prob_p)**2)\n    \n    # Calculate the probability that the scissors will be the only surviving species\n    prob_scissors_only = (prob_r * prob_s * prob_p) / ((prob_r + prob_s + prob_p)**2)\n    \n    # Calculate the probability that the paper will be the only surviving species\n    prob_paper_only = (prob_r * prob_s * prob_p) / ((prob_r + prob_s + prob_p)**2)\n    \n    return prob_rock_only, prob_scissors_only, prob_paper_only\n\n# Read input\nr, s, p = map(int, input().split())\n\n# Solve the problem\nresult = solve(r, s, p)\n\n# Print the result\nprint(*result)",
    "def solve(r, s, p):\n    # Calculate the total number of possible pairs of individuals\n    total_pairs = r * s + s * p + p * r\n    \n    # Calculate the probability that a pair consists of two individuals of the same species\n    same_species_probability = (r * r + s * s + p * p) / total_pairs\n    \n    # Calculate the probability that a pair consists of two individuals of different species\n    different_species_probability = 1 - same_species_probability\n    \n    # Print the probabilities\n    print(different_species_probability, same_species_probability, same_species_probability)\n\n# Read input\nr, s, p = map(int, input().split())\n\n# Solve the problem\nsolve(r, s, p)",
    "def solve():\n    r, s, p = map(int, input().split())\n    \n    # Calculate the probability that the first species will be the only survivor\n    prob_rock_first = (r * s + r * p + s * p) / (r * s * p)\n    \n    # Calculate the probability that the second species will be the only survivor\n    prob_scissors_first = (s * r + s * p + r * p) / (r * s * p)\n    \n    # Calculate the probability that the third species will be the only survivor\n    prob_paper_first = (p * r + p * s + r * s) / (r * s * p)\n    \n    # Print the probabilities\n    print(prob_rock_first, prob_scissors_first, prob_paper_first)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    if total == 1:\n        return [1, 0, 0]\n    elif total == 2:\n        return [0.5, 0.5, 0]\n    else:\n        # Calculate the probabilities using the formula derived from combinatorial methods\n        prob_rock = ((r-1)*(s+p)) / (total*(total-1))\n        prob_scissors = ((s-1)*(r+p)) / (total*(total-1))\n        prob_paper = ((p-1)*(r+s)) / (total*(total-1))\n        \n        return [prob_rock, prob_scissors, prob_paper]\n\n# Read input values\nr, s, p = map(int, input().split())\n\n# Solve the problem\nresult = solve(r, s, p)\n\n# Print the result\nprint(*result)",
    "def solve(r, s, p):\n    def probability_of_last_survivor(r, s, p):\n        total_individuals = r + s + p\n        # If there's only one type of individual left, it will survive\n        if total_individuals == 1:\n            return 1\n        # If all types of individuals are present, they will all survive\n        elif total_individuals == 3:\n            return 1\n        else:\n            # Calculate the probability of each type of individual surviving\n            prob_rock = (r / total_individuals) * probability_of_last_survivor(r-1, s, p)\n            prob_scissors = (s / total_individuals) * probability_of_last_survivor(r, s-1, p)\n            prob_paper = (p / total_individuals) * probability_of_last_survivor(r, s, p-1)\n            return prob_rock + prob_scissors + prob_paper\n    \n    return [probability_of_last_survivor(r, s, p), probability_of_last_survivor(s, r, p), probability_of_last_survivor(p, s, r)]\n\nif True:\n    r, s, p = map(int, input().split())\n    print(*solve(r, s, p))",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r * r / total) * ((s + p) / total)\n    prob_scissors = (s * s / total) * ((r + p) / total)\n    prob_paper = (p * p / total) * ((r + s) / total)\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "def solve(r, s, p):\n    def simulate():\n        while True:\n            x = y = None\n            while not x and not y:\n                x = random.choice([r, s, p])\n                y = random.choice([r, s, p])\n            if x == y:\n                continue\n            if x == 'r':\n                r -= 1\n            elif x == 's':\n                s -= 1\n            else:\n                p -= 1\n            if r == 0 or s == 0 or p == 0:\n                return r == 0 and s == 0 and p == 0\n    return simulate()\n\nif True:\n    import random\n    r, s, p = map(int, input().split())\n    print(solve(r, s, p))",
    "import sys\nfrom fractions import Fraction\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    total = r + s + p\n    \n    # Calculate probabilities\n    prob_rock = Fraction(r * (total - r), total * (total - 1))\n    prob_scissors = Fraction(s * (total - s), total * (total - 1))\n    prob_paper = Fraction(p * (total - p), total * (total - 1))\n    \n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = r / total\n    prob_s = s / total\n    prob_p = p / total\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock_survive = (prob_r * prob_s * prob_p) + ((1 - prob_r) * (1 - prob_s) * (1 - prob_p))\n    \n    prob_scissors_survive = (prob_r * prob_s * prob_p) + ((1 - prob_r) * (1 - prob_s) * (1 - prob_p))\n    \n    prob_paper_survive = (prob_r * prob_s * prob_p) + ((1 - prob_r) * (1 - prob_s) * (1 - prob_p))\n    \n    return prob_rock_survive, prob_scissors_survive, prob_paper_survive\n\nif True:\n    r, s, p = map(int, input().split())\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rock, prob_scissors, prob_paper)",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.read().split())\n    total = r + s + p\n    prob_rock = r / total\n    prob_scissors = s / total\n    prob_paper = p / total\n    \n    # Calculate the probabilities for each species to survive\n    prob_rock_survive = prob_rock * (prob_scissors * prob_paper)\n    prob_scissors_survive = prob_scissors * (prob_rock * prob_paper)\n    prob_paper_survive = prob_paper * (prob_rock * prob_scissors)\n    \n    # Print the probabilities\n    print(prob_rock_survive, prob_scissors_survive, prob_paper_survive)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = r / total\n    prob_scissors = s / total\n    prob_paper = p / total\n    \n    # Calculate the probabilities of each species dying\n    prob_rock_dies = prob_scissors * prob_paper\n    prob_scissors_dies = prob_rock * prob_paper\n    prob_paper_dies = prob_rock * prob_scissors\n    \n    # Calculate the probabilities of each species surviving\n    prob_rock_survive = 1 - prob_rock_dies\n    prob_scissors_survive = 1 - prob_scissors_dies\n    prob_paper_survive = 1 - prob_paper_dies\n    \n    return prob_rock_survive, prob_scissors_survive, prob_paper_survive\n\n# Read input\nr, s, p = map(int, input().split())\n\n# Solve the problem\nprob_rock, prob_scissors, prob_paper = solve(r, s, p)\n\n# Print the output\nprint(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_rock = (r / total) * ((s + p) / (total - 1))\n    prob_scissors = (s / total) * ((r + p) / (total - 1))\n    prob_paper = (p / total) * ((r + s) / (total - 1))\n    return prob_rock, prob_scissors, prob_paper\n\nif True:\n    r, s, p = map(int, input().split())\n    prob_rock, prob_scissors, prob_paper = solve(r, s, p)\n    print(prob_rock, prob_scissors, prob_paper)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = (r / total) * ((s + p) / (total - 1))\n    prob_s = (s / total) * ((r + p) / (total - 1))\n    prob_p = (p / total) * ((r + s) / (total - 1))\n    return round(prob_r, 9), round(prob_s, 9), round(prob_p, 9)\n\nif True:\n    r, s, p = map(int, input().split())\n    result = solve(r, s, p)\n    print(*result)",
    "import sys\n\ndef solve():\n    r, s, p = map(int, sys.stdin.readline().split())\n    \n    # Calculate the probabilities using the formula derived from the problem statement\n    prob_rock = (r * (s + p)) / ((r + s) * (r + p))\n    prob_scissors = (s * (r + p)) / ((r + s) * (r + p))\n    prob_paper = (p * (r + s)) / ((r + s) * (r + p))\n    \n    # Print the probabilities\n    print(prob_rock, prob_scissors, prob_paper)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    # Calculate the total number of individuals\n    total = r + s + p\n    \n    # Calculate the probabilities of each species surviving\n    prob_rock = r / total\n    prob_scissors = s / total\n    prob_paper = p / total\n    \n    return prob_rock, prob_scissors, prob_paper\n\n# Read input from standard input\ninput_data = input().split()\nr, s, p = map(int, input_data)\n\n# Solve the problem\nprobabilities = solve(r, s, p)\n\n# Print the results\nprint(*probabilities)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    prob_r = (r * (r - 1)) / ((r + s + p) * (r + s))\n    prob_s = (s * (s - 1)) / ((r + s + p) * (r + s))\n    prob_p = (p * (p - 1)) / ((r + s + p) * (r + s))\n    print(prob_r, prob_s, prob_p)\n\nif True:\n    solve()",
    "def solve(r, s, p):\n    total = r + s + p\n    if r == s == p:\n        return [1/3] * 3\n    elif r > s and r > p:\n        return [1 - (s / total) * ((p / total) ** (r - s)), 0, 0]\n    elif s > r and s > p:\n        return [0, 1 - (r / total) * ((p / total) ** (s - r)), 0]\n    else:\n        return [0, 0, 1 - (r / total) * ((s / total) ** (p - r))]\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    r, s, p = data\n    print(*solve(r, s, p))",
    "import sys\n\ndef solve(r, s, p):\n    if r == 0 or s == 0 or p == 0:\n        return [1.0] * 3\n    else:\n        return [r / (r + s + p)] * 3\n\nif True:\n    input = sys.stdin.read().split()\n    r, s, p = map(int, input)\n    result = solve(r, s, p)\n    for num in result:\n        print(f\"{num:.9f}\", end=\" \")\n    print()",
    "def solve(r, s, p):\n    # Calculate the probabilities using the concept of generating functions\n    # This approach is more complex than the direct calculation but it's a common technique in combinatorial problems\n    total = r + s + p\n    prob_rock = (r * (r - 1)) / (total * (total - 1))\n    prob_scissors = (s * (s - 1)) / (total * (total - 1))\n    prob_paper = (p * (p - 1)) / (total * (total - 1))\n\n    return prob_rock, prob_scissors, prob_paper\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(*result)",
    "def solve(r, s, p):\n    total = r + s + p\n    prob_r = (r * r) / total\n    prob_s = (s * s) / total\n    prob_p = (p * p) / total\n    return prob_r, prob_s, prob_p\n\nif True:\n    import sys\n    data = sys.stdin.read().split()\n    r, s, p = map(int, data)\n    result = solve(r, s, p)\n    print(*result)"
  ],
  "rewards": [
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.020833333333333332,
    0.020833333333333332,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.14583333333333334,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.14583333333333334,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.14583333333333334,
    0.0,
    0.0,
    0.020833333333333332,
    0.020833333333333332,
    0.0,
    0.14583333333333334,
    0.0,
    0.14583333333333334,
    0.14583333333333334,
    0.0,
    0.020833333333333332
  ],
  "time": 261.04503560066223,
  "sample times": 50
}