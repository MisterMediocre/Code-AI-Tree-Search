{
  "prompt": "\nQUESTION:\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4 2\n11 0 0 14\n5 4\n\nOutput\nYes\n\nInput\n6 1\n2 3 0 8 9 10\n5\n\nOutput\nNo\n\nInput\n4 1\n8 94 0 4\n89\n\nOutput\nYes\n\nInput\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in a[:i]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if sorted(a) != a:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if the sequence can be replaced without making it increasing\n    def can_replace(a, b):\n        for i in range(n-k):\n            if a[i] == 0 and b[i] > b[i+k]:\n                return False\n        return True\n    \n    if can_replace(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n\n    for num in a:\n        count_a[num] += 1\n\n    for num in b:\n        count_b[num] += 1\n\n    # Check if there are any numbers in a that don't have a corresponding number in b\n    missing = False\n    for i in range(201):\n        if count_a[i] > count_b[i]:\n            missing = True\n            break\n\n    # If there are missing numbers, return \"No\"\n    if missing:\n        print(\"No\")\n        return\n\n    # Find the largest number in b that is less than or equal to all numbers in a\n    max_b = 0\n    for i in range(201):\n        if count_b[i] <= count_a[i]:\n            max_b = max(max_b, i)\n\n    # Replace zeros in a with the largest number in b that is less than or equal to all numbers in a\n    result = []\n    for num in a:\n        if num == 0:\n            result.append(max_b)\n        else:\n            result.append(num)\n\n    # Check if the resulting sequence is not increasing\n    if result == sorted(result):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    def check_sequence(seq):\n        for i in range(len(seq)-1):\n            if seq[i] > seq[i+1]:\n                return False\n        return True\n    \n    def find_non_increasing_subseq(seq):\n        non_increasing_seq = []\n        for num in seq:\n            while non_increasing_seq and non_increasing_seq[-1] > num:\n                non_increasing_seq.pop()\n            non_increasing_seq.append(num)\n        return non_increasing_seq\n    \n    for i in range(n-k):\n        a[i] = 0\n    a = [num for num in a if num != 0]\n    \n    missing_elements = set(b) - set(a)\n    if len(missing_elements) > 0:\n        print(\"No\")\n        return\n    \n    non_increasing_seq = find_non_increasing_subseq(a)\n    \n    if len(non_increasing_seq) < k:\n        print(\"No\")\n        return\n    \n    for i in range(k):\n        if non_increasing_seq[i] == 0:\n            continue\n        if non_increasing_seq[i] in missing_elements:\n            missing_elements.remove(non_increasing_seq[i])\n    \n    if len(missing_elements) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if all elements in a and b are unique\n    if len(set(a + b)) != len(a + b):\n        return \"No\"\n\n    # Find the minimum value in b that is greater than the maximum value in a\n    min_b = min(b)\n    max_a = max(a)\n\n    # If there are no such values, it's impossible to make the sequence non-increasing\n    if min_b <= max_a:\n        return \"No\"\n\n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(min_b)\n            min_b += 1\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is non-increasing\n    if result == sorted(result, reverse=True):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    def check_sequence(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n    \n    def replace_zeros(a, b):\n        result = []\n        for i in range(n):\n            if a[i] == 0:\n                result.append(b.pop(0))\n            else:\n                result.append(a[i])\n        return result\n    \n    new_a = replace_zeros(a, b)\n    if check_sequence(new_a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b to fill all zeros in a\n    if len(set(b)) < sum(a):\n        print(\"No\")\n        return\n    \n    # Find the smallest number in b that is greater than the maximum number in a\n    min_b = min([b[i] for i in range(k) if b[i] > max(a)])\n    \n    # Replace each zero in a with the smallest available number from b\n    result = [min_b if a[i] == 0 else a[i] for i in range(n)]\n    \n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if the sum of all elements in a is less than or equal to the sum of all elements in b\n    if sum(a) > sum(b):\n        print(\"No\")\n        return\n    \n    # Check if there is any duplicate element in a or b\n    if len(set(a)) != len(a) or len(set(b)) != len(b):\n        print(\"No\")\n        return\n    \n    # Try to find a non-increasing subsequence in a\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            break\n        i += 1\n    if i == n:\n        print(\"No\")\n        return\n    \n    # Find the maximum value in the non-increasing subsequence\n    max_val = a[i]\n    for j in range(i - 1, -1, -1):\n        if a[j] >= max_val:\n            max_val = a[j]\n        else:\n            break\n    \n    # Check if the remaining elements in a can form a non-increasing subsequence starting from max_val\n    for j in range(i + 1, n):\n        if a[j] <= max_val:\n            continue\n        else:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n    \n    # Check if there are any numbers that appear more than once in either a or b\n    for i in range(1, 201):\n        if count_a[i] > 1 or count_b[i] > 1:\n            return \"No\"\n    \n    # Find the maximum value in b\n    max_b = max(b)\n    \n    # Check if the sum of all elements in a is less than or equal to max_b\n    if sum(a) <= max_b:\n        return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    # Check if there are enough unique numbers in b to replace all zeros\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] not in a[:i]:\n                    a[i] = b[j]\n                    found = True\n                    break\n            if not found:\n                print(\"No\")\n                return\n    \n    # Check if the resulting sequence is not increasing\n    if sorted(a) != a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    # Check if there are any duplicate numbers in either array\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n    \n    # Try all combinations of replacing zeros with elements from b\n    for i in range(k):\n        new_a = a[:]\n        new_a[i] = b[i]\n        \n        # Check if the resulting sequence is increasing\n        if all(new_a[j] <= new_a[j+1] for j in range(n-1)):\n            return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Check if all elements in a are unique\n    if len(a) != len(set(a)):\n        print(\"No\")\n        return\n    \n    # Check if there are any duplicates between a and b\n    if any(x in a for x in b):\n        print(\"No\")\n        return\n    \n    # Check if there are any duplicates between b and a\n    if any(x in b for x in a):\n        print(\"No\")\n        return\n    \n    # Try to replace zeros in a with elements in b\n    for i in range(k):\n        if a[i] == 0:\n            for j in range(len(b)):\n                if b[j] not in a:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    if a[i-1] > a[i]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if the sequence is already increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"No\")\n        return\n    \n    # Try replacing zeros with elements from b\n    for i in range(k):\n        if b[i] == 0:\n            continue\n        \n        # Replace the zero in a with b[i] and check if the sequence remains increasing\n        new_a = a[:]\n        new_a[a.index(0)] = b[i]\n        \n        if all(new_a[j] <= new_a[j+1] for j in range(n-1)):\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Count occurrences of each number in a and b\n    a_count = {}\n    b_count = {}\n    for num in a:\n        a_count[num] = a_count.get(num, 0) + 1\n    for num in b:\n        b_count[num] = b_count.get(num, 0) + 1\n    \n    # Check if there are any numbers in a that appear more than once in b\n    for num, count in a_count.items():\n        if num in b_count and count > b_count[num]:\n            return \"No\"\n    \n    # Check if there are any numbers in b that appear more than once in a\n    for num, count in b_count.items():\n        if num in a_count and count > a_count[num]:\n            return \"No\"\n    \n    # Find the smallest number in a that is greater than the largest number in b\n    min_a = min(a)\n    max_b = max(b)\n    if min_a <= max_b:\n        return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    def is_increasing(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n    \n    def find_non_increasing_index(seq):\n        for i in range(len(seq)-1, -1, -1):\n            if seq[i] > seq[i+1]:\n                return i\n        return None\n    \n    def can_make_non_increasing(a, b):\n        non_increasing_index = find_non_increasing_index(a)\n        if non_increasing_index is None:\n            return False\n        \n        remaining_a = [x for x in a if x != 0]\n        remaining_b = [x for x in b if x != 0]\n        \n        if len(remaining_a) == len(remaining_b):\n            return True\n        \n        # Try replacing the non-increasing element with the smallest remaining element in b\n        for i in range(len(b)):\n            if b[i] <= remaining_a[non_increasing_index]:\n                remaining_a[non_increasing_index] = b[i]\n                break\n        \n        # Check if the resulting sequence is still non-increasing\n        return is_increasing(remaining_a)\n    \n    if can_make_non_increasing(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    def is_increasing(seq):\n        return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n    \n    for i in range(k):\n        if a[i] == 0:\n            if not is_increasing(b):\n                return \"No\"\n            b.remove(b[i])\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    \n    for num in b:\n        count_b[num] += 1\n    \n    # Check if it's possible to replace zeros with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            if count_b[b[i]] > 0:\n                count_b[b[i]] -= 1\n            else:\n                return \"No\"\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            return \"No\"\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if all elements in b are unique and within the range [0, 200]\n    if len(set(b)) != k or max(b) > 200:\n        return \"No\"\n\n    # Try replacing each zero in a with an element from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element in b that is greater than or equal to a[i]\n            j = bisect.bisect_left(b, a[i])\n            if j < k:\n                a[i] = b[j]\n                break\n\n    # Check if the resulting sequence is not increasing\n    if a == sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    def check_sequence(seq):\n        for i in range(len(seq)-1):\n            if seq[i] > seq[i+1]:\n                return False\n        return True\n\n    def replace_zeros(a, b):\n        for i in range(k):\n            if a[i] == 0:\n                a[i] = b[i]\n        return a\n\n    a = replace_zeros(a, b)\n    if check_sequence(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Check if there are enough elements in a to replace zeros with elements from b\n    if sum(a) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            # Find the smallest available element from b\n            min_b = min(b)\n            # Replace the zero with the smallest available element\n            a[i] = min_b\n            # Remove the replaced element from b\n            b.remove(min_b)\n    \n    # Check if the resulting sequence is not increasing\n    if sorted(a) != a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Count occurrences of each number in a and b\n    a_count = [0] * 201\n    b_count = [0] * 201\n    for num in a:\n        a_count[num] += 1\n    for num in b:\n        b_count[num] += 1\n\n    # Find the maximum occurrence of each number in a\n    max_a_count = max(a_count)\n\n    # Check if it's possible to replace zeros with numbers from b\n    for i in range(k):\n        if a[i] == 0:\n            # Check if there's enough available numbers in b\n            if b_count[b[i]] < max_a_count:\n                return \"No\"\n            # Decrease the count of the chosen number in b\n            b_count[b[i]] -= 1\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i - 1] > a[i]:\n            return \"No\"\n\n    print(\"Yes\")\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k = int(data[1])\n    \n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if all numbers in a and b are unique\n    if len(a) != len(set(a)) or len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Find the smallest non-increasing index where a[i] < b[j]\n    i = 0\n    while i < n and a[i] >= b[i]:\n        i += 1\n    \n    # If all elements are already in increasing order, return \"No\"\n    if i == n:\n        print(\"No\")\n        return\n    \n    # Replace the zero with the smallest available element in b\n    for j in range(k):\n        if a[i] == 0:\n            a[i] = b[j]\n            break\n    \n    # Check if the resulting sequence is not increasing\n    if a[i] > a[i+1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are any duplicate numbers in a or b\n    if len(a) != len(set(a)) or len(b) != len(set(b)):\n        return \"No\"\n    \n    # Find all possible replacements for zeros in a\n    replacements = []\n    for i in range(n):\n        if a[i] == 0:\n            replacements.append(i)\n    \n    # Try all possible combinations of replacements\n    for comb in itertools.combinations(replacements, k):\n        new_a = a.copy()\n        for r in comb:\n            new_a[r] = b[0]\n            b.pop(0)\n        \n        # Check if the resulting sequence is not increasing\n        if sorted(new_a) != new_a:\n            return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b\n    if len(set(b)) < len(a):\n        print(\"No\")\n        return\n    \n    # Try to replace zeros in a with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            for j in range(len(b)):\n                if b[j] != 0 and b[j] not in a[:i]:\n                    a[i] = b[j]\n                    break\n            else:\n                print(\"No\")\n                return\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n    \n    # Find the maximum value in b\n    max_b = max(b)\n    \n    # Create a new sequence by replacing zeros in a with values from b\n    result = [a[i] if a[i] else max_b for i in range(n)]\n    \n    # Check if the resulting sequence is increasing\n    if result == sorted(result):\n        return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    def is_increasing(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n    \n    def can_replace(a, b):\n        missing = [i for i in range(201) if i not in a]\n        for i in range(k):\n            if b[i] not in missing:\n                missing.remove(b[i])\n        return len(missing) == 0\n    \n    if can_replace(a, b) and not is_increasing(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    def check_sequence(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n\n    def find_valid_sequence(a, b):\n        for i in range(n):\n            if a[i] == 0:\n                for j in range(k):\n                    a[i] = b[j]\n                    if check_sequence(a):\n                        return True\n                    a[i] = 0\n        return False\n\n    if find_valid_sequence(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if all numbers in b are unique\n    if len(set(b)) != k:\n        print(\"No\")\n        return\n    \n    # Find the maximum number in a\n    max_a = max(a)\n    \n    # Create a dictionary to store the frequency of each number in a\n    freq_a = {}\n    for num in a:\n        if num in freq_a:\n            freq_a[num] += 1\n        else:\n            freq_a[num] = 1\n    \n    # Try to replace zeros in a with elements in b\n    for i in range(k):\n        if b[i] == 0:\n            # Find the smallest number in a that is greater than the maximum number in a\n            min_a = min(num for num in a if num > max_a)\n            \n            # Replace the zero in a with the smallest number found\n            a[a.index(0)] = min_a\n            \n            # Decrease the frequency of the replaced number\n            freq_a[min_a] -= 1\n            \n            # If the frequency of the replaced number becomes negative, break the loop\n            if freq_a[min_a] < 0:\n                print(\"No\")\n                return\n    \n    # Check if the resulting sequence is not increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:2+n]))\n    b = list(map(int, data[2+n:2+n+k]))\n    \n    # Check if there are any duplicate numbers in a or b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        return \"No\"\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            if all(x != b[i] for x in a[:i]):\n                a[i] = b[i]\n    \n    # Check if the resulting sequence is not increasing\n    if a != sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        return \"No\"\n    \n    # Find the maximum value in a\n    max_a = max(a)\n    \n    # Create a new sequence where each zero is replaced by a non-zero value from b\n    new_sequence = []\n    for i in range(n):\n        if a[i] == 0:\n            new_sequence.append(max_b)\n            max_b -= 1\n        else:\n            new_sequence.append(a[i])\n    \n    # Check if the new sequence is not increasing\n    for i in range(len(new_sequence)-1):\n        if new_sequence[i] > new_sequence[i+1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    def check_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < seq[i-1]:\n                return False\n        return True\n    \n    def find_non_increasing_subseq(seq):\n        subseq = []\n        for num in seq:\n            if not subseq or num >= subseq[-1]:\n                subseq.append(num)\n        return subseq\n    \n    def replace_zeros_with_b(a, b):\n        non_increasing_subseq = find_non_increasing_subseq(b)\n        if len(non_increasing_subseq) != k:\n            return False\n        \n        for i, num in enumerate(a):\n            if num == 0:\n                a[i] = non_increasing_subseq.pop()\n        \n        return check_sequence(a)\n    \n    result = replace_zeros_with_b(a, b)\n    print(\"Yes\" if result else \"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[0].split())\n    a = list(map(int, data[1].split()))\n    b = list(map(int, data[2].split()))\n\n    # Count occurrences of each number in a and b\n    count_a = {}\n    count_b = {}\n    for num in a:\n        count_a[num] = count_a.get(num, 0) + 1\n    for num in b:\n        count_b[num] = count_b.get(num, 0) + 1\n\n    # Check if there are enough unique numbers in b to replace all zeros in a\n    unique_b = set(b)\n    if len(unique_b) < k:\n        return \"No\"\n\n    # Try to find a valid replacement sequence\n    for i in range(n):\n        if a[i] == 0:\n            # Find a number from b that hasn't been used yet\n            for j in unique_b:\n                if count_b[j] > 0:\n                    count_b[j] -= 1\n                    a[i] = j\n                    break\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i-1] > a[i]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k = int(data[1])\n    \n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    used = set()\n    \n    def dfs(i):\n        if i == n:\n            return True\n        \n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in used:\n                    used.add(b[j])\n                    if dfs(i+1):\n                        return True\n                    used.remove(b[j])\n        \n        return dfs(i+1)\n    \n    result = dfs(0)\n    \n    if result:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique elements in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Find the minimum value in b\n    min_b = min(b)\n    \n    # Replace zeros in a with the minimum value in b\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = min_b\n    \n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if the sum of all elements in a is greater than the sum of all elements in b\n    if sum(a) > sum(b):\n        return \"No\"\n\n    # Sort the elements in a and b\n    a.sort()\n    b.sort()\n\n    # Iterate through the elements in a\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        # Find the smallest element in b that is greater than a[i]\n        j = bisect.bisect_left(b, a[i])\n        if j < len(b) and b[j] > a[i]:\n            # Replace the zero in a with the smallest element in b\n            a[i] = b[j]\n        else:\n            return \"No\"\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if len(set(a)) != len(set(b)):\n        return \"No\"\n    \n    if sum(a) == sum(b):\n        return \"Yes\"\n    \n    if min(a) > max(b):\n        return \"Yes\"\n    \n    if min(b) > max(a):\n        return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if all elements in b are unique and within the range [1, 200]\n    if len(set(b)) != k or max(b) > 200 or min(b) < 1:\n        return \"No\"\n\n    # Check if the sequence can be made non-increasing by replacing zeros with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            if not b or b[0] > a[i]:\n                return \"No\"\n            else:\n                b.pop(0)\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n\n    # Check if it's possible to replace zeros with numbers from b\n    for i in range(n):\n        if a[i] == 0:\n            if count_b[b[i]] > 0:\n                count_b[b[i]] -= 1\n            else:\n                return \"No\"\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            return \"No\"\n\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique elements in b\n    if len(b) < k:\n        print(\"No\")\n        return\n    \n    # Create a set of all elements in b\n    b_set = set(b)\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Check if the replacement is valid\n            if b_set - {a[i]} != set():\n                a[i] = next(iter(b_set - {a[i]}))\n    \n    # Check if the resulting sequence is not increasing\n    if a == sorted(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if there are enough unique numbers in b\n    if len(b) < len(set(b)):\n        return \"No\"\n\n    # Find the smallest non-increasing element in a\n    min_non_increasing = None\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if min_non_increasing is None or a[i] <= min_non_increasing:\n            min_non_increasing = a[i]\n\n    # If there is no such element, return \"No\"\n    if min_non_increasing is None:\n        return \"No\"\n\n    # Replace all zeros in a with the smallest non-increasing element\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = min_non_increasing\n\n    # Check if the resulting sequence is not increasing\n    if a == sorted(a, reverse=True):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b to cover all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n    \n    # Create a set to keep track of used numbers in b\n    used_b = set()\n    \n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest unused number in b\n            while True:\n                if b[k-1-i] not in used_b:\n                    result.append(b[k-1-i])\n                    used_b.add(b[k-1-i])\n                    break\n                k -= 1\n        else:\n            result.append(a[i])\n    \n    # Check if the resulting sequence is not increasing\n    if result != sorted(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b to fill all zeros in a\n    unique_b = set(b)\n    if len(unique_b) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(k):\n        if b[i] == 0:\n            a[i] = b[i]\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    def check_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] < seq[i-1]:\n                return False\n        return True\n    \n    for i in range(k):\n        for j in range(len(b)):\n            if b[j] != 0:\n                a[i] = b[j]\n                break\n    \n    if check_sequence(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if all elements in b are unique and within the range [1, 200]\n    if len(set(b)) != k or max(b) > 200 or min(b) < 1:\n        print(\"No\")\n        return\n    \n    # Try to replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] not in a:\n                    a[i] = b[j]\n                    found = True\n                    break\n            if not found:\n                print(\"No\")\n                return\n            \n    # Check if the resulting sequence is not increasing\n    if a == sorted(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif True:\n    main()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    \n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n    \n    # Check if it's possible to replace zeros in a with elements in b\n    for i in range(k):\n        if count_a[0] > count_b[b[i]]:\n            return \"No\"\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            return \"No\"\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    def check_sequence(seq):\n        return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n    \n    def replace_zeros(a, b):\n        result = [a[i] if a[i] != 0 else b[i] for i in range(n)]\n        return result\n    \n    for i in range(k):\n        if a[i] == 0:\n            a[i] = b[i]\n    \n    if check_sequence(replace_zeros(a, b)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    def is_increasing(arr):\n        for i in range(len(arr)-1):\n            if arr[i] >= arr[i+1]:\n                return False\n        return True\n    \n    def check_replacement(a, b):\n        for i in range(n):\n            if a[i] == 0:\n                if b[i % len(b)] not in a:\n                    return False\n        return is_increasing(a)\n    \n    if check_replacement(a, b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if there are duplicate numbers in either a or b\n    if len(set(a)) > 200 or len(set(b)) > 200:\n        print(\"No\")\n        return\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    found = True\n                    break\n            if not found:\n                print(\"No\")\n                return\n\n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i-1] > a[i]:\n            print(\"No\")\n            return\n\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    # Check if all numbers in b are unique\n    if len(set(b)) != k:\n        print(\"No\")\n        return\n    \n    # Check if there are enough unique numbers in b to replace all zeros in a\n    if len(set(a)) < k:\n        print(\"No\")\n        return\n    \n    # Try to replace zeros in a with elements from b\n    for i in range(k):\n        if a[i] == 0:\n            if b[i] not in a[:i]:\n                print(\"Yes\")\n                return\n    \n    print(\"No\")\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Count occurrences of each number in a and b\n    count_a = [0] * 201\n    count_b = [0] * 201\n    for num in a:\n        count_a[num] += 1\n    for num in b:\n        count_b[num] += 1\n\n    # Check if there are any duplicates\n    if any(count > 1 for count in count_a) or any(count > 1 for count in count_b):\n        print(\"No\")\n        return\n\n    # Find the smallest number in b that can be placed after a zero\n    smallest_after_zero = float('inf')\n    for i in range(k):\n        if a[i] == 0:\n            smallest_after_zero = min(smallest_after_zero, b[i])\n\n    # Check if the sequence is increasing\n    if smallest_after_zero < 0:\n        print(\"No\")\n        return\n\n    # Print \"Yes\" if the sequence is not increasing\n    print(\"Yes\")\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.2127659574468085,
    0.14893617021276595,
    0.06382978723404255,
    0.0,
    0.1276595744680851,
    0.1702127659574468,
    0.06382978723404255,
    0.0,
    0.8723404255319149,
    0.0,
    0.3617021276595745,
    0.02127659574468085,
    0.0,
    0.0,
    0.0,
    0.2127659574468085,
    0.0,
    0.1276595744680851,
    0.8085106382978723,
    0.1702127659574468,
    0.3191489361702128,
    0.0,
    0.14893617021276595,
    0.0,
    0.14893617021276595,
    0.02127659574468085,
    0.3404255319148936,
    0.0,
    0.0,
    0.3829787234042553,
    0.0,
    0.851063829787234,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2127659574468085,
    0.7659574468085106,
    0.0,
    0.48936170212765956,
    0.2978723404255319,
    0.851063829787234,
    0.8723404255319149,
    0.1702127659574468,
    0.0,
    0.14893617021276595,
    0.23404255319148937,
    0.14893617021276595,
    0.5531914893617021
  ],
  "train rewards": [
    0.0,
    0.1276595744680851,
    0.2765957446808511,
    0.0425531914893617,
    0.0,
    0.1702127659574468,
    0.2978723404255319,
    0.2765957446808511,
    0.0,
    0.8297872340425532,
    0.0,
    0.3404255319148936,
    0.0425531914893617,
    0.0,
    0.0,
    0.0,
    0.14893617021276595,
    0.0,
    0.2765957446808511,
    0.7021276595744681,
    0.10638297872340426,
    0.40425531914893614,
    0.0,
    0.3191489361702128,
    0.0,
    0.2765957446808511,
    0.06382978723404255,
    0.3829787234042553,
    0.0,
    0.0,
    0.3829787234042553,
    0.0,
    0.723404255319149,
    0.0,
    0.0,
    0.0,
    0.0,
    0.14893617021276595,
    0.8936170212765957,
    0.0,
    0.3191489361702128,
    0.3404255319148936,
    0.723404255319149,
    0.8297872340425532,
    0.10638297872340426,
    0.0425531914893617,
    0.2765957446808511,
    0.10638297872340426,
    0.2765957446808511,
    0.44680851063829785
  ],
  "time": 328.9877462387085,
  "sample times": 50
}