{
  "prompt": "\nQUESTION:\nYou have a set of items, each having some integer weight not greater than $8$. You denote that a subset of items is good if total weight of items in the subset does not exceed $W$.\n\nYou want to calculate the maximum possible weight of a good subset of items. Note that you have to consider the empty set and the original set when calculating the answer.\n\n\n-----Input-----\n\nThe first line contains one integer $W$ ($0 \\le W \\le 10^{18}$) \u2014 the maximum total weight of a good subset.\n\nThe second line denotes the set of items you have. It contains $8$ integers $cnt_1$, $cnt_2$, ..., $cnt_8$ ($0 \\le cnt_i \\le 10^{16}$), where $cnt_i$ is the number of items having weight $i$ in the set.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible weight of a good subset of items.\n\n\n-----Examples-----\nInput\n10\n1 2 3 4 5 6 7 8\n\nOutput\n10\n\nInput\n0\n0 0 0 0 0 0 0 0\n\nOutput\n0\n\nInput\n3\n0 4 1 0 0 9 8 3\n\nOutput\n3\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(cnt[i], W + 1):\n            dp[j] = max(dp[j], dp[j - cnt[i]] + i)\n    return dp[W]\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    W = int(data[0])\n    cnt = list(map(int, data[1:]))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    import sys\n    data = sys.stdin.read().split()\n    W = int(data[0])\n    cnts = list(map(int, data[1:]))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, W + 1):\n        for j in range(8):\n            if cnt[j] > 0 and i - j * cnt[j] >= 0:\n                dp[i] = max(dp[i], dp[i - j * cnt[j]] + j * cnt[j])\n    return dp[W]\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(cnt[i - 1], W + 1):\n            dp[j] = max(dp[j], dp[j - i])\n    return dp[W]\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(cnts[i], W // i) * i\n            W -= min(cnts[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W // i)\n            W -= min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    return max(0, min(W, sum(cnt * i for i, cnt in enumerate(cnts, start=1))))\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    W = int(data[0])\n    cnts = list(map(int, data[1:]))\n    print(solve(W, cnts))",
    "def solve(W, cnts):\n    return max(0, min(W, sum(cnt * i for i, cnt in enumerate(cnts, start=1))))\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    W = data[0]\n    cnts = data[1:]\n    print(solve(W, cnts))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    W = int(data[0])\n    cnts = [int(x) for x in data[1:]]\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(W, i * cnt[i])\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(cnts[i], W)\n            W -= min(cnts[i], W)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W)\n            W -= min(cnt[i], W)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n        W -= min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(W // i, cnts[i])\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        dp[i] = max(dp[i], dp[i - 1])\n        for j in range(cnt[i]):\n            dp[i + j] = max(dp[i + j], dp[i] + j)\n    return max(dp[W], dp[0])\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(cnts[i], W // i)\n            W -= min(cnts[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(W - i * cnt[i], -1, -1):\n            dp[j + i * cnt[i]] = max(dp[j + i * cnt[i]], dp[j] + i * cnt[i])\n    return dp[W]\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    W = data[0]\n    cnt = data[1:]\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(W // i, cnts[i])\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, W + 1):\n        for j in range(8):\n            if cnt[j] > 0 and i >= j + 1:\n                dp[i] = max(dp[i], dp[i - j - 1] + j + 1)\n    return dp[W]\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n        W %= i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(cnt[i], W + 1):\n            dp[j] = max(dp[j], dp[j - cnt[i]] + i)\n    return dp[W]\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(i * cnt[i], W + 1):\n            dp[j] = max(dp[j], dp[j - i * cnt[i]] + i * cnt[i])\n    return max(dp)\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnts[i] > 0:\n            max_weight += min(W // i, cnts[i])\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    dp = [0] * (W + 1)\n    for i in range(1, 9):\n        for j in range(cnt[i], W + 1):\n            dp[j] = max(dp[j], dp[j - cnt[i]] + i)\n    return dp[W]\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W)\n            W -= min(cnt[i], W)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i)\n        W -= min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(W // i, cnt[i]) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        if cnt[i] > 0:\n            max_weight += min(cnt[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))",
    "def solve(W, cnts):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnts[i], W // i)\n    return max_weight\n\nif True:\n    W = int(input())\n    cnts = list(map(int, input().split()))\n    print(solve(W, cnts))",
    "def solve(W, cnt):\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += min(cnt[i], W // i) * i\n    return max_weight\n\nif True:\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    print(solve(W, cnt))"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.3409090909090909,
    0.0,
    0.045454545454545456,
    0.0,
    0.0,
    0.0,
    0.0,
    0.8181818181818182,
    0.8181818181818182,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.5909090909090909,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.20454545454545456,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.9545454545454546,
    0.9545454545454546,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.5681818181818182,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": 165.08184576034546,
  "sample times": 50
}