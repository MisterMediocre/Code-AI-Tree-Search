{
  "prompt": "\nQUESTION:\nThis morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.\n\nHe decided to accomplish this by closing every $k$-th ($2 \\leq k \\leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \\cdot k$ that satisfy the following condition: $1 \\leq c \\leq n$ and $i$ is an integer (it may be positive, negative or zero).\n\nFor example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.\n\nAfter closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq k < n \\leq 100$) \u2014 the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n\n\n-----Examples-----\nInput\n4 2\n1 1 -1 1\n\nOutput\n2\n\nInput\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.\n\nIn the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i, tab in enumerate(tabs):\n        if tab == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    def find_remaining_tabs(tab_info):\n        remaining_test = sum(1 for info in tab_info if info == 1)\n        remaining_social = sum(1 for info in tab_info if info == -1)\n        return remaining_test, remaining_social\n    \n    max_diff = 0\n    for b in range(1, n + 1):\n        remaining_test, remaining_social = find_remaining_tabs([tab_info[i] for i in range(n) if (i + b - 1) % k == 0])\n        diff = abs(remaining_test - remaining_social)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nsolve()",
    "def solve(n, k):\n    tabs = list(map(int, input().split()))\n    e = sum(1 for tab in tabs if tab == 1)\n    s = len(tabs) - e\n    return max(abs(e - s))\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    tab_types = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tab_types[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    for i in range(1, n):\n        if tab_types[i] == 1:\n            e -= 1\n        else:\n            s -= 1\n        \n        max_diff = max(max_diff, abs(e - s))\n        \n    return max_diff\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for i in range(2, n):\n        new_e = e - sum(tabs[i:i+k])\n        new_s = s - sum(tabs[i:i+k])\n        \n        max_diff = max(max_diff, abs(new_e - new_s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    # Read the input\n    info = list(map(int, input().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = s = 0\n    \n    # Iterate through the tabs\n    for i in range(1, n + 1):\n        # If the tab has information for the test, increment the counter\n        if info[i - 1] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    # Calculate the maximum absolute difference\n    return max(abs(e - s), abs(s - e))\n\n# Main function\nif True:\n    # Read the input\n    n, k = map(int, input().split())\n    # Solve the problem\n    result = solve(n, k)\n    # Print the result\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e = sum(tabs)\n    s = len([tab for tab in tabs if tab == -1])\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    while True:\n        new_e = 0\n        new_s = 0\n        \n        for i in range(n):\n            if i % k != 0:\n                if tabs[i] == 1:\n                    new_e += 1\n                else:\n                    new_s += 1\n        \n        if new_e == e and new_s == s:\n            break\n        \n        max_diff = max(max_diff, abs(new_e - new_s))\n        \n        e, s = new_e, new_s\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k, tab_types):\n    e = sum(tab_types)\n    s = len([tab for tab in tab_types if tab == -1])\n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    print(solve(n, k, tab_types))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    tabs = data[2:]\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    for i in range(1, n):\n        if i % k == 0:\n            e -= 1\n            s -= 1\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs_info = list(map(int, input().split()))\n    \n    e = sum(1 for tab in tabs_info if tab == 1)\n    s = sum(1 for tab in tabs_info if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        count_e = count_s = 0\n        for i in range(b, n, k):\n            if tabs_info[i] == 1:\n                count_e += 1\n            elif tabs_info[i] == -1:\n                count_s += 1\n        \n        diff = abs(count_e - count_s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k = int(data[1])\n    tabs = list(map(int, data[2:]))\n    \n    def count_tabs(tabs, type):\n        return sum(1 for tab in tabs if tab == type)\n    \n    e = count_tabs(tabs, 1)\n    s = count_tabs(tabs, -1)\n    \n    max_diff = abs(e - s)\n    for b in range(n):\n        if tabs[b] == 1:\n            continue\n        new_e = e - count_tabs(tabs[:b], 1) + count_tabs(tabs[b+1:], 1)\n        new_s = s - count_tabs(tabs[:b], -1) + count_tabs(tabs[b+1:], -1)\n        max_diff = max(max_diff, abs(new_e - new_s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    info_tabs = [1 if num == 1 else -1 for num in input().split()]\n    e = sum(info_tabs)\n    s = len([tab for tab in info_tabs if tab == -1])\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_types = data[2:]\n    \n    # Initialize counters for tabs of different types\n    e = sum(tab_types)\n    s = len([tab for tab in tab_types if tab == -1])\n    \n    # Close tabs according to the given rules\n    for i in range(1, n):\n        if (i % k == 0) and (tab_types[i] == 1):\n            e -= 1\n        elif (i % k == 0) and (tab_types[i] == -1):\n            s -= 1\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    solve()",
    "def main():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    e = sum(1 for info in tab_info if info == 1)\n    s = sum(1 for info in tab_info if info == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    result = main()\n    print(result)",
    "def solve(n, k):\n    # Read the input\n    tabs = list(map(int, input().split()))\n    \n    # Initialize counters for test and social network tabs\n    e = sum(tabs)\n    s = len([tab for tab in tabs if tab == -1])\n    \n    # Calculate the maximum absolute difference\n    max_diff = abs(e - s)\n    \n    return max_diff\n\n# Main function\nif True:\n    # Read the input\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    # Print the output\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    return max_diff\n\nif True:\n    solve()",
    "def solve(n, k):\n    info_tabs = [1 if i == 1 else -1 for i in range(1, n+1)]\n    remaining_info_tabs = []\n    remaining_social_network_tabs = []\n\n    for i in range(1, n+1):\n        if info_tabs[i-1] == 1:\n            remaining_info_tabs.append(i)\n        else:\n            remaining_social_network_tabs.append(i)\n\n    e = len(remaining_info_tabs)\n    s = len(remaining_social_network_tabs)\n\n    return abs(e - s)\n\n# Read input\ninput_data = input().split()\nn = int(input_data[0])\nk = int(input_data[1])\n\ninfo_tabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(2, n):\n        new_e, new_s = 0, 0\n        for j in range(i):\n            if tabs[j] == 1:\n                new_e += 1\n            else:\n                new_s += 1\n        max_diff = max(max_diff, abs(new_e - new_s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    for i in range(1, n):\n        if i % k == 0:\n            e -= 1\n            s -= 1\n    \n    max_diff = max(max_diff, abs(e - s))\n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k, tabs):\n    e, s = sum(tabs), 0\n    for i in range(1, n):\n        if (i + k - 1) % k == 0:\n            e -= tabs[i]\n            s += tabs[i]\n    return abs(e - s)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn, k = map(int, data[:2])\ntabs = list(map(int, data[2:]))\n\n# Solve the problem\nresult = solve(n, k, tabs)\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(n):\n        count_test = 0\n        count_social = 0\n        for i in range(b, n, k):\n            if tabs[i] == 1:\n                count_test += 1\n            elif tabs[i] == -1:\n                count_social += 1\n        \n        diff = abs(count_test - count_social)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k, tabs):\n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    max_diff = abs(e - s)\n    \n    while True:\n        new_e = 0\n        new_s = 0\n        for i in range(1, n + 1, k):\n            if tabs[i - 1] == 1:\n                new_e += 1\n            else:\n                new_s += 1\n        \n        if new_e == e and new_s == s:\n            break\n        \n        e = new_e\n        s = new_s\n    \n    return max_diff\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    print(solve(n, k, tabs))",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_network_tabs = [-1] * n\n    \n    # Close every k-th tab\n    for i in range(2, n):\n        if i % k == 0:\n            info_tabs[i-1] = 0\n            social_network_tabs[i-1] = 0\n    \n    # Count remaining tabs of each type\n    e = sum(info_tabs)\n    s = sum(social_network_tabs)\n    \n    # Calculate the maximum absolute difference\n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ninfo_tabs = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k):\n    tabs_info = [int(input()) for _ in range(n)]\n    e, s = 0, 0\n    \n    for i in range(1, n + 1):\n        if i % k == 0:\n            if tabs_info[i - 1] == 1:\n                s += 1\n            else:\n                e += 1\n                \n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ntabs_info = list(map(int, input().split()))\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    info_tabs = [1 if x == 1 else -1 for x in input().split()]\n    \n    e = sum(info_tabs[i] for i in range(0, n, k))\n    s = sum(info_tabs[i] for i in range(k, n, k))\n    \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i, tab in enumerate(tabs):\n        if i % k == 0 and tab == 1:\n            e += 1\n        elif i % k == 0 and tab == -1:\n            s += 1\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs_info = [int(input()) for _ in range(n)]\n    \n    e, s = 0, 0\n    \n    for i, info in enumerate(tabs_info):\n        if info == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs_info = list(map(int, input().split()))\n\n# Solve the problem\nmax_diff = solve(n, k)\n\n# Print the result\nprint(max_diff)",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_networks = [-1] * n\n    \n    # Close every k-th tab\n    for i in range(2, n):\n        if i % k == 0:\n            info_tabs[i - 1] = 0\n            social_networks[i - 1] = 0\n    \n    # Calculate the amount of remaining tabs of different types\n    e = sum(info_tabs)\n    s = sum(social_networks)\n    \n    return abs(e - s)\n\n# Read input\ninput_data = input().split()\nn = int(input_data[0])\nk = int(input_data[1])\n\ninfo_tabs = list(map(int, input().split()))\nsocial_networks = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_types = data[2:]\n    \n    def find_remaining_tabs(tab_type):\n        return sum(1 for tab in range(1, n + 1) if tab % k != 0 and tab_types[tab - 1] == tab_type)\n    \n    e = find_remaining_tabs(1)\n    s = find_remaining_tabs(-1)\n    \n    max_diff = abs(e - s)\n    print(max_diff)\n\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    \n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    for i in range(2, n):\n        if i % k == 0:\n            if tabs[i - 1] == 1:\n                e -= 1\n            else:\n                s -= 1\n    \n    return max_diff\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_types = data[2:]\n    \n    def count_tabs(tab_type):\n        return sum(1 for t in tab_types if t == tab_type)\n    \n    max_diff = 0\n    \n    for b in range(1, n+1):\n        e = count_tabs(1) - count_tabs(-1)\n        s = count_tabs(-1)\n        \n        diff = abs(e - s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k, tabs):\n    e, s = 0, 0\n    for i in range(1, n + 1):\n        if tabs[i - 1] == 1:\n            e += 1\n        else:\n            s += 1\n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    print(solve(n, k, tabs))",
    "def solve(n, k, tab_info):\n    e = sum(1 for info in tab_info if info == 1)\n    s = sum(1 for info in tab_info if info == -1)\n    \n    max_diff = 0\n    for b in range(1, n):\n        remaining_e = e - sum(1 for info in tab_info[b:] if info == 1)\n        remaining_s = s - sum(1 for info in tab_info[b:] if info == -1)\n        \n        max_diff = max(max_diff, abs(remaining_e - remaining_s))\n    \n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    print(solve(n, k, tab_info))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_types = data[2:]\n    \n    def get_remaining_tabs(tab_type):\n        return sum(1 for tab in tab_types if tab == tab_type)\n    \n    e = get_remaining_tabs(1)\n    s = get_remaining_tabs(-1)\n    \n    max_diff = abs(e - s)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve(n, k):\n    tabs_info = [1 if x == 1 else -1 for x in input().split()]\n    e, s = 0, 0\n    \n    for i in range(1, n + 1):\n        if i % k != 0:\n            if tabs_info[i - 1] == 1:\n                e += 1\n            else:\n                s += 1\n    \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve(n, k, tabs):\n    e, s = sum(tabs == 1), sum(tabs == -1)\n    while True:\n        to_close = []\n        for i in range(1, n // k + 1):\n            to_close.append(i * k)\n        for c in to_close:\n            tabs[c - 1] = 0\n        e -= sum(tabs == 1)\n        s -= sum(tabs == -1)\n        if e <= s:\n            break\n    return abs(e - s)\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve and print output\nprint(solve(n, k, tabs))",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve(n, k, tabs):\n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    max_diff = abs(e - s)\n    \n    while True:\n        new_e = sum(1 for i in range(k) if (i + 1) * k <= n and tabs[(i + 1) * k - 1] == 1)\n        new_s = sum(1 for i in range(k) if (i + 1) * k <= n and tabs[(i + 1) * k - 1] == -1)\n        if new_e != e or new_s != s:\n            e = new_e\n            s = new_s\n            max_diff = max(max_diff, abs(e - s))\n        else:\n            break\n    \n    return max_diff\n\n# Read input\nn, k = map(int, input().split())\ntabs = list(map(int, input().split()))\n\n# Solve the problem\nprint(solve(n, k, tabs))",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_networks = [0] * n\n    \n    for i in range(1, n):\n        if i % k == 0:\n            info_tabs[i - 1] = 0\n        else:\n            social_networks[i - 1] = 1\n            \n    e = sum(info_tabs)\n    s = sum(social_networks)\n    \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    info_tabs = list(map(int, input().split()))\n    \n    result = solve(n, k)\n    print(result)",
    "def solve(n, k, tabs):\n    e, s = 0, 0\n    for i in range(1, n+1):\n        if tabs[i-1] == 1:\n            e += 1\n        else:\n            s += 1\n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    print(solve(n, k, tabs))",
    "def solve(n, k):\n    info_tabs = [1 if x == 1 else -1 for x in input().split()]\n    e = sum(info_tabs)\n    s = len([tab for tab in info_tabs if tab == -1])\n    \n    max_diff = abs(e - s)\n    return max_diff\n\nif True:\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    print(result)",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    \n    max_diff = abs(e - s)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e = sum(1 for tab in tabs if tab == 1)\n    s = sum(1 for tab in tabs if tab == -1)\n    \n    max_diff = abs(e - s)\n    \n    for b in range(1, n):\n        new_e = e - sum(tabs[b:b+k]) + sum(tabs[b+k:b+2*k])\n        new_s = s - sum(tabs[b:b+k]) + sum(tabs[b+k:b+2*k])\n        \n        max_diff = max(max_diff, abs(new_e - new_s))\n    \n    print(max_diff)\n\nsolve()",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    for i in range(2, n):\n        if (i % k == 0):\n            if tabs[i - 1] == 1:\n                e -= 1\n            else:\n                s -= 1\n            max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    info_tabs = [1] * n\n    social_networks = [0] * n\n    \n    for i in range(n):\n        if info_tabs[i] == 1:\n            social_networks[(i + k) % n] = 1\n    \n    e = sum(info_tabs)\n    s = sum(social_networks)\n    \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    info_tabs = list(map(int, input().split()))\n    \n    result = solve(n, k)\n    print(result)",
    "def main():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    \n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    \n    max_diff = abs(e - s)\n    \n    while True:\n        b = int(input())\n        if b <= 0:\n            break\n        \n        count = 0\n        for i in range(b, n+1, k):\n            if tabs[i-1] == 1:\n                e -= 1\n            else:\n                s -= 1\n            count += 1\n        \n        max_diff = max(max_diff, abs(e - s))\n        \n        for _ in range(count):\n            if tabs[b-1] == 1:\n                e += 1\n            else:\n                s += 1\n            b += k\n    \n    print(max_diff)\n\nif True:\n    main()",
    "def solve(n, k):\n    tabs_info = [int(input()) for _ in range(n)]\n    e, s = 0, 0\n    \n    for i in range(1, n + 1):\n        if i % k == 0:\n            continue\n        if tabs_info[i - 1] == 1:\n            e += 1\n        else:\n            s += 1\n            \n    return abs(e - s)\n\nif True:\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    print(result)",
    "def solve(n, k):\n    # Read the tab types\n    tab_types = list(map(int, input().split()))\n    \n    # Initialize counters for tabs of each type\n    e = sum(1 for t in tab_types if t == 1)\n    s = sum(1 for t in tab_types if t == -1)\n    \n    # Close tabs according to the given rules\n    while True:\n        # Find the next tab to close\n        b = None\n        for i in range(2, n):\n            if tab_types[i * k - 1] == 1:\n                b = i * k - 1\n                break\n        \n        # If no tab to close, break the loop\n        if b is None:\n            break\n        \n        # Close the selected tab\n        tab_types[b] = 0\n        \n        # Update the counters for tabs of each type\n        e -= 1 if tab_types[b] == 1 else 0\n        s += 1 if tab_types[b] == -1 else 0\n    \n    # Calculate the maximum absolute difference\n    return abs(e - s)\n\n# Main function to handle input and call the solve function\nif True:\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    print(result)"
  ],
  "rewards": [
    0.0,
    0.18604651162790697,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.18604651162790697,
    0.0,
    0.0,
    0.11627906976744186,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.11627906976744186,
    0.0,
    0.023255813953488372,
    0.13953488372093023,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.06976744186046512,
    0.0,
    0.0,
    0.18604651162790697,
    0.0,
    0.0,
    0.0,
    0.13953488372093023,
    0.0,
    0.06976744186046512,
    0.0,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.16279069767441862,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.16666666666666666,
    0.2619047619047619,
    0.0,
    0.0,
    0.16666666666666666,
    0.16666666666666666,
    0.0,
    0.30952380952380953,
    0.023809523809523808,
    0.0,
    0.19047619047619047,
    0.07142857142857142,
    0.0,
    0.09523809523809523,
    0.16666666666666666,
    0.023809523809523808,
    0.0,
    0.09523809523809523,
    0.14285714285714285,
    0.16666666666666666,
    0.23809523809523808,
    0.19047619047619047,
    0.16666666666666666,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.11904761904761904,
    0.0,
    0.0,
    0.16666666666666666,
    0.0,
    0.023809523809523808,
    0.16666666666666666,
    0.09523809523809523,
    0.16666666666666666,
    0.07142857142857142,
    0.0,
    0.0,
    0.16666666666666666,
    0.047619047619047616,
    0.16666666666666666,
    0.0,
    0.0,
    0.16666666666666666,
    0.19047619047619047,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": 257.76736998558044,
  "sample times": 50
}