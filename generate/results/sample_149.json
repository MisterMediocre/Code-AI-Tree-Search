{
  "prompt": "\nQUESTION:\nUnlucky year in Berland is such a year that its number n can be represented as n = x^{a} + y^{b}, where a and b are non-negative integer numbers. \n\nFor example, if x = 2 and y = 3 then the years 4 and 17 are unlucky (4 = 2^0 + 3^1, 17 = 2^3 + 3^2 = 2^4 + 3^0) and year 18 isn't unlucky as there is no such representation for it.\n\nSuch interval of years that there are no unlucky years in it is called The Golden Age.\n\nYou should write a program which will find maximum length of The Golden Age which starts no earlier than the year l and ends no later than the year r. If all years in the interval [l, r] are unlucky then the answer is 0.\n\n\n-----Input-----\n\nThe first line contains four integer numbers x, y, l and r (2 \u2264 x, y \u2264 10^18, 1 \u2264 l \u2264 r \u2264 10^18).\n\n\n-----Output-----\n\nPrint the maximum length of The Golden Age within the interval [l, r].\n\nIf all years in the interval [l, r] are unlucky then print 0.\n\n\n-----Examples-----\nInput\n2 3 1 10\n\nOutput\n1\n\nInput\n3 5 10 22\n\nOutput\n8\n\nInput\n2 3 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example the unlucky years are 2, 3, 4, 5, 7, 9 and 10. So maximum length of The Golden Age is achived in the intervals [1, 1], [6, 6] and [8, 8].\n\nIn the second example the longest Golden Age is the interval [15, 22].\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "import sys\nfrom typing import *\ndef main():\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x: int, y: int, l: int, r: int) -> int:\n    max_length = 0\n    for i in range(l, r + 1):\n        if is_unlucky(i, x, y):\n            continue\n        j = i\n        while True:\n            if is_unlucky(j, x, y):\n                break\n            j += 1\n        max_length = max(max_length, j - i)\n    return max_length\n\ndef is_unlucky(n: int, x: int, y: int) -> bool:\n    while n > 0:\n        if n % x == 0 or n % y == 0:\n            return True\n        n //= 2\n    return False\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    def is_unlucky(n):\n        while n > 0:\n            if n % (x * y) == 0:\n                return True\n            n //= (x * y)\n        return False\n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            max_length = max(max_length, r - i + 1)\n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom typing import *\ninput = sys.stdin.read\ndata = input().split()\nx, y, l, r = map(int, data)\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    count = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            count += 1\n    return count\n\nprint(solve(x, y, l, r))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            continue\n        j = i + 1\n        while j <= r:\n            if is_unlucky(j):\n                break\n            j += 1\n        max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def main():\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age(l, r):\n        max_length = 0\n        for i in range(l, r+1):\n            if not is_unlucky(i):\n                continue\n            j = i + 1\n            while j <= r:\n                if is_unlucky(j):\n                    break\n                j += 1\n            if j - i > max_length:\n                max_length = j - i\n        return max_length\n    \n    result = find_golden_age(l, r)\n    print(result)\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    max_length = 0\n    current_length = 0\n    for i in range(l, r+1):\n        found = False\n        for j in range(10**18):\n            if i == x**j + y**j:\n                found = True\n                break\n        if not found:\n            current_length = 0\n        else:\n            current_length += 1\n            max_length = max(max_length, current_length)\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.read().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            d = n % y\n            if d != 0:\n                return False\n            n //= y\n        return True\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if is_unlucky(i):\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    \n    if current_length > max_length:\n        max_length = current_length\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import math\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        for a in range(int(math.log(n, x)) + 1):\n            for b in range(int(math.log(n, y)) + 1):\n                if n == x**a + y**b:\n                    return True\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    x, y, l, r = map(int, input().split())\n    solve(x, y, l, r)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def check_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def find_golden_age(l, r):\n        start = l\n        while start <= r:\n            if not check_unlucky(start):\n                break\n            start += 1\n        end = r\n        while end >= l:\n            if not check_unlucky(end):\n                break\n            end -= 1\n        \n        return end - start + 1 if start <= end else 0\n    \n    print(find_golden_age(l, r))\n\nif True:\n    solve()",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            d = n % x\n            n //= x\n            if d != y:\n                return False\n        return True\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            continue\n        count = 1\n        j = i + 1\n        while j <= r and not is_unlucky(j):\n            count += 1\n            j += 1\n        max_length = max(max_length, count)\n    \n    return max_length if max_length else 0\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == 0 or digit % x != 0 or digit % y != 0:\n                return False\n            n //= 10\n        return True\n    \n    def binary_search(start, end):\n        while start <= end:\n            mid = (start + end) // 2\n            if is_unlucky(mid):\n                end = mid - 1\n            else:\n                start = mid + 1\n        return start\n    \n    left = binary_search(l, r)\n    right = binary_search(r, l)\n    \n    if left >= right:\n        return 0\n    \n    return right - left + 1\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import math\n\ndef is_unlucky(n):\n    if n == 0:\n        return True\n    if n % 2 != 0:\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            j = n // i\n            if j > i:\n                return False\n    return True\n\ndef find_golden_age_length(x, y, l, r):\n    max_length = 0\n    for start in range(l, r + 1):\n        if not is_unlucky(start):\n            continue\n        for end in range(start + 1, r + 1):\n            if is_unlucky(end):\n                current_length = end - start\n                if current_length > max_length:\n                    max_length = current_length\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    result = find_golden_age_length(x, y, l, r)\n    print(result)",
    "def solve(x, y, l, r):\n    max_len = 0\n    for i in range(l, r+1):\n        found = False\n        for j in range(0, int(i**(1/x)) + 1):\n            for k in range(0, int(i**(1/y)) + 1):\n                if j**x + k**y == i:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            max_len = max(max_len, i-l)\n    return max_len\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0: return True\n        return False\n    \n    def generate_unlucky_years(x, y, l, r):\n        years = []\n        for i in range(l, r+1):\n            if is_unlucky(i): years.append(i)\n        return years\n    \n    unlucky_years = generate_unlucky_years(x, y, l, r)\n    \n    if len(unlucky_years) == 0: return 0\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(unlucky_years)):\n        if i == 0:\n            current_length = 1\n            continue\n        if unlucky_years[i] - unlucky_years[i-1] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    \n    max_length = max(max_length, current_length)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    result = solve(x, y, l, r)\n    print(result)",
    "def main():\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % (x**y) == 0 or n % (y**x) == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n            \n    print(max_length)\n\nif True:\n    main()",
    "import sys\nfrom math import sqrt\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.read().split())\n    \n    def is_unlucky(n):\n        if n < 4:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    max_length = 0\n    for start in range(l, r + 1):\n        if not is_unlucky(start):\n            continue\n        \n        for end in range(start, r + 1):\n            if is_unlucky(end):\n                break\n            max_length = max(max_length, end - start)\n            \n    print(max_length)\n\nif True:\n    solve()",
    "def solve(x, y, l, r):\n    def check(n):\n        while n > 0:\n            d = n % y\n            n //= y\n            if d == 0:\n                return False\n        return True\n    \n    def count_unlucky_years(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if check(i):\n                count += 1\n        return count\n    \n    max_length = 0\n    for start in range(l, r + 1):\n        for end in range(start, r + 1):\n            if count_unlucky_years(start, end) == 0:\n                max_length = max(max_length, end - start + 1)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import sys\nfrom math import sqrt\n\ndef is_unlucky(n, x, y):\n    while n > 0:\n        remainder = n % (x**y)\n        if remainder != 0:\n            return False\n        n //= (x**y)\n    return True\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.read().split())\n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i, x, y):\n            max_length = max(max_length, i - l + 1)\n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom math import sqrt\n\ndef solve(x, y, l, r):\n    max_len = 0\n    for i in range(l, r+1):\n        if is_unlucky(i, x, y):\n            start = i - 1\n            while start >= l and is_unlucky(start, x, y):\n                start -= 1\n            end = i + 1\n            while end <= r and is_unlucky(end, x, y):\n                end += 1\n            max_len = max(max_len, end - start - 1)\n    return max_len\n\ndef is_unlucky(n, x, y):\n    a, b = 0, 0\n    while n > 0:\n        if n % x == 0:\n            a += 1\n        else:\n            break\n        n //= x\n    while n > 0:\n        if n % y == 0:\n            b += 1\n        else:\n            break\n        n //= y\n    return a == 0 and b == 0\n\nif True:\n    input_data = sys.stdin.read().strip()\n    x, y, l, r = map(int, input_data.split())\n    result = solve(x, y, l, r)\n    print(result)",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        for i in range(1, int(n**(1/2)) + 1):\n            if n % i == 0:\n                j = n // i\n                if i == j:\n                    return False\n                elif is_unlucky(i) and is_unlucky(j):\n                    return True\n        return False\n\n    def count_golden_age(l, r):\n        count = 0\n        for n in range(l, r+1):\n            if not is_unlucky(n):\n                count += 1\n        return count\n\n    return max(count_golden_age(l, x), count_golden_age(y, r))\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def main():\n    x, y, l, r = map(int, input().split())\n    max_length = 0\n    \n    # Iterate over possible starting points\n    for start in range(l, r+1):\n        found = False\n        # Check if start is an unlucky year\n        if start == x**0 + y**1 or start == x**1 + y**0:\n            found = True\n        \n        # Check for other unlucky years in the same interval\n        for i in range(2, min(x, y)+1):\n            if start % i == 0:\n                if start // i == x**0 + y**1 or start // i == x**1 + y**0:\n                    found = True\n                    break\n            else:\n                continue\n        \n        # If no unlucky years were found, update the maximum length\n        if not found:\n            max_length = max(max_length, r - start + 1)\n    \n    # Print the result\n    print(max_length)\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            d = n % y\n            n //= y\n            if d != 0 and d % x == 0:\n                return True\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            start = i\n            while start <= r and not is_unlucky(start):\n                start += 1\n            max_length = max(max_length, start - i)\n    \n    return max_length\n\n# Example usage\nx, y, l, r = map(int, input().split())\nprint(solve(x, y, l, r))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    result = solve(x, y, l, r)\n    print(result)\n\ndef solve(x, y, l, r):\n    max_length = 0\n    for i in range(l, r+1):\n        found = False\n        for a in range(60):\n            for b in range(60):\n                if i == x**a + y**b:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            max_length = max(max_length, i-l)\n    return max_length\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    def check(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    def binary_search(start, end):\n        while start <= end:\n            mid = (start + end) // 2\n            if check(mid):\n                end = mid - 1\n            else:\n                start = mid + 1\n        return start\n    \n    return binary_search(l, r)\n\n# Example usage\nprint(solve(2, 3, 1, 10))  # Output: 1\nprint(solve(3, 5, 10, 22))  # Output: 8\nprint(solve(2, 3, 3, 5))  # Output: 0",
    "def solve():\n    x, y, l, r = map(int, input().split())\n    max_length = 0\n    \n    # Check if all years in the interval [l, r] are unlucky\n    if l > r or any((i % x == 0 and i % y != 0) or (i % x != 0 and i % y == 0) for i in range(l, r + 1)):\n        print(0)\n        return\n    \n    # Iterate through possible values of a and b\n    for a in range(31):\n        for b in range(31):\n            if (x ** a) % y == 0 and (y ** b) % x == 0:\n                max_length = max(max_length, (r - l + 1) // (x ** a + y ** b))\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def main():\n    x, y, l, r = map(int, input().split())\n    if x == y:\n        return 0\n    max_length = 0\n    for i in range(l, r + 1):\n        found = False\n        for j in range(i, r + 1):\n            if j == i:\n                continue\n            if j % x == 0 and j // x <= y:\n                if j // x != y:\n                    found = True\n                    break\n            elif j % y == 0 and j // y <= x:\n                if j // y != x:\n                    found = True\n                    break\n        if not found:\n            max_length = max(max_length, i - l + 1)\n    print(max_length)\n\nif True:\n    main()",
    "import math\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == 2 or digit == 3:\n                return False\n            n //= 10\n        return True\n    \n    max_length = 0\n    for start in range(l, r + 1):\n        if not is_unlucky(start):\n            continue\n        \n        current_length = 1\n        for end in range(start + 1, r + 1):\n            if not is_unlucky(end):\n                break\n            current_length += 1\n        \n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nresult = solve(x, y, l, r)\n\n# Print the result\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == 2 or digit == 3 or digit == 4 or digit == 5 or digit == 7 or digit == 9:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if is_unlucky(i):\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            d = n % (x**y)\n            if d != 0 and d**(1/y) not in {0, 1}:\n                return True\n            n //= x**y\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    x, y, l, r = map(int, input().split())\n    if x == y:\n        return max(0, min(r - l + 1, 1))\n    \n    # Find the largest power of x less than or equal to l\n    max_x_power = 0\n    while (x ** max_x_power <= l):\n        max_x_power += 1\n    \n    # Find the smallest power of x greater than or equal to r\n    min_x_power = 0\n    while (x ** min_x_power >= r):\n        min_x_power -= 1\n    \n    # Check if the interval [l, r] contains only unlucky years\n    if (max_x_power < min_x_power):\n        return 0\n    \n    # Calculate the length of the Golden Age\n    golden_age_length = min_x_power - max_x_power + 1\n    \n    return golden_age_length\n\nif True:\n    solve()",
    "import sys\n\ndef main():\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    \n    def is_unlucky(n):\n        while n > 0:\n            remainder = n % y\n            if remainder == 0:\n                return False\n            n //= y\n        return True\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    \n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    main()",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        for a in range(64):\n            for b in range(64):\n                if x**a + y**b == n:\n                    return True\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            max_length = max(max_length, i - l)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "import math\n\ndef solve(x, y, l, r):\n    max_length = 0\n    for a in range(math.ceil(math.log(r - l + 1, x))):\n        for b in range(math.ceil(math.log(r - l + 1, y))):\n            n = x**a + y**b\n            if l <= n <= r:\n                max_length = max(max_length, n - l)\n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve problem\nresult = solve(x, y, l, r)\n\n# Print result\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    def is_unlucky(n):\n        while n > 0:\n            if n % (x**y) == 0 or n % (y**x) == 0:\n                return True\n            n //= max(x, y)\n        return False\n    def find_golden_age_length(l, r):\n        if not is_unlucky(l) or not is_unlucky(r):\n            return 0\n        left, right = l, r\n        while left <= right:\n            mid = (left + right) // 2\n            if is_unlucky(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left - l - 1\n\n    print(find_golden_age_length(l, r))\n\nsolve()",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == 2 or digit == 3 or digit == 7 or digit == 8:\n                return True\n            n //= 10\n        return False\n\n    max_length = 0\n    current_length = 0\n    start = l\n\n    while start <= r:\n        if is_unlucky(start):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n        start += 1\n\n    max_length = max(max_length, current_length)\n\n    if max_length == 0:\n        return 0\n    else:\n        return max_length\n\n# Example usage\nx, y, l, r = map(int, input().split())\nprint(solve(x, y, l, r))",
    "import sys\nfrom math import log, sqrt\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == x or digit == y:\n                return True\n            n //= 10\n        return False\n    \n    def find_longest_golden_age(l, r):\n        max_length = 0\n        \n        # Check each year from l to r\n        for i in range(l, r + 1):\n            if not is_unlucky(i):\n                continue\n            \n            # Find the next unlucky year after i\n            j = i + 1\n            while j <= r and not is_unlucky(j):\n                j += 1\n            \n            if j > r:\n                break\n            \n            # Calculate the length of the current golden age\n            length = j - i\n            max_length = max(max_length, length)\n        \n        return max_length\n    \n    result = find_longest_golden_age(l, r)\n    print(result)\n\nif True:\n    solve()",
    "def main():\n    x, y, l, r = map(int, input().split())\n    \n    def check_unlucky(n):\n        while n > 0:\n            d = n % y\n            n //= y\n            if d == 0:\n                return True\n        return False\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not check_unlucky(i):\n            max_length += 1\n    \n    print(max_length)\n\nif True:\n    main()",
    "import sys\n\ndef solve(x, y, l, r):\n    def check(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return False\n            n //= 2\n        return True\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not check(i):\n            break\n        max_length += 1\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    x, y, l, r = data[0], data[1], data[2], data[3]\n    result = solve(x, y, l, r)\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            if n % (x ** a) == 0 or n % (y ** b) == 0:\n                return True\n            n //= (x ** a)\n            n //= (y ** b)\n        return False\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            continue\n        for j in range(i, r + 1):\n            if not is_unlucky(j):\n                break\n        max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nsolve()",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            if n % x == 0 or n % y == 0:\n                return True\n            n //= max(x, y)\n        return False\n    \n    if is_unlucky(l):\n        return 0\n    \n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            current_length = 1\n            for j in range(i + 1, r + 1):\n                if not is_unlucky(j):\n                    current_length += 1\n                else:\n                    break\n            max_length = max(max_length, current_length)\n    \n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    print(solve(x, y, l, r))",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            d = n % y\n            if d == 0:\n                return True\n            n //= x\n        return False\n    \n    def count_unlucky_years(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if is_unlucky(i):\n                count += 1\n        return count\n    \n    max_length = 0\n    for start in range(l, r + 1):\n        for end in range(start, r + 1):\n            if count_unlucky_years(start, end) == 0:\n                max_length = max(max_length, end - start)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve problem\nresult = solve(x, y, l, r)\n\n# Print result\nprint(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    x, y, l, r = data\n    \n    def is_unlucky(n):\n        while n > 0:\n            digit = n % 10\n            if digit == 2 or digit == 3:\n                return True\n            n //= 10\n        return False\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            continue\n        count = 1\n        for j in range(i+1, r+1):\n            if not is_unlucky(j):\n                break\n            count += 1\n        max_length = max(max_length, count)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "def solve():\n    x, y, l, r = map(int, input().split())\n    \n    def is_unlucky(n):\n        while n > 0:\n            d = n % (x**y)\n            if d != 0:\n                return False\n            n //= (x**y)\n        return True\n    \n    max_length = 0\n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            continue\n        j = i + 1\n        while j <= r and not is_unlucky(j):\n            j += 1\n        max_length = max(max_length, j - i)\n    \n    print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom math import sqrt\n\ndef solve():\n    x, y, l, r = map(int, sys.stdin.readline().split())\n    \n    def is_unlucky(n):\n        for i in range(x+1):\n            for j in range(y+1):\n                if i**a + j**b == n:\n                    return True\n        return False\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r+1):\n        if not is_unlucky(i):\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    max_length = max(max_length, current_length)\n    if max_length == 0:\n        print(0)\n    else:\n        print(max_length)\n\nif True:\n    solve()",
    "import sys\nfrom math import sqrt\n\ndef solve(x, y, l, r):\n    def is_unlucky(n):\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    def generate_years(a, b):\n        years = []\n        for i in range(l, r + 1):\n            if is_unlucky(i):\n                years.append(i)\n        return years\n    \n    max_length = 0\n    for a in range(r // x + 1):\n        for b in range(r // y + 1):\n            years = generate_years(a, b)\n            if len(years) > max_length:\n                max_length = len(years)\n    \n    return max_length\n\nif True:\n    input_data = sys.stdin.read().split()\n    x, y, l, r = map(int, input_data)\n    result = solve(x, y, l, r)\n    print(result)",
    "import math\n\ndef solve(x, y, l, r):\n    max_length = 0\n    \n    # Check if all years in the interval [l, r] are unlucky\n    if all(math.pow(i, x) + math.pow(j, y) <= r for i in range(1, x+1) for j in range(1, y+1)):\n        return 0\n    \n    # Iterate over possible starting points of the Golden Age\n    for start in range(l, min(r, math.pow(x, x)) + 1):\n        # Calculate the ending point of the Golden Age\n        end = math.floor((r - start) / math.gcd(x, y))\n        \n        # Check if the current segment is a Golden Age\n        if start <= end and all(math.pow(i, x) + math.pow(j, y) <= r for i in range(start, start+end+1) for j in range(1, y+1)):\n            max_length = max(max_length, end)\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve the problem\nprint(solve(x, y, l, r))",
    "def solve(x, y, l, r):\n    def is_unlucky(n):\n        while n > 0:\n            d = n % y\n            if d == 0 and d != 1:\n                return False\n            n //= y\n        return True\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(l, r + 1):\n        if is_unlucky(i):\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    \n    return max_length\n\n# Read input\nx, y, l, r = map(int, input().split())\n\n# Solve problem\nresult = solve(x, y, l, r)\n\n# Print result\nprint(result)",
    "import math\n\ndef is_unlucky(x, y, n):\n    while n > 0:\n        if n % x == 0:\n            return False\n        n //= x\n    return True\n\ndef solve(x, y, l, r):\n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(x, y, i):\n            max_length = max(max_length, i - l)\n    return max_length\n\nif True:\n    x, y, l, r = map(int, input().split())\n    result = solve(x, y, l, r)\n    print(result)",
    "import sys\nfrom math import log, sqrt\n\ndef solve(x, y, l, r):\n    max_length = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i, x, y):\n            max_length = max(max_length, i - l)\n    return max_length\n\ndef is_unlucky(n, x, y):\n    while n > 0:\n        if n % x == 0 or n % y == 0:\n            return True\n        n //= x\n        n //= y\n    return False\n\nif True:\n    input_data = sys.stdin.read().strip()\n    data = input_data.split()\n    x, y, l, r = map(int, data)\n    result = solve(x, y, l, r)\n    print(result)"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.0
  ],
  "time": 249.8087193965912,
  "sample times": 50
}