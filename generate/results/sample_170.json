{
  "prompt": "\nQUESTION:\nTwo bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n\n-----Examples-----\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\n\n-----Note-----\n\nFirst sample:  [Image] \n\nSecond sample:  [Image]\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k1, cards1, k2, cards2):\n    i = j = 0\n    fights = 0\n    \n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            fights += 1\n            i += 1\n            j += 1\n        elif cards1[i] < cards2[j]:\n            fights += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    if i < k1:\n        fights += k1 - i\n    elif j < k2:\n        fights += k2 - j\n    \n    if fights % 2 == 0:\n        return fights // 2, 2\n    else:\n        return fights // 2, 1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = int(input())\n    cards2 = list(map(int, input().split()))\n    \n    result = solve(n, k1, cards1, k2, cards2)\n    print(*result)",
    "def solve(n, k1, k2):\n    deck1 = list(range(1, k1 + 1))\n    deck2 = list(range(k1 + 1, k1 + k2 + 1))\n    \n    count = 0\n    while True:\n        count += 1\n        if not deck1 or not deck2:\n            break\n        \n        if deck1[-1] > deck2[-1]:\n            deck1.extend([deck2.pop()])\n        else:\n            deck2.extend([deck1.pop()])\n    \n    if not deck1:\n        return count, 2\n    elif not deck2:\n        return count, 1\n    else:\n        return -1\n\n# Read input\nn = int(input())\nk1 = int(input())\ndeck1 = list(map(int, input().split()))\nk2 = int(input())\ndeck2 = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k1, k2)\nprint(*result)",
    "def solve(n, k1, cards1, k2, cards2):\n    fights = 0\n    while True:\n        if not cards1:\n            return fights + 1, 2\n        if not cards2:\n            return fights + 1, 1\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n            fights += 1\n        else:\n            cards2.append(cards1.pop())\n            fights += 1\n\n# Read input\nn = int(input())\nk1 = int(input())\ncards1 = list(map(int, input().split()))\nk2 = int(input())\ncards2 = list(map(int, input().split()))\n\n# Solve and print output\nprint(*solve(n, k1, cards1, k2, cards2))",
    "def solve(n, k1, k2):\n    s1 = list(range(1, k1+1))\n    s2 = list(range(k1+1, k1+k2+1))\n    i = j = 0\n    fights = 0\n    while True:\n        if i == len(s1) or j == len(s2):\n            break\n        if s1[i] > s2[j]:\n            s1.append(s1.pop(i))\n            s2.append(s2.pop(j))\n            fights += 1\n        else:\n            s1.append(s1.pop(i))\n            s2.append(s2.pop(j))\n            fights += 1\n    if i == len(s1):\n        return fights, 2\n    elif j == len(s2):\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    print(*solve(n, k1, k2))",
    "def solve(n, k1, values1, k2, values2):\n    i = j = 0\n    count = 0\n    \n    while True:\n        if i >= len(values1) or j >= len(values2):\n            break\n        \n        if values1[i] > values2[j]:\n            values1.append(values2[j])\n            values2.pop(j)\n            count += 1\n        elif values1[i] < values2[j]:\n            values2.append(values1[i])\n            values1.pop(i)\n            count += 1\n        else:\n            values1.append(values2[j])\n            values2.pop(j)\n            values1.append(values1[i])\n            values2.pop(i)\n            count += 2\n            \n        i += 1\n        j += 1\n    \n    return count % 2, count // 2 + 1 if count % 2 == 0 else -1\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    values1 = data[2:k1+2]\n    k2 = data[k1+2]\n    values2 = data[k1+2+k2:]\n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "def solve(n, k1, k2):\n    deck1 = list(range(1, k1+1))\n    deck2 = list(range(k1+1, n+1))\n    count = 0\n    \n    while len(deck1) > 0 and len(deck2) > 0:\n        count += 1\n        if deck1[-1] > deck2[-1]:\n            deck1.append(deck1.pop())\n            deck1.append(deck2.pop())\n        else:\n            deck2.append(deck2.pop())\n            deck2.append(deck1.pop())\n    \n    if len(deck1) == 0:\n        return count, 2\n    elif len(deck2) == 0:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    result = solve(n, k1, k2)\n    print(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    if k1 == 0 or k2 == 0:\n        print(0, 2)\n        return\n    \n    count = 0\n    while len(cards1) > 0 and len(cards2) > 0:\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards1.pop())\n            cards2.append(cards2.pop())\n        else:\n            cards1.append(cards1.pop(0))\n            cards2.append(cards2.pop(0))\n        count += 1\n    \n    if len(cards1) > 0:\n        print(count, 1)\n    elif len(cards2) > 0:\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k1, k2 = data[0], data[1], data[2]\n    cards1 = data[3:k1+3]\n    cards2 = data[3+k1:]\n    \n    count_fights = 0\n    while len(cards1) > 0 and len(cards2) > 0:\n        count_fights += 1\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards1.pop())\n            cards1.append(cards2.pop())\n        else:\n            cards2.append(cards2.pop())\n            cards2.append(cards1.pop())\n    \n    if len(cards1) == 0:\n        print(count_fights, 2)\n    elif len(cards2) == 0:\n        print(count_fights, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    k2 = n - k1\n    \n    stack1 = []\n    stack2 = []\n    \n    for i in range(k1):\n        stack1.append(data[i+2])\n    \n    for i in range(k2):\n        stack2.append(data[k1+i+2])\n    \n    fights = 0\n    \n    while stack1 and stack2:\n        if stack1[-1] > stack2[-1]:\n            stack1.pop()\n            stack1.append(stack2.pop())\n            stack1.append(stack2.pop())\n            fights += 2\n        elif stack1[-1] < stack2[-1]:\n            stack2.pop()\n            stack2.append(stack1.pop())\n            stack2.append(stack1.pop())\n            fights += 2\n        else:\n            stack1.pop()\n            stack2.pop()\n            stack1.append(stack2.pop())\n            fights += 1\n    \n    if not stack1:\n        print(fights, 1)\n    elif not stack2:\n        print(fights, 2)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, cards1, k2, cards2):\n    total_fights = 0\n    while True:\n        if len(cards1) == 0 or len(cards2) == 0:\n            break\n        total_fights += 1\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n            cards1.append(cards1.pop())\n        else:\n            cards2.append(cards1.pop())\n            cards2.append(cards2.pop())\n\n    if len(cards1) == 0:\n        winner = 2\n    elif len(cards2) == 0:\n        winner = 1\n    else:\n        winner = -1\n\n    print(total_fights, winner)\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    cards1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    cards2 = list(map(int, data[k1+3:]))\n    solve(n, k1, cards1, k2, cards2)",
    "def solve(n, k1, k2):\n    s1 = list(range(1, k1 + 1))\n    s2 = list(range(k1 + 1, n + 1))\n    \n    fights = 0\n    while s1 and s2:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n        else:\n            s2.append(s1.pop())\n        fights += 1\n    \n    if not s1:\n        return fights, 2\n    elif not s2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input().strip())\n    k1 = int(input().strip())\n    k2 = int(input().strip())\n    result = solve(n, k1, k2)\n    print(*result)",
    "def solve(n, k1, k2):\n    s1 = list(range(1, k1+1))\n    s2 = list(range(k1+1, k1+k2+1))\n    i1 = i2 = 0\n    fights = 0\n    \n    while True:\n        if i1 >= len(s1) or i2 >= len(s2):\n            break\n        \n        c1, c2 = s1[i1], s2[i2]\n        \n        if c1 > c2:\n            s1.append(c2)\n            s2.append(c1)\n            i1 += 1\n            i2 += 1\n            fights += 1\n        elif c1 < c2:\n            s1.append(c1)\n            s2.append(c2)\n            i1 += 1\n            i2 += 1\n            fights += 1\n        else:\n            s1.append(c1)\n            s1.append(c2)\n            s2.append(c1)\n            s2.append(c2)\n            i1 += 2\n            i2 += 2\n            fights += 2\n    \n    if len(s1) == 0:\n        return fights, 2\n    elif len(s2) == 0:\n        return fights, 1\n    else:\n        return -1\n\n# Main function to handle input and call solve()\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = int(data[2])\n    s1 = list(map(int, data[3:k1+3]))\n    s2 = list(map(int, data[k1+3:]))\n\n    result = solve(n, k1, k2)\n    print(result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    s2 = list(map(int, data[k1+3:n+1]))\n    \n    i = j = 0\n    fights = 0\n    \n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop())\n            fights += 1\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop())\n            fights += 1\n        else:\n            s1.pop()\n            s2.pop()\n            fights += 1\n    \n    if i < len(s1):\n        print(fights + len(s1), 1)\n    elif j < len(s2):\n        print(fights + len(s2), 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    i = j = 0\n    count = 0\n    \n    while True:\n        if i == len(s1) or j == len(s2):\n            break\n        \n        if s1[i] > s2[j]:\n            s1.append(s1.pop(i))\n            s1.append(s2.pop(j))\n            count += 1\n        elif s1[i] < s2[j]:\n            s2.append(s2.pop(j))\n            s2.append(s1.pop(i))\n            count += 1\n        else:\n            i += 1\n            j += 1\n            \n    if i == len(s1):\n        print(count, 1)\n    elif j == len(s2):\n        print(count, 2)\n    else:\n        print(-1)\n\nsolve()",
    "def solve(n, k1, values1, k2, values2):\n    # Initialize counters for the number of fights and the winner\n    fights = 0\n    winner = None\n    \n    # Loop until either player's stack becomes empty\n    while k1 > 0 and k2 > 0:\n        # Increment the number of fights\n        fights += 1\n        \n        # Compare the top cards of both players' stacks\n        if values1[-1] > values2[-1]:\n            # Player 1 wins this fight\n            values1.append(values2.pop())\n            values1.append(values1.pop())\n            k1 -= 1\n            k2 -= 1\n        else:\n            # Player 2 wins this fight\n            values2.append(values1.pop())\n            values2.append(values2.pop())\n            k1 -= 1\n            k2 -= 1\n            \n    # Determine the winner based on the remaining cards\n    if k1 == 0:\n        winner = 2\n    elif k2 == 0:\n        winner = 1\n    \n    # Print the result\n    print(fights, winner)\n\n# Read input\nn = int(input().strip())\nk1 = int(input().strip())\nvalues1 = list(map(int, input().split()))\nk2 = int(input().strip())\nvalues2 = list(map(int, input().split()))\n\n# Solve the problem\nsolve(n, k1, values1, k2, values2)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def play_war(cards1, cards2):\n        count = 0\n        while True:\n            if not cards1:\n                return count, 2\n            if not cards2:\n                return count, 1\n            \n            c1 = cards1.pop()\n            c2 = cards2.pop()\n            \n            if c1 > c2:\n                cards1.append(c1)\n                cards1.append(c2)\n            else:\n                cards2.append(c2)\n                cards2.append(c1)\n            \n            count += 1\n    \n    result = play_war(cards1, cards2)\n    print(result)\n\nif True:\n    main()",
    "def solve(n, k1, values1, k2, values2):\n    # Initialize counters\n    total_fights = 0\n    winner = None\n    \n    # Iterate over the cards until one of the players runs out\n    while values1 and values2:\n        # Increment total fights\n        total_fights += 1\n        \n        # Compare the top cards of both stacks\n        if values1[-1] > values2[-1]:\n            # Player 1 wins this round\n            values1.append(values1.pop())\n            values1.append(values2.pop())\n            winner = 'Player 1'\n        else:\n            # Player 2 wins this round\n            values2.append(values2.pop())\n            values2.append(values1.pop())\n            winner = 'Player 2'\n    \n    # Print the result based on the winner\n    if winner == 'Player 1':\n        print(total_fights, 1)\n    elif winner == 'Player 2':\n        print(total_fights, 2)\n    else:\n        print(-1)\n\n# Read input\nn = int(input())\nk1 = int(input())\nvalues1 = list(map(int, input().split()))\nk2 = int(input())\nvalues2 = list(map(int, input().split()))\n\n# Solve the problem\nsolve(n, k1, values1, k2, values2)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    cards1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    cards2 = list(map(int, data[k1+3:k1+3+k2]))\n\n    def compare_cards(card1, card2):\n        return card1 > card2\n\n    def play_war(cards1, cards2):\n        count_fights = 0\n        while cards1 and cards2:\n            count_fights += 1\n            if compare_cards(cards1[-1], cards2[-1]):\n                cards1.append(cards1.pop())\n                cards1.append(cards2.pop())\n            else:\n                cards2.append(cards2.pop())\n                cards2.append(cards1.pop())\n        if not cards1:\n            return count_fights, 2\n        elif not cards2:\n            return count_fights, 1\n        return -1, None\n\n    result = play_war(cards1, cards2)\n    print(*result)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if s1[i] > s2[j]:\n            s1.append(s1.pop(i))\n            s1.append(s2.pop(j))\n            count += 1\n        elif s1[i] < s2[j]:\n            s2.append(s2.pop(j))\n            s2.append(s1.pop(i))\n            count += 1\n        else:\n            s1.append(s1.pop(i))\n            s2.append(s2.pop(j))\n            count += 1\n        i += 1\n        j += 1\n\n    if i == k1:\n        print(count, 1)\n    elif j == k2:\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, k2):\n    s1, s2 = list(range(1, k1+1)), list(range(k1+1, k1+k2+1))\n    fights = 0\n    while s1 and s2:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n        else:\n            s2.append(s1.pop())\n        fights += 1\n    if not s1:\n        return fights, 2\n    elif not s2:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    result = solve(n, k1, k2)\n    print(*result)",
    "def solve(n, k1, values1, k2, values2):\n    i = j = 0\n    fights = 0\n    \n    while i < k1 and j < k2:\n        if values1[i] > values2[j]:\n            values1.append(values1.pop(i))\n            values2.append(values2.pop(j))\n            fights += 1\n        elif values1[i] < values2[j]:\n            values1.append(values1.pop(i))\n            values2.append(values2.pop(j))\n            fights += 1\n        else:\n            i += 1\n            j += 1\n    \n    while i < k1:\n        values1.append(values1.pop(i))\n        fights += 1\n    \n    while j < k2:\n        values2.append(values2.pop(j))\n        fights += 1\n    \n    if len(values1) == 0:\n        return fights, 2\n    elif len(values2) == 0:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    values1 = data[2:k1+2]\n    k2 = data[k1+2]\n    values2 = data[k1+2:]\n    \n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def play_war(cards1, cards2):\n        count = 0\n        while True:\n            if not cards1:\n                return count, 2\n            if not cards2:\n                return count, 1\n            \n            c1, c2 = cards1.pop(), cards2.pop()\n            if c1 > c2:\n                cards1.append(c1)\n                cards1.append(c2)\n            else:\n                cards2.append(c2)\n                cards2.append(c1)\n            count += 1\n    \n    result = play_war(cards1, cards2)\n    print(result[0], result[1])\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k1 = int(data[1])\n    cards1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    cards2 = list(map(int, data[k1+3:]))\n\n    def find_winner(cards1, cards2):\n        while cards1 and cards2:\n            if cards1[-1] > cards2[-1]:\n                cards1.pop()\n                cards1.append(cards2.pop())\n            else:\n                cards2.pop()\n                cards2.append(cards1.pop())\n\n        return len(cards1) == 0\n\n    winner = find_winner(cards1, cards2)\n    if winner:\n        print(len(cards1), 1)\n    elif not winner:\n        print(-1)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2:]\n    \n    def find_winner(s1, s2):\n        while s1 and s2:\n            if s1[-1] > s2[-1]:\n                s1.pop()\n                s2.pop()\n            elif s1[-1] < s2[-1]:\n                s1.pop(0)\n                s2.pop(0)\n            else:\n                s1.pop()\n                s2.pop(1)\n        return len(s1) > len(s2)\n\n    winner = find_winner(s1, s2)\n    if winner:\n        print(len(s1) + len(s2) - 1, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def play_war(cards1, cards2):\n        count = 0\n        while True:\n            if not cards1 or not cards2:\n                break\n            c1 = cards1.pop(0)\n            c2 = cards2.pop(0)\n            if c1 > c2:\n                cards1.append(c1)\n                cards1.append(c2)\n            else:\n                cards2.append(c2)\n                cards2.append(c1)\n            count += 1\n        return count\n    \n    total_fights = play_war(cards1, cards2)\n    winner = 1 if total_fights % 2 == 0 else 2\n    print(total_fights, winner)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    cards1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    cards2 = list(map(int, data[k1+3:k1+k2+3]))\n    \n    if len(cards1) == 0:\n        print(f\"{n} 1\")\n        return\n    \n    if len(cards2) == 0:\n        print(f\"{n} 2\")\n        return\n    \n    fights = 0\n    while True:\n        if cards1[-1] > cards2[-1]:\n            cards1.extend([cards1.pop(), cards2.pop()])\n            fights += 1\n        elif cards1[-1] < cards2[-1]:\n            cards2.extend([cards1.pop(), cards2.pop()])\n            fights += 1\n        else:\n            cards1.pop()\n            cards2.pop()\n            fights += 1\n        \n        if not cards1 or not cards2:\n            break\n    \n    if not cards1 and not cards2:\n        print(f\"{n} -1\")\n    else:\n        print(f\"{fights} {int(not cards1)}\")\n\nif True:\n    main()",
    "def solve(n, k1, values1, k2, values2):\n    i, j = 0, 0\n    fights = 0\n    \n    while i < k1 and j < k2:\n        if values1[i] > values2[j]:\n            fights += k1 - i\n            values2.append(values1[i])\n            values1.pop(i)\n        elif values1[i] < values2[j]:\n            fights += k2 - j\n            values1.append(values2[j])\n            values2.pop(j)\n        else:\n            i += 1\n            j += 1\n            \n    if i < k1:\n        fights += k1 - i\n    elif j < k2:\n        fights += k2 - j\n        \n    if i == k1 and j == k2:\n        return fights, 1\n    elif i == k1:\n        return fights, 2\n    elif j == k2:\n        return fights, 2\n    else:\n        return -1\n\n# Main function\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    values1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    values2 = list(map(int, data[k1+3:]))\n    \n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "def solve(n, k1, k2, cards1, cards2):\n    cards1.sort(reverse=True)\n    cards2.sort(reverse=True)\n    i, j = 0, 0\n    count = 0\n    while i < k1 and j < k2:\n        if cards1[i] > cards2[j]:\n            count += 1\n            i += 1\n        else:\n            count += 1\n            j += 1\n    return count + max(k1 - i, k2 - j)\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = n - k1\n    cards1 = list(map(int, data[k1+1:k1+k2+1]))\n    cards2 = list(map(int, data[k1+k2+1:]))\n    result = solve(n, k1, k2, cards1, cards2)\n    print(result)",
    "def solve(n, k1, k2):\n    deck1 = list(range(1, k1+1))\n    deck2 = list(range(k1+1, k1+k2+1))\n    \n    while True:\n        try:\n            card1 = deck1.pop()\n            card2 = deck2.pop()\n            \n            if card1 > card2:\n                deck1.append(card1)\n                deck1.append(card2)\n            elif card2 > card1:\n                deck2.append(card2)\n                deck2.append(card1)\n            else:\n                deck1.append(card1)\n                deck2.append(card2)\n                \n                if not deck1:\n                    return len(deck2), 2\n                elif not deck2:\n                    return len(deck1), 1\n        except IndexError:\n            return -1, None\n\nif True:\n    n = int(input())\n    k1 = int(input())\n    k2 = int(input())\n    \n    result = solve(n, k1, k2)\n    print(*result)",
    "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2].split()))\n    k2 = int(data[3])\n    s2 = list(map(int, data[4].split()))\n\n    i = j = 0\n    fights = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] > s2[j]:\n            s1.append(s2.pop())\n            fights += 1\n        elif s1[i] < s2[j]:\n            s2.append(s1.pop())\n            fights += 1\n        else:\n            s1.append(s2.pop())\n            s2.append(s1.pop())\n            fights += 1\n\n    if i == len(s1):\n        winner = 2\n    elif j == len(s2):\n        winner = 1\n    else:\n        winner = -1\n\n    print(fights, winner)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input()) + k1\n    s2 = list(map(int, input().split()))\n    \n    i1 = 0\n    i2 = 0\n    fights = 0\n    \n    while i1 < k1 and i2 < k2:\n        if s1[i1] > s2[i2]:\n            s1.append(s2.pop(0))\n            s1.append(s1.pop(i1))\n            fights += 1\n        elif s1[i1] < s2[i2]:\n            s2.append(s1.pop(0))\n            s2.append(s2.pop(i2))\n            fights += 1\n        else:\n            s1.append(s2.pop(0))\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(0))\n            fights += 1\n        i1 += 1\n        i2 += 1\n    \n    if i1 == k1:\n        print(fights, 2)\n    elif i2 == k2:\n        print(fights, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def main():\n    import sys\n    data = sys.stdin.read().splitlines()\n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2].split()))\n    k2 = int(data[3])\n    s2 = list(map(int, data[4].split()))\n\n    def play_war(s1, s2):\n        while True:\n            if not s1 or not s2:\n                return len(s1) + len(s2)\n            if s1[-1] > s2[-1]:\n                s1.append(s2.pop())\n                s1.append(s1.pop())\n            else:\n                s2.append(s1.pop())\n                s2.append(s2.pop())\n\n    result = play_war(s1, s2)\n    print(result, 2)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    s2 = list(map(int, data[k1+3:]))\n\n    i = j = 0\n    count = 0\n    while True:\n        if i >= len(s1) or j >= len(s2):\n            break\n        if s1[i] > s2[j]:\n            s1.append(s2[j])\n            s2.pop(j)\n            count += 1\n        else:\n            s2.append(s1[i])\n            s1.pop(i)\n            count += 1\n    \n    if len(s1) == 0:\n        print(count, 1)\n    elif len(s2) == 0:\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input())\n    s2 = list(map(int, input().split()))\n\n    f = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.pop()\n            s1.append(s2.pop())\n            f += 1\n        else:\n            s2.pop()\n            s2.append(s1.pop())\n            f += 1\n\n    if len(s1) == 0:\n        print(f, 2)\n    elif len(s2) == 0:\n        print(f, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    \n    def parse_input(input):\n        lines = input.splitlines()\n        n = int(lines[0])\n        k1 = int(lines[1])\n        s1 = list(map(int, lines[2].split()))\n        k2 = int(lines[3])\n        s2 = list(map(int, lines[4].split()))\n        return n, k1, s1, k2, s2\n    \n    def simulate_game(n, k1, s1, k2, s2):\n        i, j = 0, 0\n        count = 0\n        while i < k1 and j < k2:\n            if s1[i] > s2[j]:\n                s1.append(s2.pop())\n                count += 1\n            elif s1[i] < s2[j]:\n                s2.append(s1.pop())\n                count += 1\n            else:\n                s1.append(s2.pop())\n                s2.append(s1.pop())\n                count += 1\n            i += 1\n            j += 1\n        if i < k1:\n            return count + k1 - i, 1\n        elif j < k2:\n            return count + k2 - j, 2\n        else:\n            return count, -1\n    \n    n, k1, s1, k2, s2 = parse_input(input())\n    result = simulate_game(n, k1, s1, k2, s2)\n    print(*result)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    s2 = list(map(int, data[k1+3:]))\n\n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s1.pop())\n            s1.append(s2.pop())\n        else:\n            s2.append(s2.pop())\n            s2.append(s1.pop())\n        count += 1\n    \n    if len(s1) == 0:\n        print(count, 2)\n    elif len(s2) == 0:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    \n    def parse_input(input):\n        lines = input.strip().split('\\n')\n        n = int(lines[0])\n        k1 = int(lines[1])\n        s1 = list(map(int, lines[2].split()))\n        k2 = n - k1\n        s2 = list(map(int, lines[3].split()))\n        \n        return n, k1, s1, k2, s2\n    \n    def simulate_game(n, k1, s1, k2, s2):\n        fights = 0\n        while s1 and s2:\n            c1 = s1.pop()\n            c2 = s2.pop()\n            if c1 > c2:\n                s1.append(c1)\n                s1.append(c2)\n            else:\n                s2.append(c2)\n                s2.append(c1)\n            fights += 1\n        \n        if not s1:\n            winner = 2\n        elif not s2:\n            winner = 1\n        else:\n            winner = -1\n        \n        return fights, winner\n    \n    n, k1, s1, k2, s2 = parse_input(input())\n    fights, winner = simulate_game(n, k1, s1, k2, s2)\n    \n    print(fights, winner)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k1 = int(data[1])\n    s1 = list(map(int, data[2:k1+2]))\n    k2 = int(data[k1+2])\n    s2 = list(map(int, data[k1+3:]))\n\n    i1 = len(s1) - 1\n    i2 = len(s2) - 1\n    fights = 0\n\n    while i1 >= 0 and i2 >= 0:\n        if s1[i1] > s2[i2]:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            fights += 1\n        elif s1[i1] < s2[i2]:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            fights += 1\n        else:\n            s1.append(s1.pop(i1))\n            s2.append(s2.pop(i2))\n            fights += 1\n            i1 -= 1\n            i2 -= 1\n\n    if i1 == -1:\n        print(fights, 2)\n    elif i2 == -1:\n        print(fights, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    cards1 = list(map(int, input().split()))\n    k2 = n - k1\n    cards2 = list(map(int, input().split()))\n\n    i, j = 0, 0\n    fights = 0\n    while True:\n        if i >= k1 or j >= k2:\n            break\n        if cards1[i] > cards2[j]:\n            cards1.append(cards1.pop(i))\n            cards1.append(cards2.pop(j))\n            fights += 1\n        elif cards1[i] < cards2[j]:\n            cards2.append(cards2.pop(j))\n            cards2.append(cards1.pop(i))\n            fights += 1\n        else:\n            cards1.append(cards1.pop(i))\n            cards1.append(cards2.pop(j))\n            cards2.append(cards1.pop(i))\n            fights += 1\n\n    if i >= k1:\n        print(fights, 1)\n    elif j >= k2:\n        print(fights, 2)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, cards1, k2, cards2):\n    fights = 0\n    while len(cards1) > 0 and len(cards2) > 0:\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards1.pop())\n            cards1.append(cards2.pop())\n        else:\n            cards2.append(cards2.pop())\n            cards2.append(cards1.pop())\n        fights += 1\n    if len(cards1) == 0:\n        return fights, 2\n    elif len(cards2) == 0:\n        return fights, 1\n    else:\n        return -1\n\nif True:\n    n = int(input().strip())\n    k1 = int(input().strip())\n    cards1 = list(map(int, input().strip().split()))\n    k2 = int(input().strip())\n    cards2 = list(map(int, input().strip().split()))\n    result = solve(n, k1, cards1, k2, cards2)\n    print(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k1, k2 = data[:3]\n    cards1 = data[3:k1+3]\n    cards2 = data[k1+3:]\n    \n    if not cards1 or not cards2:\n        print(-1)\n        return\n    \n    count = 0\n    while cards1 and cards2:\n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n        else:\n            cards2.append(cards1.pop())\n        count += 1\n    \n    if not cards1:\n        print(count, 2)\n    elif not cards2:\n        print(count, 1)\n\nif True:\n    solve()",
    "def solve(n, k1, values1, k2, values2):\n    total_fights = 0\n    while k1 > 0 and k2 > 0:\n        total_fights += 1\n        max_value1 = max(values1)\n        max_index1 = values1.index(max_value1)\n        max_value2 = max(values2)\n        max_index2 = values2.index(max_value2)\n        \n        if max_value1 >= max_value2:\n            values1.pop(max_index1)\n            values2.append(max_value1)\n            values2.append(max_value2)\n            k1 -= 1\n            k2 -= 1\n        else:\n            values2.pop(max_index2)\n            values1.append(max_value2)\n            values1.append(max_value1)\n            k1 -= 1\n            k2 -= 1\n    \n    if k1 == 0:\n        return total_fights, 2\n    elif k2 == 0:\n        return total_fights, 1\n    else:\n        return -1\n\n# Read input\nn = int(input())\nk1 = int(input())\nvalues1 = list(map(int, input().split()))\nk2 = int(input())\nvalues2 = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(n, k1, values1, k2, values2)\n\n# Print the result\nprint(result[0], result[1])",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.extend([s2.pop()])\n            s2.extend([s1.pop()])\n        else:\n            s2.extend([s1.pop()])\n            s1.extend([s2.pop()])\n        count += 1\n    \n    if len(s1) == 0:\n        print(count, 2)\n    elif len(s2) == 0:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    k1 = int(input())\n    s1 = list(map(int, input().split()))\n    k2 = int(input()) + k1\n    s2 = list(map(int, input().split()))\n\n    count = 0\n    while s1 and s2:\n        count += 1\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n        else:\n            s2.append(s1.pop())\n\n    if not s1:\n        print(count, 2)\n    elif not s2:\n        print(count, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def solve(n, k1, k2):\n    stack1 = list(range(1, k1 + 1))\n    stack2 = list(range(k1 + 1, k1 + k2 + 1))\n    \n    count = 0\n    while stack1 and stack2:\n        count += 1\n        if stack1[-1] > stack2[-1]:\n            stack1.pop()\n            stack1.append(stack2.pop())\n        else:\n            stack2.pop()\n            stack2.append(stack1.pop())\n    \n    if not stack1:\n        return count, 2\n    elif not stack2:\n        return count, 1\n    else:\n        return -1\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k1 = int(data[1])\n    k2 = int(data[2])\n    result = solve(n, k1, k2)\n    print(*result)",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    def compare_cards(card1, card2):\n        return card1 > card2\n    \n    def play_war(cards1, cards2):\n        count = 0\n        while True:\n            if not cards1 or not cards2:\n                break\n            card1 = cards1.pop()\n            card2 = cards2.pop()\n            if compare_cards(card1, card2):\n                cards1.append(card1)\n                cards1.append(card2)\n            else:\n                cards2.append(card2)\n                cards2.append(card1)\n            count += 1\n        return count\n    \n    num_fights = play_war(cards1, cards2)\n    if num_fights == 0:\n        print(-1)\n    else:\n        print(num_fights, 2)\n\nif True:\n    solve()",
    "def solve(n, k1, values1, k2, values2):\n    i = j = 0\n    count = 0\n    while i < k1 and j < k2:\n        if values1[i] > values2[j]:\n            count += 1\n            values1.append(values2.pop())\n        else:\n            count += 1\n            values2.append(values1.pop())\n        i += 1\n        j += 1\n    return count, (i == k1) * 2\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k1, values1, k2, values2 = data[0], data[1], data[2:k1+2], data[k1+2:], data[k1+k2+2:]\n    result = solve(n, k1, values1, k2, values2)\n    print(*result)",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    cards1 = data[2:k1+2]\n    k2 = data[k1+2]\n    cards2 = data[k1+2+k2:]\n    \n    total_fights = 0\n    while True:\n        total_fights += 1\n        \n        if not cards1 or not cards2:\n            break\n        \n        if cards1[-1] > cards2[-1]:\n            cards1.append(cards2.pop())\n        else:\n            cards2.append(cards1.pop())\n\n    if not cards1:\n        print(total_fights, 2)\n    elif not cards2:\n        print(total_fights, 1)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n\n    i = j = 0\n    fights = 0\n\n    while True:\n        if i == len(s1) or j == len(s2):\n            break\n\n        if s1[i] > s2[j]:\n            s1.append(s1.pop(i))\n            s2.append(s2.pop(j))\n            fights += 1\n        else:\n            s2.append(s2.pop(j))\n            s1.append(s1.pop(i))\n            fights += 1\n\n    if len(s1) > len(s2):\n        print(fights, 1)\n    elif len(s2) > len(s1):\n        print(fights, 2)\n    else:\n        print(-1)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n = data[0]\n    k1 = data[1]\n    s1 = data[2:k1+2]\n    k2 = data[k1+2]\n    s2 = data[k1+2+k2:]\n    \n    count = 0\n    while len(s1) > 0 and len(s2) > 0:\n        if s1[-1] > s2[-1]:\n            s1.append(s2.pop())\n            s1.append(s1.pop())\n        else:\n            s2.append(s1.pop())\n            s2.append(s2.pop())\n        count += 1\n    \n    if len(s1) == 0:\n        print(count, 1)\n    elif len(s2) == 0:\n        print(count, 2)\n    else:\n        print(-1)\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.04878048780487805,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2682926829268293,
    0.0975609756097561,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0975609756097561,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.1,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2,
    0.15,
    0.25,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.325,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": 329.5534989833832,
  "sample times": 50
}