{
  "prompt": "\nQUESTION:\nAmr doesn't like Maths as he finds it really boring, so he usually sleeps in Maths lectures. But one day the teacher suspected that Amr is sleeping and asked him a question to make sure he wasn't.\n\nFirst he gave Amr two positive integers n and k. Then he asked Amr, how many integer numbers x > 0 exist such that:  Decimal representation of x (without leading zeroes) consists of exactly n digits;  There exists some integer y > 0 such that:   $y \\operatorname{mod} k = 0$;  decimal representation of y is a suffix of decimal representation of x.  \n\nAs the answer to this question may be pretty huge the teacher asked Amr to output only its remainder modulo a number m.\n\nCan you help Amr escape this embarrassing situation?\n\n\n-----Input-----\n\nInput consists of three integers n, k, m (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 100, 1 \u2264 m \u2264 10^9).\n\n\n-----Output-----\n\nPrint the required number modulo m.\n\n\n-----Examples-----\nInput\n1 2 1000\n\nOutput\n4\nInput\n2 2 1000\n\nOutput\n45\nInput\n5 3 1103\n\nOutput\n590\n\n\n-----Note-----\n\nA suffix of a string S is a non-empty string that can be obtained by removing some number (possibly, zero) of first characters from S.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k, m):\n    def count_suffixes(n, k, m):\n        # Calculate the number of ways to choose the last digit\n        last_digit_count = 10 - k\n        \n        # Calculate the total number of valid suffixes\n        total_suffixes = last_digit_count * (n + 1)\n        \n        # Return the result modulo m\n        return total_suffixes % m\n    \n    # Calculate the result for the given inputs\n    result = count_suffixes(n, k, m)\n    \n    # Print the result modulo m\n    print(result)\n\n# Main function\nif True:\n    n, k, m = map(int, input().split())\n    solve(n, k, m)",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, n-i)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 10**n):\n        s = str(i)\n        if len(s) == n:\n            y = int(s[-k:])\n            if y % k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x, k):\n        return sum(1 for i in range(len(str(x)) - len(str(k))) if str(x)[-i:] == str(k)\n    \n    total = 0\n    for x in range(1, 10**n):\n        if count_suffixes(x, k) % k == 0:\n            total += 1\n    \n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(n, k):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return 1 + count_suffixes(n - 1, k) * (k + 1)\n    \n    total_count = count_suffixes(n, k)\n    result = total_count % m\n    \n    return result\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, 10**n):\n        num_str = str(i)\n        for j in range(len(num_str)):\n            if int(num_str[j:]) % k == 0:\n                count += 1\n                break\n                \n    return count % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (j-i)%k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n + 1):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(1, 10**k + 1):\n                str_j = str(j)\n                if str_j.endswith(str_i):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k):\n        # Calculate the total number of valid numbers with n digits\n        total_count = 0\n        for i in range(1, n + 1):\n            # Count numbers with exactly i digits where the last digit is divisible by k\n            total_count += (k * (10 ** (i - 1)))\n        \n        return total_count\n    \n    # Calculate the number of valid numbers with n digits where the last digit is divisible by k\n    result = count_valid_numbers(n, k)\n    \n    # Return the result modulo m\n    return result % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        x_str = str(i)\n        if len(x_str) != n:\n            continue\n        y_str = x_str[-k:]\n        if int(y_str) % k == 0:\n            count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, 10**n):\n        str_x = str(i)\n        if len(str_x) == n:\n            y = int(str_x[-k:])\n            if y % k == 0:\n                count += 1\n                \n    return count % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        num_str = str(i)\n        for j in range(len(num_str)):\n            if int(num_str[j:]) % k == 0:\n                count += 1\n                break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x):\n        return sum(1 for i in range(len(str(x))) if str(x)[i:] == str(x)[-i:]\n    \n    ans = 0\n    for x in range(1, 10**n):\n        if x % k == 0:\n            ans += count_suffixes(x)\n    \n    return ans % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x):\n        return sum(1 for i in range(len(str(x)) - n + 1) if str(x)[-i:] == str(x)[len(str(x)) - i - n:]\n    \n    total_count = 0\n    for x in range(1, 10**n):\n        if x % k == 0:\n            total_count += count_suffixes(x)\n    \n    return total_count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(k):\n            if str(j).zfill(i) == str(j)[-i:]:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x, k):\n        return sum(1 for i in range(len(x)) if int(x[i:]) % k == 0)\n\n    total = 0\n    for i in range(1, 10**n + 1):\n        x = str(i)\n        if len(x) < n:\n            continue\n        total += count_suffixes(x, k)\n    \n    return total % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x):\n        return sum(1 for i in range(len(str(x))) if str(x)[i:] == str(x)[-len(str(x)):i])\n    \n    total = 0\n    for x in range(1, 10**n):\n        if count_suffixes(x) % k == 0:\n            total += 1\n    \n    return total % m\n\nif True:\n    import sys\n    inputs = sys.stdin.read().split()\n    n, k, m = int(inputs[0]), int(inputs[1]), int(inputs[2])\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 10**n):\n        s = str(i)\n        for j in range(len(s)):\n            y = int(s[j:])\n            if y % k == 0:\n                count += 1\n                break\n        else:\n            continue\n        break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_suffixes(n, k):\n        # Count the number of valid suffixes for n-digit numbers\n        return (k + 1) * pow(k, n - 1)\n\n    # Calculate the number of valid x values\n    result = count_valid_suffixes(n, k)\n    \n    # Return the result modulo m\n    return result % m\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x, y):\n        return len(str(y)) == n\n    \n    total_count = 0\n    for x in range(1, 10**n):\n        if str(x).endswith('0'):\n            continue\n        y = x % k\n        if count_suffixes(x, y):\n            total_count += 1\n            \n    return total_count % m\n\nif True:\n    import sys\n    input_data = sys.stdin.read().split()\n    n, k, m = int(input_data[0]), int(input_data[1]), int(input_data[2])\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    def count_valid_suffixes(x):\n        return sum(1 for i in range(1, len(str(x))) if str(x)[i:] == str(x)[-i:]\n\n    total_count = 0\n    for x in range(1, 10**n):\n        if count_valid_suffixes(x) % k == 0:\n            total_count += x\n\n    return total_count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(k, m + 1, k):\n            if str(j).endswith(str(i)):\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        if len(x) == n:\n            for j in range(1, 10**k):\n                y = str(j)\n                if x.endswith(y):\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    import sys\n    inputs = sys.stdin.read().split()\n    n = int(inputs[0])\n    k = int(inputs[1])\n    m = int(inputs[2])\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n + 1):\n        if i % k == 0:\n            count += pow(10, i - 1)\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(x):\n        return sum(1 for i in range(len(str(x))) if str(x)[-i:] == str(x)[len(str(x))-i:]\n    \n    ans = 0\n    for x in range(1, 10**n):\n        if x % k == 0 and count_suffixes(x) >= n:\n            ans += 1\n    \n    return ans % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Print output\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        for j in range(len(str_i)):\n            if int(str_i[j:]) % k == 0:\n                count += 1\n                break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    \n    for i in range(1, n+1):\n        if i % k == 0:\n            count += pow(10, i-1, mod)\n    \n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(n, k):\n        if n == 1:\n            return 1\n        if k == 1:\n            return 9 * (10 ** (n - 1))\n        return 9 * (10 ** (n - 1)) + 8 * (count_suffixes(n - 1, k - 1))\n\n    total_count = count_suffixes(n, k)\n    return total_count % m\n\nif True:\n    import sys\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    n, k, m = data\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k):\n        total_count = 0\n        for i in range(1, 10):\n            total_count += count_valid_suffixes(i, n - 1, k)\n        return total_count\n    \n    def count_valid_suffixes(x, remaining_digits, k):\n        if remaining_digits == 0:\n            return x % k == 0\n        count = 0\n        for i in range(1, 10):\n            if i % k != 0:\n                continue\n            count += count_valid_suffixes(x * 10 + i, remaining_digits - 1, k)\n        return count\n    \n    result = count_valid_numbers(n, k) % m\n    print(result)\n\n# Example usage\nsolve(1, 2, 1000)\nsolve(2, 2, 1000)\nsolve(5, 3, 1103)",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k, m):\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(k, m + 1):\n                if str(j).endswith(str(i)):\n                    count += 1\n        return count\n    \n    result = count_valid_numbers(n, k, m)\n    return result % m\n\n# Example usage:\nn, k, m = map(int, input().split())\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_suffixes(n, k):\n        if n == 1:\n            return k - 1\n        return k * count_suffixes(n - 1, k)\n    \n    result = count_suffixes(n, k) % m\n    return result\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve and print output\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    ans = 0\n    \n    for i in range(1, n+1):\n        if i % k == 0:\n            ans += pow(10, i-1, mod)\n    \n    return ans % m\n\n# Read input\nn, k, m = map(int, input().split())\n\n# Solve problem\nprint(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += 1\n    return (count * pow(10, n-1, mod)) % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n + 1):\n        num_str = str(i)\n        if len(num_str) != n:\n            continue\n        for j in range(k):\n            if num_str.endswith(str((j+1)*k)):\n                count += 1\n                break\n    return count % m\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    def count_suffixes(x, k):\n        return len(str(x)) - len(str(x % k))\n\n    total = 0\n    for i in range(1, n + 1):\n        total += count_suffixes(i, k)\n    \n    return total % m\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k, m = map(int, data)\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if str(j).endswith(str(i)):\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**(n-1)):\n        x = str(i)\n        for j in range(1, 10**k):\n            y = str(j)\n            if y == x[-len(y):]:\n                count += 1\n    return count % m\n\nif True:\n    import sys\n    data = sys.stdin.read().split()\n    n, k, m = int(data[0]), int(data[1]), int(data[2])\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        x = str(i)\n        for j in range(1, 10**(len(x)-n)):\n            y = str(j)\n            if y.endswith(x):\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str(j).endswith(str(i)):\n                count += 1\n    return count % m\n\nif True:\n    import sys\n    input_data = sys.stdin.read().strip()\n    data = list(map(int, input_data.split()))\n    n, k, m = data\n    result = solve(n, k, m)\n    print(result)",
    "def solve(n, k, m):\n    def count_valid_suffixes(n, k):\n        # Calculate the number of valid suffixes for each length of x\n        return sum(k**(n-i) * i for i in range(1, n+1))\n\n    # Calculate the total number of valid x's based on the given constraints\n    total_count = count_valid_suffixes(n, k)\n\n    # Return the result modulo m\n    return total_count % m\n\n# Main function to handle input and call the solve function\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k, m = map(int, data)\n    print(solve(n, k, m))\n\nif True:\n    main()",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k):\n        total_count = 0\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                total_count += 1\n        return total_count\n    \n    def find_suffixes(x, k):\n        suffixes = []\n        while x % k == 0:\n            suffixes.append(str(x))\n            x //= k\n        return suffixes\n    \n    total_count = count_valid_numbers(n, k)\n    suffixes = find_suffixes(total_count, k)\n    \n    result = sum(int(suffix) for suffix in suffixes) % m\n    return result\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    k = int(data[1])\n    m = int(data[2])\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        num_str = str(i)\n        if len(num_str) != n:\n            continue\n        for j in range(1, 10**(len(num_str)-1)):\n            if j % k == 0:\n                suffix = str(j)\n                if suffix == num_str[-len(suffix):]:\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        num_str = str(i)\n        if len(num_str) == n:\n            for j in range(1, 10**k):\n                y_str = str(j)\n                if y_str.endswith(num_str):\n                    count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if j % k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, 10**n):\n        str_i = str(i)\n        if len(str_i) == n:\n            for j in range(k):\n                if int(str_i[-len(str(j)+1):]) % k == 0:\n                    count += 1\n                    break\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i * j) % k == 0:\n                count += 1\n    return count % m\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k, m):\n        count = 0\n        for i in range(1, 10**(n-1)):\n            num_str = str(i)\n            if num_str[-k:] == str(i)[-(k-1):]:\n                count += 1\n        return count % m\n    \n    result = count_valid_numbers(n, k, m)\n    return result\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k, m = data\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 10**n):\n        s = str(i)\n        if len(s) == n:\n            y = int(s[-k:])\n            if y % k == 0:\n                count += 1\n    return count % mod\n\nif True:\n    n, k, m = map(int, input().split())\n    print(solve(n, k, m))",
    "def solve(n, k, m):\n    def count_valid_numbers(n, k, m):\n        total_count = 0\n        for i in range(1, n + 1):\n            if i % k == 0:\n                total_count += pow(10, i - 1)\n        return total_count % m\n    \n    result = count_valid_numbers(n, k, m)\n    print(result)\n\n# Example usage\nif True:\n    n, k, m = map(int, input().split())\n    solve(n, k, m)"
  ],
  "rewards": [
    0.05,
    0.1,
    0.0,
    0.0,
    0.025,
    0.0,
    0.025,
    0.1,
    0.0,
    0.05,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.05,
    0.0,
    0.0,
    0.075,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.1,
    0.0,
    0.0,
    0.1,
    0.05,
    0.0,
    0.0,
    0.025,
    0.1,
    0.075,
    0.0,
    0.1,
    0.025,
    0.0,
    0.1,
    0.1,
    0.025,
    0.0,
    0.0,
    0.0,
    0.1,
    0.0,
    0.1,
    0.0,
    0.0,
    0.1
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": 205.58944988250732,
  "sample times": 50
}