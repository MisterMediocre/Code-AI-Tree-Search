{
  "prompt": "\nQUESTION:\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n\n-----Examples-----\nInput\n1 4 2\n\nOutput\n6\n\nInput\n5 5 5\n\nOutput\n14\n\nInput\n0 2 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(l, r, a):\n    # Calculate the maximum number of players using their left and right hands\n    max_players = min(2 * (l + r), 2 * (a + l))\n    return max_players\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both hands\n    max_players = min(l // 2 + r // 2, a)\n    \n    # Check if the maximum number of players can be formed\n    if max_players * 2 <= l + r + a:\n        return max_players * 2\n    else:\n        return 0\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using their left and right hands\n    max_players = min(l + a, r + a)\n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed\n    min_players = max(l // 2, r // 2)\n    \n    # Check if the total number of players is even\n    if (l + r + a) % 2 == 0:\n        return min_players * 4\n    else:\n        return min_players * 4 - 1\n\n# Read input\ninput_data = input().split()\nl, r, a = map(int, input_data)\n\n# Solve the problem\noutput = solve(l, r, a)\n\n# Print the output\nprint(output)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both hands\n    max_players = min(l, r)\n    \n    # Check if the total number of players is even\n    if (l + r + a) % 2 != 0:\n        return 0\n    \n    # Return the calculated maximum number of players\n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(l, r)\n    \n    # Check if the maximum number of players is odd, if so, decrement by one\n    if max_players % 2 != 0:\n        max_players -= 1\n    \n    return max_players * 2\n\n# Read input from stdin\ninput_data = input().split()\nl, r, a = map(int, input_data)\n\n# Call the solve function and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each type\n    min_left = max(0, (l + r - a) // 2)\n    min_right = max(0, (r + l - a) // 2)\n    \n    # Calculate the maximum possible size of the team\n    max_team_size = 2 * min_left + 2 * min_right\n    \n    return max_team_size\n\n# Read input\ninput_values = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_values)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players with both left and right hands\n    max_left_right = min(l // 2, r // 2)\n    \n    # Calculate the remaining players after forming teams with both left and right hands\n    remaining_players = total_players - 2 * max_left_right\n    \n    # Calculate the maximum number of players with one hand\n    max_one_hand = remaining_players // 2\n    \n    # Return the maximum possible size of the team\n    return max_left_right + max_one_hand\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Solve the problem and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    # Calculate the maximum number of players using both left and right hands\n    max_team_size = min(total // 2, l + r)\n    return max_team_size * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(l, r)\n    \n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players using both hands\n    max_players = min(total // 2, l, r)\n    \n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left_half = total // 2\n    right_half = total // 2\n    \n    # Ambidexters can play with either left or right hand\n    max_players = min(left_half, right_half)\n    \n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    # Ambidexters can play either way, so we need to consider both cases\n    max_team_size = min(total // 2, l + r)\n    \n    return max_team_size * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    # If the total is odd, return 0 because we need an even number of players\n    if total % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players using both hands\n    max_players = min(l, r)\n    \n    # Calculate the maximum number of players using one hand\n    max_one_hand = total - max_players\n    \n    # Check if it's possible to have equal numbers of players using both hands and one hand\n    if max_players >= max_one_hand:\n        return max_players * 2\n    else:\n        return max_players + max_one_hand\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players required for each hand type\n    min_left = min(a, l)\n    min_right = min(a, r)\n    \n    # Calculate the maximum possible number of players in the team\n    max_team = 2 * min_left + 2 * min_right\n    \n    return max_team\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    \n    left_hand_players = l // 2\n    right_hand_players = r // 2\n    \n    # Calculate the maximum number of players using both left and right hands\n    max_team_size = min(left_hand_players, right_hand_players)\n    \n    return max_team_size * 2\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Solve the problem and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players with both left and right hands\n    max_left_right = min(l, r)\n    \n    # Calculate the total number of players in the team\n    total_players = max_left_right * 2\n    \n    return total_players\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = min(total // 2, l)\n    right = min(total // 2, r)\n    return left * 2 + right * 2 + a\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players with both hands\n    max_with_both = min(total // 2, l + r)\n    \n    # Calculate the remaining players with one hand\n    remaining_one_hand = total - max_with_both\n    \n    # Calculate the maximum number of players with one hand\n    max_with_one_hand = min(remaining_one_hand // 2, l + r)\n    \n    return max(max_with_both, max_with_one_hand)\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Solve the problem and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = min(l, r)\n    right = min(r, l)\n    return 2 * (left + right)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left_players = min(l, r)\n    right_players = min(r, l)\n    \n    if left_players > right_players:\n        return left_players * 2\n    else:\n        return right_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    half_players = total_players // 2\n    left_handers = min(half_players, l)\n    right_handers = min(half_players, r)\n    ambidextrers = min(half_players, a)\n    return left_handers + right_handers + ambidextrers\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left_half = total // 2\n    right_half = total // 2\n    \n    # Ambidexters can play either way\n    ambidexter_left = min(a, left_half)\n    ambidexter_right = min(a, right_half)\n    \n    # Left-handers and right-handers can only be used once each\n    left_handers_used = min(l, left_half)\n    right_handers_used = min(r, right_half)\n    \n    # Calculate the maximum possible team size\n    max_team_size = left_handers_used + right_handers_used + ambidexter_left + ambidexter_right\n    \n    return max_team_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(2 * (l + r), 2 * (a + r))\n    \n    return max_players\n\n# Read input from stdin\ninput_data = list(map(int, input().split()))\n\n# Call the solve function with the input data\noutput = solve(*input_data)\n\n# Print the output\nprint(output)",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each type of hand\n    min_left = max(0, l - r)\n    min_right = max(0, r - l)\n    \n    # Calculate the maximum number of players that can be formed\n    max_players = min_left + min_right\n    \n    # Check if it's possible to form an even number of players\n    if max_players % 2 == 0:\n        return max_players\n    else:\n        return 0\n\n# Read input from stdin\ninput_data = input().split()\nl, r, a = int(input_data[0]), int(input_data[1]), int(input_data[2])\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each type\n    min_left = max(0, l - r)\n    min_right = max(0, r - l)\n    \n    # Calculate the maximum number of players that can be formed\n    max_players = min(min_left + min_right, 2 * (l + r + a))\n    \n    return max_players\n\n# Read input from stdin\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    \n    left_hand_players = min(l // 2, r)\n    right_hand_players = min(r // 2, l)\n    \n    total_team_size = left_hand_players + right_hand_players + a\n    \n    return total_team_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players with both left and right hands\n    max_left = min(l, r)\n    max_right = min(r, l)\n    \n    # Calculate the maximum number of ambidextrous players\n    max_ambidexters = min(a, max_left + max_right)\n    \n    # Calculate the total maximum number of players\n    total_max = max_left + max_right + max_ambidexters\n    \n    return total_max\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both hands\n    max_players = min(l + r, 2 * min(a, l))\n    \n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nmax_team_size = solve(l, r, a)\n\n# Print the result\nprint(max_team_size)",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using their left and right hands\n    max_players = min(l, r)\n    \n    return max_players * 2\n\n# Read input from stdin\ninput_data = input().split()\nl, r, a = map(int, input_data)\n\n# Call the solve function and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players using their left and right hands\n    max_left = min(l // 2, r)\n    max_right = min(r // 2, l)\n    \n    # Total players using their left and right hands\n    total_players = max_left + max_right\n    \n    # Remaining players for ambidexters\n    remaining_players = total - total_players\n    \n    # If there are enough remaining players for ambidexters, add them\n    if remaining_players >= a:\n        total_players += a\n    \n    return total_players\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(2 * l, 2 * r)\n    \n    # Check if there are enough ambidexters to balance the team\n    if a >= max_players // 2:\n        return max_players\n    else:\n        return 0\n\n# Read input from stdin\ninput_str = input().strip()\nl, r, a = map(int, input_str.split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the minimum number of players required\n    min_players = max((l + a) // 2, (r + a) // 2)\n    \n    # Calculate the maximum number of players that can be formed\n    max_players = min(min_players, l + r + a)\n    \n    return max_players\n\n# Read input\ninput_data = input().split()\nl, r, a = map(int, input_data)\n\n# Solve the problem\noutput = solve(l, r, a)\n\n# Print the output\nprint(output)",
    "def solve(l, r, a):\n    # Calculate the minimum number of players required for each type\n    min_left = max(0, l - r)\n    min_right = max(0, r - l)\n    \n    # Calculate the maximum number of players in the team\n    max_team_size = min_left + min_right + a\n    \n    # Ensure the team size is even\n    return max_team_size * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(l + a, r + a)\n    \n    # Check if the calculated maximum number of players is even\n    if max_players % 2 == 0:\n        return max_players\n    else:\n        return 0\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(l, r)\n    \n    # If there are ambidexters, add them to the maximum number of players\n    if a > 0:\n        max_players += a\n    \n    # Ensure the total number of players is even\n    if max_players % 2 != 0:\n        max_players -= 1\n    \n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(total // 2, l, r)\n    \n    return max_players * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    half = total // 2\n    left = min(half, l)\n    right = min(half, r)\n    return left * 2 + right * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left_hand = total // 2\n    right_hand = total // 2\n    return left_hand * 2 + right_hand * 2\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players required for each hand\n    min_left = l // 2 + (a > 0)\n    min_right = r // 2 + (a > 0)\n    \n    # Calculate the maximum possible size of the team\n    max_size = min(min_left, min_right)\n    \n    return max_size * 2\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each hand\n    min_left = min(a, l // 2)\n    min_right = min(a, r // 2)\n    \n    # Calculate the maximum number of players that can be in the team\n    max_players = min_left + min_right\n    \n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nmax_team_size = solve(l, r, a)\n\n# Print the result\nprint(max_team_size)",
    "def solve(l, r, a):\n    total_players = l + r + a\n    # Ambidexters can play with either hand, so we need to consider both cases\n    max_left_hand = min(total_players // 2, l)\n    max_right_hand = min(total_players // 2, r)\n    \n    # We need to ensure that the total number of players is even\n    if (max_left_hand + max_right_hand) % 2 != 0:\n        return 0\n    \n    return max_left_hand + max_right_hand\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Solve the problem and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using both left and right hands\n    max_players = min(l + r, 2 * (l + r - a))\n    \n    return max_players\n\n# Read input from stdin\ninput_data = input().split()\nl, r, a = map(int, input_data)\n\n# Call the solve function and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the maximum number of players using their left and right hands\n    max_players = min(2 * l + 2 * r, 2 * (l + r + a))\n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nmax_team_size = solve(l, r, a)\n\n# Print the result\nprint(max_team_size)",
    "def solve(l, r, a):\n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    left = min(l, r)\n    right = min(l, r)\n    ambidexter = max(a - left, a - right)\n    return 2 * left + 2 * right + 2 * ambidexter\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players required for the team\n    min_players = max((l + a) // 2, (r + a) // 2)\n    \n    # Calculate the maximum number of players that can be formed\n    max_players = min(min_players * 2, l + r + a)\n    \n    return max_players\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each type of hand\n    min_left = min(a, l // 2)\n    min_right = min(a, r // 2)\n    \n    # Calculate the total number of players that can be formed\n    max_team_size = min_left + min_right\n    \n    return max_team_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each hand\n    min_left = l // 2\n    min_right = r // 2\n    \n    # Check if it's possible to form the required team\n    if min_left + min_right + a > 0:\n        return 2 * min_left + 2 * min_right + 2 * a\n    else:\n        return 0\n\n# Read input from stdin\ninput_data = list(map(int, input().split()))\n\n# Call the solve function with the input data\nprint(solve(*input_data))",
    "def solve(l, r, a):\n    # Calculate the minimum number of players needed for each hand\n    min_left = l // 2 + a\n    min_right = r // 2 + a\n    \n    # Check if it's possible to form a team with the given constraints\n    if min_left > l or min_right > r:\n        return 0\n    \n    # Return the total number of players in the team\n    return min_left + min_right\n\n# Read input from stdin\nl, r, a = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    \n    left_handers = l // 2\n    right_handers = r // 2\n    ambidexters = a\n    \n    max_team_size = 2 * min(left_handers, right_handers)\n    \n    return max_team_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print output\nprint(solve(l, r, a))"
  ],
  "rewards": [
    0.3,
    0.025,
    0.375,
    0.0,
    0.075,
    0.1,
    0.05,
    0.025,
    0.775,
    0.175,
    0.075,
    0.55,
    0.5,
    0.55,
    0.275,
    0.025,
    0.175,
    0.075,
    0.025,
    0.025,
    0.075,
    0.5,
    0.125,
    0.375,
    0.025,
    0.025,
    0.075,
    0.3,
    0.025,
    0.175,
    0.075,
    0.025,
    0.05,
    0.0,
    0.1,
    0.1,
    0.075,
    0.125,
    0.025,
    0.1,
    0.025,
    0.125,
    0.075,
    0.15,
    0.275,
    0.25,
    0.025,
    0.15,
    0.075,
    0.025
  ],
  "train rewards": [
    0.358974358974359,
    0.10256410256410256,
    0.48717948717948717,
    0.1282051282051282,
    0.1282051282051282,
    0.15384615384615385,
    0.05128205128205128,
    0.02564102564102564,
    0.5641025641025641,
    0.1794871794871795,
    0.1282051282051282,
    0.41025641025641024,
    0.3333333333333333,
    0.41025641025641024,
    0.358974358974359,
    0.10256410256410256,
    0.1794871794871795,
    0.05128205128205128,
    0.02564102564102564,
    0.1282051282051282,
    0.1282051282051282,
    0.3333333333333333,
    0.07692307692307693,
    0.23076923076923078,
    0.02564102564102564,
    0.02564102564102564,
    0.1282051282051282,
    0.15384615384615385,
    0.1282051282051282,
    0.1794871794871795,
    0.1282051282051282,
    0.1282051282051282,
    0.02564102564102564,
    0.07692307692307693,
    0.15384615384615385,
    0.15384615384615385,
    0.1282051282051282,
    0.07692307692307693,
    0.02564102564102564,
    0.1282051282051282,
    0.10256410256410256,
    0.1282051282051282,
    0.10256410256410256,
    0.07692307692307693,
    0.358974358974359,
    0.23076923076923078,
    0.10256410256410256,
    0.10256410256410256,
    0.05128205128205128,
    0.10256410256410256
  ],
  "time": 185.40415740013123,
  "sample times": 50
}