{
  "prompt": "\nQUESTION:\nPolycarp has to solve exactly $n$ problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in $k$ days. It means that Polycarp has exactly $k$ days for training!\n\nPolycarp doesn't want to procrastinate, so he wants to solve at least one problem during each of $k$ days. He also doesn't want to overwork, so if he solves $x$ problems during some day, he should solve no more than $2x$ problems during the next day. And, at last, he wants to improve his skill, so if he solves $x$ problems during some day, he should solve at least $x+1$ problem during the next day.\n\nMore formally: let $[a_1, a_2, \\dots, a_k]$ be the array of numbers of problems solved by Polycarp. The $i$-th element of this array is the number of problems Polycarp solves during the $i$-th day of his training. Then the following conditions must be satisfied:   sum of all $a_i$ for $i$ from $1$ to $k$ should be $n$;  $a_i$ should be greater than zero for each $i$ from $1$ to $k$;  the condition $a_i < a_{i + 1} \\le 2 a_i$ should be satisfied for each $i$ from $1$ to $k-1$. \n\nYour problem is to find any array $a$ of length $k$ satisfying the conditions above or say that it is impossible to do it.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 10^9, 1 \\le k \\le 10^5$) \u2014 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.\n\n\n-----Output-----\n\nIf it is impossible to find any array $a$ of length $k$ satisfying Polycarp's rules of training, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, then print $k$ integers $a_1, a_2, \\dots, a_k$ in the second line, where $a_i$ should be the number of problems Polycarp should solve during the $i$-th day. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n26 6\n\nOutput\nYES\n1 2 4 5 6 8 \n\nInput\n8 3\n\nOutput\nNO\n\nInput\n1 1\n\nOutput\nYES\n1 \n\nInput\n9 4\n\nOutput\nNO\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n, k):\n    if (n % 2 != 0) or (n // 2 > k):\n        return \"NO\"\n    \n    arr = [1] * k\n    \n    for i in range(1, k):\n        arr[i] = min(arr[i - 1], 2 * arr[i - 1]) + 1\n    \n    if sum(arr) == n:\n        return \"YES\\n\" + \" \".join(map(str, arr))\n    else:\n        return \"NO\"\n\n# Example usage\nprint(solve(26, 6))  # Output: YES\nprint(solve(8, 3))   # Output: NO\nprint(solve(1, 1))   # Output: YES\nprint(solve(9, 4))   # Output: NO",
    "def solve(n, k):\n    if n % 2 != 0 or n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + ' '.join(map(str, a))\n    else:\n        return \"NO\"\n\n# Example usage\nprint(solve(26, 6))  # Output: YES 1 2 4 5 6 8 \nprint(solve(8, 3))   # Output: NO\nprint(solve(1, 1))   # Output: YES 1\nprint(solve(9, 4))   # Output: NO",
    "def solve(n, k):\n    # Check if it's possible to solve the problems within k days\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on the last day\n    min_last_day = n // (k + 1)\n    \n    # Create the array with the minimum number of problems on the last day\n    arr = [min_last_day] * k\n    \n    # Fill the remaining days with the required number of problems\n    for i in range(k - 1):\n        arr[i] = arr[i + 1] + 1\n    \n    # Print the result\n    print(\"YES\")\n    print(*arr)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k - 1):\n        a[i] = min(a[i], (n - sum(a)) // 2)\n    a[-1] = n - sum(a)\n    \n    if all(a[i] < a[i + 1] <= 2 * a[i] for i in range(k - 1)):\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve and print output\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1] + 1)\n    \n    return \"YES\\n\" + ' '.join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve and print the result\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to solve the problems within the given constraints\n    if n % 3 != 0 or n // 3 > k:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = [n // 3] * (k - 1)\n    total_problems = n\n    \n    # Distribute the remaining problems among the days\n    for i in range(1, k):\n        if total_problems >= 3 * min_problems[i - 1]:\n            total_problems -= 3 * min_problems[i - 1]\n            min_problems[i - 1] += 1\n        else:\n            min_problems[i - 1] += total_problems\n            break\n    \n    # Print the solution\n    if total_problems == 0:\n        return \"YES\\n\" + \" \".join(map(str, min_problems))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    while total < n:\n        a[k - 1] += 1\n        total += a[k - 1]\n        \n        if total > n:\n            a[k - 1] -= 1\n            break\n        \n        if a[k - 1] == 2 * a[k - 2]:\n            a[k - 2] += 1\n    \n    if total != n:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Example usage\nprint(solve(26, 6))\nprint(solve(8, 3))\nprint(solve(1, 1))\nprint(solve(9, 4))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] * 2 + 1, n - (k - i))\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    \n    for i in range(k - 1):\n        a[i + 1] = min(2 * a[i], n - (k - i - 1))\n    \n    return \"YES\\n\" + ' '.join(map(str, a))\n\n# Example usage:\nprint(solve(26, 6))\nprint(solve(8, 3))\nprint(solve(1, 1))\nprint(solve(9, 4))",
    "def solve(n, k):\n    # Check if n is less than k * (n // 2)\n    if n < k * (n // 2):\n        return \"NO\"\n    \n    # Initialize the array with the minimum possible values\n    arr = [1] * k\n    \n    # Calculate the remaining problems after filling the array\n    remaining = n - k\n    \n    # Fill the array with the remaining problems\n    for i in range(remaining):\n        arr[i % k] += 1\n    \n    # Print the result\n    print(\"YES\")\n    for i in range(k):\n        print(arr[i], end=\" \")\n    print()\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    # Check if n is odd\n    if n % 2 == 1:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = (n // k) * 2\n    \n    # Create the array with the required number of problems\n    a = [min_problems] * k\n    \n    # Print the result\n    print(\"YES\")\n    print(*a)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = [n // (k + 1)] * k\n    \n    # Check if the conditions are satisfied\n    for i in range(k - 1):\n        if min_problems[i] >= 2 * min_problems[i + 1]:\n            return \"NO\"\n    \n    # Print the solution\n    print(\"YES\")\n    for i in range(k):\n        print(min_problems[i])\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total + i > n:\n            break\n        a[i] = i + 1\n        total += i + 1\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    total = 0\n    \n    for i in range(k):\n        a[i] = min(total + (n - total) // 3, n)\n        total += a[i]\n    \n    if total == n:\n        return \"YES\\n\" + ' '.join(map(str, a))\n    else:\n        return \"NO\"\n\n# Example usage\nprint(solve(26, 6))  # Output: YES 1 2 4 5 6 8 \nprint(solve(8, 3))   # Output: NO\nprint(solve(1, 1))   # Output: YES 1\nprint(solve(9, 4))   # Output: NO",
    "def solve(n, k):\n    # Check if it's possible to satisfy the conditions\n    if n % 3 != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems to solve each day\n    min_problems = (n // 3) * 2\n    \n    # Generate the array of solutions\n    solution = [min_problems] * k\n    \n    # Print the result\n    print(\"YES\")\n    print(*solution)\n    \n# Read input\nn, k = map(int, input().split())\nsolve(n, k)",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total >= n:\n            break\n        a[i] = min(2 * a[i - 1], n - total)\n        total += a[i]\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve and print output\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - 1) % 2 != 0:\n        return \"NO\"\n    \n    arr = [1] * k\n    \n    for i in range(1, k):\n        arr[i] = arr[i - 1] + 2\n    \n    return \"YES\\n\" + \" \".join(map(str, arr))\n\n# Example usage:\nprint(solve(26, 6))\nprint(solve(8, 3))\nprint(solve(1, 1))\nprint(solve(9, 4))",
    "def solve(n, k):\n    # Check if it's possible to solve the problem within k days\n    if (n + k - 1) % (2 * k) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems to solve on the first day\n    min_problems = (n + k - 1) // (2 * k)\n    \n    # Generate the solution array\n    solution = [min_problems] * k\n    \n    # Adjust the solution array to satisfy the constraints\n    for i in range(1, k):\n        if solution[i] >= 2 * solution[i - 1]:\n            solution[i] -= 1\n        else:\n            break\n    \n    # Check if the solution satisfies all the constraints\n    if sum(solution) == n and all(a > 0 for a in solution) and all(a < b <= 2 * b for a, b in zip(solution[:-1], solution[1:])):\n        return \"YES\", solution\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nif result == \"YES\":\n    print(\"YES\")\n    print(*result)\nelse:\n    print(result)",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    \n    for i in range(1, k):\n        a[i] = min(a[i-1] + 1, 2 * a[i-1])\n    \n    return \"YES\\n\" + ' '.join(map(str, a))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn, k = map(int, data)\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, (n // 2) + 1)\n    \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    total = 0\n    \n    for i in range(k):\n        a[i] = min(total + 1, n)\n        total += a[i]\n    \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Example usage:\nprint(solve(26, 6))  # Expected: YES 1 2 4 5 6 8 \nprint(solve(8, 3))   # Expected: NO\nprint(solve(1, 1))   # Expected: YES 1\nprint(solve(9, 4))   # Expected: NO",
    "def solve(n, k):\n    if n % 2 == 1:\n        return \"NO\"\n    \n    # Initialize the array with the minimum possible values\n    arr = [1] * k\n    \n    # Calculate the maximum value that can be placed in the last position\n    max_value = (n - k) // 2\n    \n    # Place the maximum value in the last position\n    arr[k - 1] = max_value\n    \n    # Check if the array satisfies the conditions\n    for i in range(k - 1):\n        if arr[i] >= 2 * arr[i + 1] or arr[i + 1] > arr[i] + 1:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, arr))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to satisfy the conditions\n    if n % (k + 1) != 0 or n % (k * 2 + 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = n // (k + 1)\n    \n    # Generate the array based on the calculated values\n    a = [min_problems] * k\n    \n    # Adjust the array to ensure it satisfies the conditions\n    for i in range(k - 1):\n        a[i + 1] = min(a[i] + 1, 2 * a[i])\n    \n    return \"YES\\n\" + ' '.join(map(str, a))\n\n# Read input\ninput_data = input().split()\nn, k = map(int, input_data)\n\n# Solve the problem\noutput = solve(n, k)\nprint(output)",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    x = (n - k) // 3\n    a = [x] * k\n    \n    for i in range(k - 1):\n        a[i + 1] = min(2 * a[i], x + 1)\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn, k = map(int, data)\n\n# Solve and print output\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    total = 0\n    \n    for i in range(k):\n        a[i] = (total // 3) + 1\n        total += a[i]\n        \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = [n // (k + 1)] * k\n    \n    # Adjust the minimum problems based on the constraints\n    for i in range(1, k):\n        min_problems[i] += min_problems[i - 1]\n        if min_problems[i] > 2 * min_problems[i - 1]:\n            return \"NO\"\n    \n    # Check if the solution satisfies the constraints\n    if sum(min_problems) == n and all(a > 0 for a in min_problems):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn, k = int(data[0]), int(data[1])\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)",
    "def solve(n, k):\n    if n % 2 == 1:\n        return \"NO\"\n    \n    a = [n // 2] * (k - 1)\n    a.append(n // 2 + n % 2)\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve(n, k):\n    if n % 2 == 1 or n > 2 * k * (k - 1) + 1:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = max(a[i - 1], a[i - 2] + 1)\n        \n    return \"YES\\n\" + \" \".join(map(str, a))\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    print(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to solve the problem\n    if (n % 2 == 1 and n // 2 != k - 1) or (n % 2 == 0 and n // 2 > k - 1):\n        return \"NO\"\n    \n    # Initialize the array with the minimum number of problems\n    a = [1] * k\n    \n    # Calculate the number of problems to solve on the last day\n    remaining_problems = n - sum(a)\n    a[k - 1] += remaining_problems\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if (n - 1) % 2 != 0 or n > 2 * k:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] + 1, 2 * a[i - 1])\n    \n    if sum(a) == n:\n        return \"YES\\n\" + ' '.join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve and print output\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to solve n problems in k days with the given constraints\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = (n - k) // 3\n    \n    # Generate the array of problems solved\n    a = [min_problems] * k\n    \n    # Adjust the array to satisfy the constraints\n    for i in range(k - 1):\n        a[i + 1] = max(a[i] + 1, 2 * a[i])\n    \n    # Print the result\n    print(\"YES\")\n    print(*a)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if n % 2 != 0 or (n // 2) % 2 == 0:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k - 1):\n        a[i] = a[i - 1] * 2\n    \n    a[-1] = n - sum(a)\n    \n    if a[-1] > 0 and a[-1] <= 2 * a[-2]:\n        print(\"YES\")\n        print(*a)\n    else:\n        print(\"NO\")\n\nif True:\n    n, k = map(int, input().split())\n    solve(n, k)",
    "def solve(n, k):\n    if n % 2 != 0 or n // 2 > k:\n        return \"NO\"\n    \n    arr = [1] * (n // 2)\n    for i in range(1, n // 2):\n        arr[i] = arr[i - 1] * 2\n    \n    if len(arr) == k:\n        return \"YES\\n\" + \" \".join(map(str, arr))\n    \n    return \"NO\"\n\n# Example usage:\nprint(solve(26, 6))  # Output: YES\nprint(solve(8, 3))   # Output: NO\nprint(solve(1, 1))   # Output: YES\nprint(solve(9, 4))   # Output: NO",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    a[0] = (n - k) // 3\n    \n    for i in range(1, k):\n        a[i] = a[i - 1] + 2\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve(n, k):\n    # Check if n is less than k\n    if n < k:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = (n - 1) // k\n    \n    # Create the array with the minimum number of problems per day\n    arr = [min_problems] * k\n    \n    # Calculate the remaining problems after filling the array\n    remaining_problems = n - k * min_problems\n    \n    # Distribute the remaining problems among the days\n    for i in range(remaining_problems):\n        arr[i % k] += 1\n    \n    # Check if the array satisfies the conditions\n    if sum(arr) == n and all(a > 0 for a in arr) and all(a < a + 1 <= 2 * a for a in arr[:-1]):\n        return \"YES\\n\" + \" \".join(map(str, arr))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total + a[i] > n:\n            return \"NO\"\n        a[i] = min(a[i], 2 * total)\n        total += a[i]\n        \n    return \"YES\\n\" + \" \".join(map(str, a))\n\nif True:\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    print(solve(n, k))",
    "def solve(n, k):\n    if n % (k - 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // (k - 1)\n    \n    # Check if it's possible to distribute the problems as required\n    if min_problems * (k - 1) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    \n    for i in range(k):\n        a[i] = min(i + 1, n - (k - i))\n        \n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve(n, k):\n    if (n - k) % 3 != 0:\n        return \"NO\"\n    \n    x = (n - k) // 3\n    \n    a = [x] * k\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Example usage:\nprint(solve(26, 6))\nprint(solve(8, 3))\nprint(solve(1, 1))\nprint(solve(9, 4))",
    "def solve(n, k):\n    if n % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    \n    for i in range(1, k - 1):\n        a[i] = min(a[i], (n // 2) + 1)\n        \n    a[-1] = n // 2\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\nif True:\n    n, k = map(int, input().split())\n    print(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    x = n // 3\n    a = [x] * (k - 1) + [x + 1]\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Example usage:\nprint(solve(26, 6))  # Output: YES 1 2 4 5 6 8 \nprint(solve(8, 3))   # Output: NO \nprint(solve(1, 1))   # Output: YES 1 \nprint(solve(9, 4))   # Output: NO",
    "def solve(n, k):\n    if n % 2 != 0 or n > k * (k - 1) // 2:\n        return \"NO\"\n    \n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1], 2 * a[i - 1] + 1)\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nimport sys\ninput = sys.stdin.read\n\n# Parse input\ndata = input().strip().split()\nn, k = map(int, data)\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if n is less than k\n    if n < k:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed per day\n    min_problems = n // k\n    \n    # Create the array with the minimum number of problems per day\n    a = [min_problems] * k\n    \n    # Adjust the array to satisfy the conditions\n    for i in range(k - 1):\n        a[i + 1] = max(a[i] + 1, 2 * a[i])\n    \n    # Check if the array satisfies all the conditions\n    if sum(a) == n and all(a[i] > 0 and a[i] < a[i + 1] <= 2 * a[i] for i in range(k - 1)):\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    # Check if it's possible to satisfy the conditions\n    if (n - k) % 3 != 0 or n > 2 * k:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems to solve on the first day\n    min_first_day = (n - k) // 3\n    \n    # Generate the array based on the calculated values\n    a = [min_first_day] * k\n    current_value = min_first_day\n    \n    # Fill the remaining days with the appropriate values\n    for i in range(1, k):\n        current_value += 1\n        a[i] = current_value\n    \n    # Print the result\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem and print the output\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on each day\n    min_problems = [n // (k + 1)] * k\n    \n    # Adjust the minimum problems to satisfy the constraints\n    for i in range(k - 1):\n        min_problems[i] += 1\n    \n    # Check if the solution satisfies all conditions\n    if sum(min_problems) == n and all(min_problems[j] < min_problems[j + 1] <= 2 * min_problems[j] for j in range(k - 1)):\n        return \"YES\\n\" + ' '.join(map(str, min_problems))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % 3 != 0:\n        return \"NO\"\n    \n    a = [0] * k\n    a[0] = (n // 3)\n    for i in range(1, k):\n        a[i] = a[i - 1] + (i + 1) * 2\n    \n    if sum(a) == n and all(a[i] > 0 for i in range(k)) and all(a[i] < a[i + 1] <= 2 * a[i] for i in range(k - 1)):\n        return \"YES\\n\" + ' '.join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nprint(solve(n, k))",
    "def solve(n, k):\n    if n % (k - 1) != 0:\n        return \"NO\"\n    \n    # Calculate the minimum number of problems to solve on the last day\n    min_last_day = n // (k - 1)\n    \n    # Create the array with the minimum number of problems on the last day\n    a = [min_last_day] * (k - 1)\n    \n    # Calculate the remaining problems to solve on the first day\n    remaining_problems = n - min_last_day * (k - 1)\n    \n    # Assign the remaining problems to the first day\n    a.append(remaining_problems)\n    \n    return \"YES\", a\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nk = int(data[1])\n\n# Solve the problem\nresult, a = solve(n, k)\n\n# Print the result\nprint(result)\nif result == \"YES\":\n    print(*a)",
    "def solve(n, k):\n    if n % (k + 1) != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        if total == n:\n            break\n        a[i] = min(a[i - 1] * 2, 2 * a[i - 1] + 1)\n        total += a[i]\n    \n    if total != n:\n        return \"NO\"\n    \n    return \"YES\\n\" + ' '.join(map(str, a))\n\n# Read input\nimport sys\ninput = sys.stdin.read\n\n# Parse input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\n\n# Print the result\nprint(result)",
    "def solve(n, k):\n    # Check if it's possible to satisfy the conditions\n    if (n % 3 != 0 or n % 6 != 0):\n        return \"NO\"\n    \n    # Calculate the minimum number of problems needed on the first day\n    min_first_day = (n // 3) * 2\n    \n    # Calculate the maximum number of problems that can be solved on the last day\n    max_last_day = n - min_first_day\n    \n    # Generate the array based on the calculated values\n    arr = [min_first_day] + [max_last_day] + [2 * x for x in range(1, (n - min_first_day) // 2)]\n    \n    # Print the result\n    print(\"YES\")\n    print(*arr)\n\n# Read input\nn, k = map(int, input().split())\n\n# Solve the problem\nsolve(n, k)",
    "def solve(n, k):\n    if (n - k) % 2 != 0:\n        return \"NO\"\n    \n    a = [1] * k\n    total = 1\n    \n    for i in range(1, k):\n        a[i] = min(a[i-1] + 1, 2 * a[i-1])\n        total += a[i]\n        \n    if total == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\n\n# Parse input\nn, k = map(int, input().split())\n\n# Solve the problem\nresult = solve(n, k)\nprint(result)"
  ],
  "rewards": [
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.043478260869565216,
    0.08695652173913043,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.0,
    0.0,
    0.0,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.08695652173913043,
    0.0,
    0.13043478260869565,
    0.043478260869565216,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.13043478260869565,
    0.043478260869565216,
    0.13043478260869565,
    0.13043478260869565,
    0.08695652173913043,
    0.08695652173913043,
    0.08695652173913043,
    0.13043478260869565,
    0.0,
    0.0,
    0.13043478260869565,
    0.043478260869565216,
    0.17391304347826086,
    0.08695652173913043,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.08695652173913043,
    0.0,
    0.08695652173913043,
    0.17391304347826086,
    0.043478260869565216,
    0.13043478260869565,
    0.13043478260869565,
    0.0,
    0.13043478260869565,
    0.0,
    0.13043478260869565
  ],
  "train rewards": [
    0.6956521739130435,
    0.6956521739130435,
    0.043478260869565216,
    0.0,
    0.5217391304347826,
    0.5652173913043478,
    0.6956521739130435,
    0.5652173913043478,
    0.0,
    0.2608695652173913,
    0.0,
    0.0,
    0.7391304347826086,
    0.6956521739130435,
    0.0,
    0.391304347826087,
    0.0,
    0.6956521739130435,
    0.5217391304347826,
    0.6956521739130435,
    0.6956521739130435,
    0.6086956521739131,
    0.6956521739130435,
    0.4782608695652174,
    0.6521739130434783,
    0.6956521739130435,
    0.30434782608695654,
    0.30434782608695654,
    0.6086956521739131,
    0.782608695652174,
    0.0,
    0.17391304347826086,
    0.6956521739130435,
    0.4782608695652174,
    0.5217391304347826,
    0.391304347826087,
    0.30434782608695654,
    0.7391304347826086,
    0.0,
    0.30434782608695654,
    0.0,
    0.5217391304347826,
    0.9130434782608695,
    0.5652173913043478,
    0.6956521739130435,
    0.6956521739130435,
    0.0,
    0.7391304347826086,
    0.0,
    0.7391304347826086
  ],
  "time": 261.37258553504944,
  "sample times": 50
}