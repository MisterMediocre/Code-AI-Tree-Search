{
  "prompt": "\nQUESTION:\nAbsent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.\n\nTUTORIAL:\nThe answer is always less or equal to 98. We can go through numbers from 1 to 99 and find the first one which we cannot make using cubes.\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def is_valid(x):\n        used = [False] * 10\n        for i in range(6):\n            num = int(''.join(str(cube[i]) for cube in cubes))\n            if num == 0 or used[num]:\n                return False\n            used[num] = True\n        \n        return True\n    \n    for x in range(1, 100):\n        if is_valid(x):\n            return x\n    \n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for i in range(6):\n            if str(num)[i] == '6' and '9' in str(num):\n                return False\n            if str(num)[i] == '9' and '6' in str(num):\n                return False\n        return True\n\n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, n + 1)):\n            return x\n    return 0\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make(x):\n        for num in range(1, x + 1):\n            str_num = str(num)\n            for i in range(len(str_num)):\n                if str_num[i] == '6':\n                    if '9' in str_num[i - 1:i]:\n                        return False\n                elif str_num[i] == '9':\n                    if '6' in str_num[i - 1:i]:\n                        return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            print(x)\n            return\n    \n    print(0)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make(num):\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[j][i] != '9':\n                    return False\n                if cubes[i][j] != '6' and cubes[j][i] == '9':\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(x):\n        used_cubes = [False] * n\n        for i in range(1, x + 1):\n            found = False\n            for j in range(n):\n                if used_cubes[j]:\n                    continue\n                if str(i).startswith(''.join(str(cubes[j][k]) for k in range(6))):\n                    used_cubes[j] = True\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n    \n    for x in range(1, 99):\n        if can_make_number(x):\n            print(x)\n            return\n    print(0)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(num):\n        digits = [str(digit) for digit in num]\n        for i in range(6):\n            if digits[i] == '6' and digits[(i + 1) % 6] == '9':\n                return False\n            if digits[i] == '9' and digits[(i + 1) % 6] == '6':\n                return False\n        return True\n    \n    max_number = 0\n    for i in range(1, 100):\n        if can_make_number(i):\n            max_number = i\n        else:\n            break\n    \n    print(max_number)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(x):\n        used_digits = set()\n        \n        for _ in range(6):\n            for face in range(6):\n                if face == 0 and cubes[_][face] == 6:\n                    return False\n                elif face == 5 and cubes[_][face] == 9:\n                    return False\n                used_digits.add(cubes[_][face])\n                \n        for i in range(1, x + 1):\n            if str(i).count('0') > 0:\n                return False\n            if len(set(str(i)) - used_digits) != len(str(i)):\n                return False\n        \n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, data[i + 1])))\n    \n    def can_make_number(num):\n        used_digits = [False] * 10\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and 9 in used_digits:\n                return False\n            if digit == 9 and 6 in used_digits:\n                return False\n            if used_digits[digit]:\n                return False\n            used_digits[digit] = True\n            num //= 10\n        \n        for digit in used_digits:\n            if not digit:\n                return False\n        \n        return True\n    \n    max_number = 0\n    for i in range(1, 99):\n        if can_make_number(i):\n            max_number = i\n    \n    print(max_number)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in str(x)[i]:\n                if used[int(d)]:\n                    return False\n                used[int(d)] = True\n        return True\n    \n    for x in range(1, 99):\n        if not can_make(x):\n            return x - 1\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = [list(map(int, data[i+1:i+7])) for i in range(n)]\n    \n    def can_make(num):\n        num_str = str(num)\n        for i in range(len(num_str)):\n            if num_str[i] == '6':\n                if num_str[i-1] != '9':\n                    return False\n            elif num_str[i] == '9':\n                if num_str[i-1] != '6':\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if all(can_make(x * i) for i in range(1, 7)):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(x):\n        digits = str(x)\n        used_digits = set()\n        \n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    if cubes[j][i] != 9:\n                        return False\n                elif cubes[j][i] == 9:\n                    if cubes[i][j] != 6:\n                        return False\n        \n        for digit in digits:\n            if digit not in used_digits:\n                used_digits.add(digit)\n            else:\n                return False\n        \n        return True\n    \n    for x in range(1, 99):\n        if can_make(x):\n            return x\n    \n    return 0\n\nif True:\n    n = int(input())\n    result = solve(n)\n    print(result)",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(x):\n        digits = set(str(x))\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[(i+1)%6][(j+1)%6] != '9':\n                    return False\n                elif cubes[i][j] == '9' and cubes[(i+1)%6][(j+1)%6] != '6':\n                    return False\n                if str(cubes[i][j]) not in digits:\n                    return False\n        return True\n    \n    for x in range(1, 100):\n        if can_make(x):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def is_valid(x):\n        digits = [str(i) for i in range(1, x + 1)]\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[j][i] != '6':\n                    return False\n        for d in digits:\n            if not any(d in str(cube[i]) for cube in cubes for i in range(6)):\n                return False\n        return True\n    \n    for x in range(99, -1, -1):\n        if is_valid(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def is_valid(x):\n        used_digits = set()\n        for i in range(6):\n            for j in range(i + 1, 6):\n                if abs(cubes[i][j] - cubes[j][i]) == 6:\n                    return False\n                if cubes[i][j] != 0:\n                    used_digits.add(cubes[i][j])\n                if cubes[j][i] != 0:\n                    used_digits.add(cubes[j][i])\n\n        digits = sorted(used_digits)\n        num = int(''.join(map(str, digits)))\n        return num <= x\n\n    for x in range(99, 0, -1):\n        if is_valid(x):\n            return x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            for j in range(i + 1, 6):\n                if abs(cubes[i][j] - cubes[j][i]) == 6:\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if all(can_make_number(x // (10 ** i)) for i in range(6)):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == num % 10:\n                    break\n            else:\n                return False\n        return True\n\n    for x in range(99, -1, -1):\n        if all(can_make_number(x) for x in range(1, x + 1)):\n            print(x)\n            return\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        digits = str(x)\n        used_cubes = set()\n        \n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == 6:\n                    if cubes[(i + 1) % 6][j] != 9 or cubes[(i - 1) % 6][j] != 6:\n                        return False\n                elif cubes[i][j] == 9:\n                    if cubes[(i + 1) % 6][j] != 6 or cubes[(i - 1) % 6][j] != 9:\n                        return False\n        \n        for digit in digits:\n            if digit not in '0123456789':\n                return False\n            \n            if digit in used_cubes:\n                return False\n            \n            used_cubes.add(digit)\n            \n        return True\n    \n    for x in range(1, 100):\n        if can_make_number(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(num):\n        for _ in range(6):\n            num %= 10\n            if num == 6:\n                return False\n        return True\n    \n    x = 0\n    while True:\n        if can_make(x):\n            break\n        x += 1\n        \n    if x > 98:\n        print(0)\n    else:\n        print(x)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6' and digits[(i+1)%6] != '9':\n                return False\n            if digits[i] == '9' and digits[(i+1)%6] != '6':\n                return False\n        return True\n    \n    max_number = 0\n    for num in range(1, 100):\n        if can_make_number(num):\n            max_number = num\n    \n    print(max_number)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        used_digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit == 6 and '9' in used_digits or digit == 9 and '6' in used_digits:\n                return False\n            if digit in used_digits:\n                return False\n            used_digits.add(digit)\n            num //= 10\n        return True\n    \n    for x in range(1, 100):\n        if not can_make_number(x):\n            break\n    \n    print(x)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def check_number(n):\n        digits = [int(d) for d in str(n)]\n        used_digits = set()\n        \n        for _ in range(6):\n            for _ in range(6):\n                face = data[n * 6 + _]\n                used_digits.add(face)\n                \n        for digit in digits:\n            if digit == 6 and 9 in used_digits:\n                return False\n            elif digit == 9 and 6 in used_digits:\n                return False\n        \n        return True\n    \n    max_x = 0\n    for i in range(1, 99):\n        if check_number(i):\n            max_x = i\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        used_digits = set()\n        \n        for _ in range(6):\n            for i in range(6):\n                if cubes[i][_] == 0 and x % 10 != 0:\n                    return False\n                if cubes[i][_]:\n                    used_digits.add(cubes[i][_])\n        \n        for d in str(x):\n            if d not in used_digits:\n                return False\n        \n        return True\n    \n    for x in range(1, 99 + 1):\n        if not can_make_number(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = []\n    for _ in range(n):\n        cubes.append(data[_+1:_+7])\n    \n    def can_make(num):\n        for cube in cubes:\n            num_str = str(num)\n            for i in range(6):\n                if cube[i] != int(num_str[i]):\n                    return False\n        return True\n    \n    for x in range(99, -1, -1):\n        if can_make(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        digits = str(x)\n        for i in range(6):\n            if digits[i] == '6':\n                return False\n            if digits[i] == '9':\n                return False\n        for i in range(6):\n            if cubes[0][i] != digits[i]:\n                return False\n            if cubes[1][i] != digits[i + 3]:\n                return False\n            if cubes[2][i] != digits[i + 6]:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        if not can_make_number(x):\n            print(x - 1)\n            break\n    else:\n        print(0)\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, data[i+1])))\n    \n    def can_make_number(num):\n        digits = [int(d) for d in str(num)]\n        for i in range(6):\n            if cubes[i][digits[i]] == 0:\n                return False\n        return True\n    \n    max_x = 0\n    for x in range(1, 100):\n        if all(can_make_number(x * i) for i in range(1, 10)):\n            max_x = x\n            break\n    \n    print(max_x)\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == '6' and '9' in cubes[i]:\n                return False\n            elif num[i] == '9' and '6' in cubes[i]:\n                return False\n        return True\n    \n    for x in range(1, 100):\n        found = False\n        for i in range(n):\n            for j in range(6):\n                if cubes[i][j] == str(x)[j]:\n                    found = True\n                    break\n            if not found:\n                break\n        if found:\n            return x\n    return 0\n\nif True:\n    solve()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6':\n                return False\n            if digits[i] == '9':\n                return True\n            if digits[i] not in cubes[0][i]:\n                return False\n        return True\n    \n    x = 1\n    while not can_make(x):\n        x += 1\n    print(x)\n\nif True:\n    solve()",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(x):\n        used_cubes = [set()]\n        for i in range(6):\n            for j in range(10):\n                if cubes[i][j] == 0 and len(used_cubes[-1]) == 0:\n                    return False\n                if cubes[i][j] != 0:\n                    used_cubes.append({cubes[i][j]})\n        \n        for num in range(1, x + 1):\n            found = False\n            for i in range(6):\n                for j in range(10):\n                    if cubes[i][j] == 0 and len(used_cubes[-1]) == 0:\n                        continue\n                    if cubes[i][j] != 0:\n                        if num % cubes[i][j] == 0 and num // cubes[i][j] in used_cubes[-1]:\n                            found = True\n                            break\n                if not found:\n                    break\n            else:\n                return True\n        \n        return False\n    \n    max_x = 0\n    for x in range(1, 100):\n        if not can_make_number(x):\n            max_x = x - 1\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    cubes = [list(map(int, data[i + 1:i + 7])) for i in range(n)]\n    \n    def can_make(x):\n        for i in range(1, x + 1):\n            num_str = str(i)\n            used_digits = set()\n            for face in range(6):\n                for digit in str(cubes[face][face]):\n                    if digit == '6' and '9' in used_digits:\n                        return False\n                    elif digit == '9' and '6' in used_digits:\n                        return False\n                    used_digits.add(digit)\n            if len(used_digits) != 10:\n                return False\n        return True\n    \n    max_x = 0\n    for x in range(1, 100):\n        if can_make(x):\n            max_x = x\n        else:\n            break\n    \n    print(max_x)\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] not in '0123456789':\n                return False\n        return True\n    \n    def get_max_number():\n        for num in range(1, 100):\n            if not can_make_number(num):\n                return num - 1\n        return 0\n    \n    print(get_max_number())\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def check(x):\n        for i in range(1, x + 1):\n            found = False\n            for j in range(data[0]):\n                for k in range(data[1]):\n                    for l in range(data[2]):\n                        for m in range(data[3]):\n                            for n in range(data[4]):\n                                for o in range(data[5]):\n                                    if int(f\"{data[j]}{data[k]}{data[l]}{data[m]}{data[n]}{data[o]}\" == i):\n                                        found = True\n                                        break\n                                if found:\n                                    break\n                            if found:\n                                break\n                        if found:\n                            break\n                    if found:\n                        break\n                if found:\n                    break\n            if not found:\n                return False\n        return True\n    \n    for i in range(1, 100):\n        if check(i):\n            print(i)\n            return\n\nif True:\n    main()",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    \n    for _ in range(6 * n):\n        for i in range(n):\n            for j in range(6):\n                if digits[i][j] == {0}:\n                    digits[i].remove(0)\n                    break\n    \n    def can_make(x):\n        for i in range(n):\n            for j in range(6):\n                if digits[i][j] == {x // (10 ** j)}:\n                    digits[i].remove(x // (10 ** j))\n                    break\n        return all(len(digits[i]) == 1 for i in range(n))\n    \n    for x in range(1, 100):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    def check_number(x):\n        used_cubes = [False] * 10\n        for i in range(6):\n            for j in range(10):\n                if data[i][j] == x % 10:\n                    used_cubes[j] = True\n                    break\n            if not used_cubes[x % 10]:\n                return False\n        return True\n    \n    for x in range(1, 99):\n        if not check_number(x):\n            print(x - 1)\n            return\n    \n    print(0)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        digits = str(num)\n        for i in range(len(digits)):\n            if digits[i] == '6' and '9' in digits:\n                return False\n            if digits[i] == '9' and '6' in digits:\n                return False\n        return True\n    \n    max_number = 0\n    for num in range(1, 100):\n        if can_make_number(num):\n            max_number = num\n            \n    print(max_number)\n\nif True:\n    main()",
    "def solve(n):\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(x):\n        used = set()\n        for i in range(6):\n            for j in range(6):\n                if cubes[i][j] == '6' and cubes[j][i] != '6':\n                    return False\n                elif cubes[i][j] != '6' and cubes[j][i] == '6':\n                    continue\n                if cubes[i][j] in used:\n                    return False\n                used.add(cubes[i][j])\n        \n        for num in range(1, x + 1):\n            s = str(num)\n            for i in range(len(s)):\n                if s[i] not in used:\n                    return False\n            used.clear()\n            \n        return True\n    \n    for x in range(1, 99):\n        if can_make(x):\n            return x\n    \n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [0] * 10\n    for _ in range(n):\n        for i in range(6):\n            digits[int(input().split()[i])] += 1\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in str(x):\n                if int(d) == 6 and used[9]:\n                    return False\n                elif int(d) == 9 and used[6]:\n                    return False\n                if digits[int(d)] > 0:\n                    used[int(d)] = True\n                    digits[int(d)] -= 1\n                else:\n                    return False\n        return True\n    \n    x = 1\n    while not can_make(x):\n        x += 1\n    return x\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def main():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num[i] == 6:\n                return False\n        return True\n    \n    def find_max_number():\n        for x in range(99, 0, -1):\n            found = True\n            for i in range(n):\n                cube = cubes[i]\n                num = ''.join(str(cube[j]) for j in range(6))\n                if not can_make_number(num):\n                    found = False\n                    break\n            if found:\n                return x\n        return 0\n    \n    print(find_max_number())\n\nif True:\n    main()",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_valid(x):\n        for i in range(1, x + 1):\n            digits = str(i)\n            for j in range(6):\n                if digits[j] == '6' and cubes[i - 1][j] != 9:\n                    return False\n                elif digits[j] == '9' and cubes[i - 1][j] != 6:\n                    return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if is_valid(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make(x):\n        for i in range(1, x + 1):\n            num_str = str(i)\n            for j in range(len(num_str)):\n                if num_str[j] == '6':\n                    return False\n                if num_str[j] == '9' and num_str[j - 1] != '6':\n                    return False\n            if num_str[0] == '0':\n                return False\n        return True\n    \n    for x in range(99, 0, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    \n    def can_make(x):\n        digits = [str(i) for i in range(1, 10)]\n        for i in range(len(digits)):\n            for j in range(len(digits)):\n                for k in range(len(digits)):\n                    for l in range(len(digits)):\n                        for m in range(len(digits)):\n                            num = int(''.join([digits[i], digits[j], digits[k], digits[l], digits[m]]))\n                            if num > x:\n                                return False\n        return True\n    \n    x = 1\n    while not can_make(x):\n        x += 1\n    \n    return x if x <= 99 else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    for i in range(n):\n        for j in range(6):\n            digits[i].remove(int(input().split()[j]))\n    \n    def can_make(x):\n        used = set()\n        for i in range(n):\n            num = int(''.join(map(str, sorted(digits[i]))))\n            if num > x:\n                return False\n            used.add(num)\n        return True\n    \n    x = 99\n    while not can_make(x):\n        x -= 1\n    \n    return x if can_make(x) else 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    for i in range(n):\n        for j in range(6):\n            digits[i].discard(int(input().split()[j]))\n    max_number = 0\n    for i in range(1, 100):\n        if all(i % d == 0 for d in digits):\n            max_number = i\n    return max_number\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(6)]\n    for _ in range(n):\n        for i in range(6):\n            digits[i].discard(int(input().split()[i]))\n    \n    def can_make(x):\n        used = [False] * 10\n        for i in range(6):\n            for d in digits[i]:\n                if used[d]:\n                    return False\n                used[d] = True\n        \n        for i in range(1, x + 1):\n            if str(i)[0] == '0':\n                return False\n            if not all(used[int(d)] for d in str(i)):\n                return False\n        \n        return True\n    \n    for x in range(99, -1, -1):\n        if can_make(x):\n            return x\n    return 0\n\nif True:\n    main()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(0, n*6, 6)]\n    \n    def is_valid(num):\n        s = str(num)\n        if s[0] == '0':\n            return False\n        for i in range(len(s)):\n            if s[i] != '0' and s[i] != '6' and s[i] != '9':\n                return False\n        return True\n    \n    def can_make(x):\n        for num in range(1, x+1):\n            if not is_valid(num):\n                return False\n        return True\n    \n    for x in range(1, 99):\n        if can_make(x):\n            print(x)\n            break\n    else:\n        print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make(num):\n        for i in range(6):\n            if num[i] == 6:\n                return False\n        return True\n\n    for x in range(1, 100):\n        made = [False] * 10\n        for i in range(n):\n            for j in range(6):\n                if made[cubes[i][j]]:\n                    break\n            else:\n                made[cubes[i][j]] = True\n\n        if all(made):\n            return x\n\n    return 0\n\nif True:\n    n = int(input())\n    print(solve(n))",
    "def solve():\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        for cube in cubes:\n            num_str = ''.join(map(str, cube))\n            if num_str[0] == '0' or num_str.count('6') != num_str.count('9'):\n                return False\n            num = int(num_str)\n            if num > num:\n                return True\n        return False\n\n    for i in range(1, 99):\n        if not can_make_number(i):\n            print(i)\n            return\n\n    print(0)\n\nif True:\n    solve()",
    "def solve(n):\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n\n    def can_make_number(num):\n        used_digits = set()\n        for i in range(6):\n            if num[i] == 0:\n                continue\n            if num[i] == 6:\n                return False\n            if num[i] == 9:\n                return False\n            if num[i] in used_digits:\n                return False\n            used_digits.add(num[i])\n        return True\n\n    for x in range(1, 100):\n        found = False\n        for i in range(n):\n            for j in range(6):\n                if cubes[i][j] == x % 10:\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            return x - 1\n    return 0\n\nif True:\n    main()",
    "def solve(n):\n    digits = [set(range(10)) for _ in range(n)]\n    \n    for i in range(1, 100):\n        if all(i % d == 0 for d in digits):\n            return i\n    \n    return 0\n\n# Read input\nn = int(input())\ncubes = []\nfor _ in range(n):\n    cubes.append(list(map(int, input().split())))\n\n# Solve problem\nresult = solve(n)\nprint(result)",
    "def solve():\n    n = int(input())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    \n    def can_make(num):\n        digits = str(num)\n        for i in range(6):\n            if digits[i] == '6':\n                if digits[(i+1)%6] != '9' or digits[(i-1)%6] != '6':\n                    return False\n            elif digits[i] != '6' and digits[i] != '9':\n                if digits[(i+1)%6] == '9' or digits[(i-1)%6] == '6':\n                    return False\n        return True\n    \n    for x in range(1, 100):\n        if all(can_make(i) for i in range(1, x+1)):\n            print(x)\n            return\n    print(0)\n\nif True:\n    solve()",
    "def main():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n = data[0]\n    cubes = [data[i:i+6] for i in range(n)]\n    \n    def can_make_number(num):\n        for i in range(6):\n            if num % 10 == cubes[i][i]:\n                return True\n        return False\n    \n    max_x = 0\n    for x in range(1, 99 + 1):\n        found = False\n        for i in range(6):\n            for j in range(6):\n                for k in range(6):\n                    for l in range(6):\n                        for m in range(6):\n                            if can_make_number(x * 10**i + x * 10**j + x * 10**k + x * 10**l + x * 10**m):\n                                found = True\n                                break\n                        if found:\n                            break\n                    if found:\n                        break\n                if found:\n                    break\n            if found:\n                break\n        if not found:\n            max_x = x - 1\n            break\n    \n    print(max_x)\n\nif True:\n    main()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.020833333333333332,
    0.041666666666666664,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.0,
    0.0,
    0.0,
    0.0,
    0.041666666666666664,
    0.041666666666666664,
    0.0625,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.2916666666666667,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.0625,
    0.2708333333333333,
    0.0,
    0.0,
    0.020833333333333332,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.020833333333333332,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.08333333333333333,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2708333333333333,
    0.2708333333333333,
    0.16666666666666666,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "time": 334.5221514701843,
  "sample times": 50
}