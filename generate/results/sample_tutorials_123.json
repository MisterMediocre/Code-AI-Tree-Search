{
  "prompt": "\nQUESTION:\nA few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4 2\n11 0 0 14\n5 4\n\nOutput\nYes\n\nInput\n6 1\n2 3 0 8 9 10\n5\n\nOutput\nNo\n\nInput\n4 1\n8 94 0 4\n89\n\nOutput\nYes\n\nInput\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.\n\nTUTORIAL:\nThe statement laid emphasis on the constraint that the elements are pairwise distinct. How is this important?\n\nIn fact, this implies that if the resulting sequence is increasing, then swapping any two of its elements will result in another sequence which is not increasing.\n\nAnd we're able to perform a swap on any resulting sequence if and only if k \u2265 2. Thus if k \u2265 2, the answer would always be \"Yes\". For cases where k = 1, we replace the only zero in sequence a with the only element in b, and check the whole sequence. Hackable solutions include those only checking the replaced element and its neighbours, and those missing the replaced element.\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if len(set(a)) < k + 1:\n        print(\"No\")\n        return\n    \n    if len(set(b)) < k + 1:\n        print(\"No\")\n        return\n    \n    if len(set(a) & set(b)) > 0:\n        print(\"No\")\n        return\n    \n    if k == 0:\n        print(\"Yes\")\n        return\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 2:\n        if a[0] != b[0] and a[1] != b[1]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 3:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 4:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 5:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 6:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 7:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5] and a[6] != b[6]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 8:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5] and a[6] != b[6] and a[7] != b[7]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 9:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5] and a[6] != b[6] and a[7] != b[7] and a[8] != b[8]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 10:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5] and a[6] != b[6] and a[7] != b[7] and a[8] != b[8] and a[9] != b[9]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 11:\n        if a[0] != b[0] and a[1] != b[1] and a[2] != b[2] and a[3] != b[3] and a[4] != b[4] and a[5] != b[5] and a[6] != b[6] and a[7] != b[7] and a[8] != b[8] and a[9] != b[9] and a[10] != b[10]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k == 12:\n        if a[0] !=",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    if k < 2:\n        return \"Yes\"\n\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != a[i]:\n                    a[i] = b[j]\n                    break\n\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k < 2:\n        if a.count(0) == 1:\n            if all(a[i] != a[j] for i in range(n) for j in range(i+1, n)):\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    \n    for i in range(k):\n        if b[i] == 0:\n            continue\n        for j in range(i+1, k):\n            if b[j] == 0:\n                continue\n            if a[i] > b[j]:\n                return \"Yes\"\n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique numbers in b\n    if len(b) < k:\n        print(\"No\")\n        return\n    \n    # Check if there are enough unique numbers in a\n    if len(set(a)) < k:\n        print(\"No\")\n        return\n    \n    # Try to find a valid replacement\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] not in a[:i] + a[i+1:]:\n                    a[i] = b[j]\n                    found = True\n                    break\n            if not found:\n                print(\"No\")\n                return\n    \n    # If we reach here, the sequence is not increasing\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b to replace all zeros in a\n    if len(set(b)) < len(a):\n        print(\"No\")\n        return\n\n    # Replace zeros in a with elements from b\n    i = j = 0\n    while i < n:\n        if a[i] == 0:\n            a[i] = b[j]\n            j += 1\n        i += 1\n\n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i-1] > a[i]:\n            print(\"No\")\n            return\n\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # If there are fewer than 2 lost elements, it's impossible to recover\n    if k < 2:\n        print(\"No\")\n        return\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Try replacing each zero in a with an element from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in a[:i] + a[i+1:]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is increasing\n    if a == sorted(a):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n\n    if k >= 2:\n        print(\"Yes\")\n        return\n\n    if k == 0:\n        print(\"Yes\")\n        return\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if k >= 2\n    if k < 2:\n        print(\"Yes\")\n        return\n\n    # Find the index of the first zero in a\n    zero_index = a.index(0)\n\n    # Replace the first zero in a with the first element in b\n    a[zero_index] = b[0]\n\n    # Check if the resulting sequence is increasing\n    if a[zero_index + 1] > a[zero_index]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k < 2:\n        return \"Yes\" if all(a[i] <= a[i+1] for i in range(n-1)) else \"No\"\n    \n    for i in range(k):\n        if b[i] == 0:\n            continue\n        for j in range(i+1, k):\n            if b[j] == 0:\n                continue\n            if a[i] > b[j]:\n                return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if there are enough unique elements in b\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Check if the remaining elements in b can form an increasing sequence\n            if all(b[j] > b[j-1] for j in range(1, k)):\n                print(\"Yes\")\n                return\n\n    # If no valid replacement is found\n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n\n    if k < 2:\n        print(\"Yes\")\n        return\n\n    # Check if there's a way to swap elements such that the resulting sequence is not increasing\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] > a[i + j]:\n                    found = True\n                    break\n            if not found:\n                print(\"Yes\")\n                return\n\n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if k >= 2\n    if k < 2:\n        print(\"Yes\")\n        return\n\n    # Check if all elements in b are distinct\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n\n    # Check if there exists a non-decreasing subsequence in a\n    def is_non_decreasing(arr):\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n        return True\n\n    # Find the longest non-decreasing subsequence in a\n    dp = [0] * n\n    max_length = 0\n    prev_index = [-1] * n\n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[j] <= a[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                prev_index[i] = j\n\n    max_length = max(dp)\n    if max_length < k:\n        print(\"No\")\n        return\n\n    # Replace zeros in a with elements from b\n    result = []\n    for i in range(n):\n        if a[i] == 0:\n            result.append(b[prev_index[i]])\n        else:\n            result.append(a[i])\n\n    # Check if the resulting sequence is not increasing\n    if is_non_decreasing(result):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[0].split())\n    a = list(map(int, data[1].split()))\n    b = list(map(int, data[2].split()))\n    \n    # Check if k >= 2\n    if k < 2:\n        print(\"Yes\")\n        return\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in a:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough elements in b to replace all zeros in a\n    if len(b) < sum(a):\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    i = j = 0\n    while i < n:\n        if a[i] == 0:\n            a[i] = b[j]\n            j += 1\n        i += 1\n    \n    # Check if the resulting sequence is increasing\n    increasing = True\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            increasing = False\n            break\n    \n    if increasing:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if there are enough unique elements in b\n    if len(b) < k:\n        print(\"No\")\n        return\n    \n    # Try replacing each zero in a with an element from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element in b that hasn't been used yet\n            min_b = min([x for x in b if x != 0])\n            a[i] = min_b\n            b.remove(min_b)\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(1, n):\n        if a[i-1] > a[i]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[:2]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        if a[0] == b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if len(set(b)) != k or len(set(a + b)) != 201:\n        print(\"No\")\n        return\n    \n    for i in range(k):\n        if a[i] == 0:\n            for j in range(len(b)):\n                if b[j] not in a:\n                    a[i] = b[j]\n                    break\n    \n    if sorted(a) == a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if k < 2:\n        return \"Yes\"\n\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != a[i]:\n                    a[i] = b[j]\n                    break\n\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n    \n    for i in range(n):\n        if a[i] == 0:\n            if len(b) < k:\n                return \"No\"\n            \n            for j in range(len(b)):\n                if b[j] != a[i + j]:\n                    break\n            \n            if j == len(b):\n                return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if k >= 2\n    if k < 2:\n        return \"Yes\"\n\n    # Check if there are enough unique elements in b\n    if len(set(b)) != len(b):\n        return \"No\"\n\n    # Find the smallest element in b that is greater than the largest element in a\n    smallest_b_greater_than_a = float('inf')\n    for i in range(n - k + 1):\n        if a[i] == 0:\n            if smallest_b_greater_than_a > b[i]:\n                smallest_b_greater_than_a = b[i]\n    \n    # If there is no such element, return \"No\"\n    if smallest_b_greater_than_a == float('inf'):\n        return \"No\"\n\n    # Replace all zeros in a with the smallest element found\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = smallest_b_greater_than_a\n    \n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if len(set(a)) != len(set(b)):\n        print(\"No\")\n        return\n    \n    if sum(a) < sum(b):\n        print(\"Yes\")\n        return\n    \n    if k > n - k:\n        print(\"No\")\n        return\n    \n    if all(a[i] <= a[j] for i in range(n-k) for j in range(i+k, n)):\n        print(\"No\")\n        return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    if k < 2:\n        if a.count(0) == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    if len(set(b)) != len(b):\n        return \"No\"\n\n    for i in range(n):\n        if a[i] == 0:\n            if b[i] in a[:i] + a[i+1:]:\n                return \"No\"\n            if i > 0 and a[i-1] == b[i]:\n                return \"No\"\n            if i < n-1 and a[i+1] == b[i]:\n                return \"No\"\n\n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:2+n]))\n    b = list(map(int, data[2+n:2+n+k]))\n    \n    # Check if k >= 2\n    if k < 2:\n        print(\"No\")\n        return\n    \n    # Check if all elements in a and b are unique\n    if len(a) != len(set(a)) or len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] not in a:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is not increasing\n    increasing = True\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            increasing = False\n            break\n    \n    if increasing:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n    \n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n    \n    if count < k:\n        return \"No\"\n    \n    if k > n - count:\n        return \"No\"\n    \n    for i in range(n):\n        if a[i] == 0:\n            if i + 1 < n and a[i + 1] == 0:\n                return \"No\"\n            if i - 1 >= 0 and a[i - 1] == 0:\n                return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    if len(b) < k:\n        print(\"No\")\n        return\n    \n    if len(set(a)) != n or len(set(b)) != k:\n        print(\"No\")\n        return\n    \n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"No\")\n        return\n    \n    if all(b[i] <= b[i+1] for i in range(k-1)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] == 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] > 0 for i in range(n)) and any(b[i] == 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] > 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return\n    \n    if any(a[i] == 0 for i in range(n)) and any(b[i] > 0 for i in range(k)):\n        print(\"No\")\n        return",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n    \n    for i in range(n):\n        if a[i] == 0:\n            if len(b) == 0:\n                return \"No\"\n            b.pop(0)\n    \n    if len(a) > len(b):\n        return \"No\"\n    \n    for i in range(len(a)):\n        if a[i] < b[i]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    # Check if k >= 2\n    if k < 2:\n        return \"Yes\"\n    \n    # Replace zeros with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = b.pop(0)\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # If there's less than 2 zeros in 'a', we can't swap any two zeros to make it non-increasing\n    if sum(a) < 2:\n        print(\"No\")\n        return\n    \n    # Check if all numbers in 'b' are unique\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Find the minimum value in 'b'\n    min_b = min(b)\n    \n    # Replace all zeros in 'a' with the minimum value found in 'b'\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = min_b\n    \n    # Check if the resulting sequence is non-increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k < 2:\n        print(\"Yes\")\n        return\n    \n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] > a[i]:\n                    a[i] = b[j]\n                    break\n    if all(a[i] <= a[i + 1] for i in range(n - 1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[0].split())\n    a = list(map(int, data[1].split()))\n    b = list(map(int, data[2].split()))\n\n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n\n    if k < 2:\n        return \"Yes\" if all(a[i] != b[i] for i in range(n)) else \"No\"\n\n    for i in range(k):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    break\n\n    if all(a[i] > a[i + 1] for i in range(n - 1)):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:k+2]\n    b = data[k+2:]\n    \n    if k < 2:\n        if 0 in a:\n            a.remove(0)\n            if a == sorted(a):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n    else:\n        if all(x in b for x in a):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Check if there are enough unique numbers in b to cover all zeros in a\n    if len(set(b)) < sum(1 for x in a if x == 0):\n        print(\"No\")\n        return\n\n    # Try replacing each zero in a with an element from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                a[i] = b[j]\n                if sorted(a) != a:\n                    break\n            else:\n                continue\n            print(\"Yes\")\n            return\n\n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if k >= 2\n    if k < 2:\n        return \"Yes\"\n    \n    # Replace zeros in a with elements in b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i-1] > a[i]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k < 2:\n        print(\"Yes\")\n        return\n    \n    # Check if there exists a way to replace zeros in a with elements in b such that the resulting sequence is not increasing\n    for i in range(n):\n        if a[i] == 0:\n            found = False\n            for j in range(k):\n                if b[j] > a[i + j]:\n                    found = True\n                    break\n            if not found:\n                print(\"Yes\")\n                return\n            \n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if there are enough unique elements in b to cover all zeros in a\n    if len(set(b)) < k:\n        print(\"No\")\n        return\n\n    # Try replacing each zero in a with an element from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element in b that is not already used\n            for j in range(k):\n                if b[j] not in a[:i]:\n                    a[i] = b[j]\n                    break\n            else:\n                # If no suitable element is found, return \"No\"\n                print(\"No\")\n                return\n\n    # Check if the resulting sequence is increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k >= 2:\n        for i in range(n):\n            if a[i] == 0:\n                if all(b[j] != a[j] for j in range(k)):\n                    print(\"Yes\")\n                    return\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # If there are less than 2 zeros in a, it's impossible to replace them with elements from b\n    if a.count(0) < 2:\n        print(\"No\")\n        return\n    \n    # Check if it's possible to replace all zeros with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            if b[0] != b[1]:\n                print(\"No\")\n                return\n            else:\n                b.pop(0)\n    \n    # If we reach here, it means it's possible to replace all zeros with elements from b\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n    \n    if k < 2:\n        return \"Yes\"\n    \n    for i in range(n):\n        if a[i] == 0:\n            if len(b) == 0:\n                return \"No\"\n            \n            if i > 0 and a[i-1] != 0:\n                if b[0] <= a[i-1]:\n                    return \"No\"\n                \n            if i < n-1 and a[i+1] != 0:\n                if b[-1] >= a[i+1]:\n                    return \"No\"\n            \n            b.pop(0)\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    for i in range(k):\n        if a[i] == 0:\n            for j in range(n):\n                if b[j] != 0:\n                    a[i] = b[j]\n                    break\n    \n    if all(a[i] < a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:2+n]))\n    b = list(map(int, data[2+n:2+n+k]))\n    \n    # Check if k >= 2\n    if k < 2:\n        print(\"No\")\n        return\n    \n    # Check if all elements in b are unique\n    if len(b) != len(set(b)):\n        print(\"No\")\n        return\n    \n    # Check if there is any element in a that is greater than any element in b\n    for i in range(n):\n        if a[i] > max(b):\n            print(\"No\")\n            return\n    \n    # If all conditions are met, print \"Yes\"\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[:2]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        if a[0] != b[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    if k < 2:\n        print(\"No\")\n        return\n    \n    # Check if there exists a non-increasing subsequence of length k-1\n    for i in range(n-k):\n        if all(a[i+j] >= a[i+j+1] for j in range(k-1)):\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if k >= 2\n    if k < 2:\n        print(\"Yes\")\n        return\n    \n    # Check if there are any duplicates in a or b\n    if len(set(a)) > 2 or len(set(b)) > 2:\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = b.pop(0)\n    \n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n    \n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] > a[i]:\n                    return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique numbers in b\n    if len(b) < k:\n        print(\"No\")\n        return\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = b.pop(0)\n    \n    # Check if the resulting sequence is not increasing\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            print(\"Yes\")\n            return\n    \n    print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Check if there are enough unique elements in b\n    if len(set(b)) < k:\n        return \"No\"\n    \n    # Replace zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            # Find the smallest element greater than or equal to the current element in b\n            index = next((j for j, x in enumerate(b) if x >= a[i]), -1)\n            if index != -1:\n                a[i] = b[index]\n                b.pop(index)\n    \n    # Check if the resulting sequence is increasing\n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            return \"No\"\n    \n    return \"Yes\"\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k < 2:\n        if all(a[i] != b[i] for i in range(n)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    # Check if there's a way to replace zeros with elements from b such that the sequence remains non-increasing\n    for i in range(n):\n        if a[i] == 0:\n            # Try replacing with every element in b\n            for j in range(k):\n                a[i] = b[j]\n                if all(a[i] > a[j] for j in range(i)) and all(a[i] > a[k] for k in range(i+1, n)):\n                    break\n            else:\n                # If no valid replacement found, continue to next iteration\n                continue\n            break\n    \n    # Print the result\n    if a[i] >= a[i+1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k == 1:\n        return \"Yes\" if a[0] != b[0] else \"No\"\n    \n    if k >= 2:\n        return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    \n    n, k = data[0], data[1]\n    a = data[2:n+2]\n    b = data[n+2:]\n    \n    if k < 2:\n        if 0 in a:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    # Check if the sequence is already increasing\n    increasing = True\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            increasing = False\n            break\n    \n    if increasing:\n        return \"Yes\"\n    \n    # Try replacing zeros with elements from b\n    for i in range(k):\n        if b[i] == 0:\n            continue\n        \n        new_a = [a[j] for j in range(n)]\n        new_a[a.index(0)] = b[i]\n        \n        # Check if the resulting sequence is increasing\n        increasing = True\n        for i in range(n-1):\n            if new_a[i] > new_a[i+1]:\n                increasing = False\n                break\n        \n        if increasing:\n            return \"Yes\"\n    \n    return \"No\"\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:2+n]))\n    b = list(map(int, data[2+n:2+n+k]))\n    \n    # Check if there are enough unique elements in b\n    if len(set(b)) < len(a):\n        print(\"No\")\n        return\n    \n    # Try replacing zeros in a with elements from b\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(k):\n                if b[j] != a[i]:\n                    a[i] = b[j]\n                    break\n    \n    # Check if the resulting sequence is increasing\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:n+2]))\n    b = list(map(int, data[n+2:]))\n\n    # Check if there are enough unique elements in b\n    if len(b) < k:\n        print(\"No\")\n        return\n\n    # Check if all elements in a are unique\n    if len(set(a)) != n:\n        print(\"No\")\n        return\n\n    # Check if the resulting sequence is not increasing\n    if sorted(a) == a:\n        print(\"No\")\n        return\n\n    print(\"Yes\")\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if k < 2:\n        if all(a[i] <= a[i + 1] for i in range(n - 1)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        return\n    \n    for i in range(n):\n        if a[i] == 0:\n            if all(b[j] != a[i] for j in range(k)):\n                print(\"Yes\")\n                return\n            \n    print(\"No\")\n\nif True:\n    solve()"
  ],
  "rewards": [
    0.0,
    0.0,
    0.0,
    0.8085106382978723,
    0.14893617021276595,
    0.2765957446808511,
    0.851063829787234,
    0.574468085106383,
    0.0,
    0.6808510638297872,
    0.5531914893617021,
    0.6808510638297872,
    0.0,
    0.1276595744680851,
    0.2765957446808511,
    0.14893617021276595,
    0.0,
    0.0,
    0.0,
    0.574468085106383,
    0.0,
    0.14893617021276595,
    0.0,
    0.0,
    0.0,
    0.0,
    0.2127659574468085,
    0.7872340425531915,
    0.0,
    0.2978723404255319,
    1.0,
    0.0,
    0.5531914893617021,
    0.1276595744680851,
    0.851063829787234,
    0.14893617021276595,
    0.0,
    0.5531914893617021,
    0.2553191489361702,
    0.7872340425531915,
    0.5531914893617021,
    0.0,
    0.8723404255319149,
    0.0,
    0.10638297872340426,
    0.0,
    0.0,
    0.19148936170212766,
    0.40425531914893614,
    0.5957446808510638
  ],
  "train rewards": [
    0.0,
    0.0,
    0.0,
    0.6808510638297872,
    0.3191489361702128,
    0.44680851063829785,
    0.723404255319149,
    0.5106382978723404,
    0.0,
    0.6170212765957447,
    0.44680851063829785,
    0.5106382978723404,
    0.0,
    0.3404255319148936,
    0.23404255319148937,
    0.2765957446808511,
    0.0,
    0.0,
    0.0,
    0.48936170212765956,
    0.0,
    0.2765957446808511,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0425531914893617,
    0.5531914893617021,
    0.0,
    0.3404255319148936,
    1.0,
    0.0,
    0.44680851063829785,
    0.1702127659574468,
    0.723404255319149,
    0.2765957446808511,
    0.0,
    0.44680851063829785,
    0.40425531914893614,
    0.6595744680851063,
    0.5106382978723404,
    0.0,
    0.8297872340425532,
    0.0,
    0.1276595744680851,
    0.0,
    0.0,
    0.3191489361702128,
    0.3829787234042553,
    0.6170212765957447
  ],
  "time": 337.4337863922119,
  "sample times": 50
}