{
  "prompt": "\nQUESTION:\nThis morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.\n\nHe decided to accomplish this by closing every $k$-th ($2 \\leq k \\leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \\cdot k$ that satisfy the following condition: $1 \\leq c \\leq n$ and $i$ is an integer (it may be positive, negative or zero).\n\nFor example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.\n\nAfter closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq k < n \\leq 100$) \u2014 the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n\n\n-----Examples-----\nInput\n4 2\n1 1 -1 1\n\nOutput\n2\n\nInput\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.\n\nIn the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.\n\nTUTORIAL:\nThe constraints in this task allowed us to simply iterate over the closed tab and check the answer, but we can solve it more quickly \u2014 calculate the sum for each value modulo k and count the total sum for the whole array. After that, you just need to go through the module tab numbers that we delete, and update the answer.\n\nComplexity \u2014 O(n\u00b2) or O(n + k).\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + arr[i - 1]) % k\n    \n    # Count the total sum modulo k\n    total_sum = sum(arr) % k\n    \n    # Calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs((total_sum - prefix_sums[i]) % k - (prefix_sums[i] - prefix_sums[k - i]) % k)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(n):\n        if tab_types[i] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n            \n    max_diff = 0\n    for i in range(1, n):\n        diff = abs((e_sum + i * k) % k - (s_sum + i * k) % k)\n        max_diff = max(max_diff, diff)\n        \n    print(max_diff)\n\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tabs[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference between the sums\n    max_diff = max(mod_sums)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum for each value modulo k\n    mod_sums = [sum(tabs[i] % k for i in range(j, j + k)) for j in range(0, n, k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for mod_sum in mod_sums:\n        max_diff = max(max_diff, abs(mod_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    e, s = 0, 0\n    mod = [0] * (n + 1)\n    for i in range(1, n + 1):\n        mod[i] = (mod[i - 1] + tabs[i - 1]) % k\n        if mod[i] == 0:\n            e += 1\n        else:\n            s += 1\n    max_diff = 0\n    for i in range(1, n + 1):\n        if mod[i] != 0:\n            diff = abs(e - s)\n            if diff > max_diff:\n                max_diff = diff\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_types[i] % k for i in range(n)) for _ in range(k)]\n    \n    # Initialize the answer\n    max_diff = 0\n    \n    # Iterate through the module tab numbers that we delete\n    for i in range(1, k):\n        # Update the answer\n        max_diff = max(max_diff, abs(mod_sums[(i - 1) % k] - mod_sums[i]))\n    \n    # Print the result\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab % k for tab in tabs)\n    \n    # Initialize variables to keep track of the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate through possible values of b (the number of tabs to close)\n    for b in range(1, n):\n        # Calculate the new sum after closing b tabs\n        new_remainders_sum = remainders_sum - ((tabs[b-1] // k) * k) + (tabs[b-1] % k)\n        \n        # Update the maximum absolute difference\n        max_diff = max(max_diff, abs(new_remainders_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    # Calculate the sum for each value modulo k\n    mod_sum = [sum(arr[i::k]) % k for i in range(k)]\n    \n    # Initialize the answer\n    ans = float('inf')\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(1, k):\n        # Update the answer\n        ans = min(ans, abs(mod_sum[0] - mod_sum[i]))\n        \n        # Remove the current module from the sum\n        mod_sum.pop(0)\n        mod_sum.append((mod_sum[-1] + arr[k * i]) % k)\n    \n    print(ans)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders = [sum(tabs[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = max(abs(remainders[i] - remainders[(i+1)%k]) for i in range(k))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_types = data[2:]\n    e, s = 0, 0\n    for i in range(1, n + 1):\n        if tab_types[i - 1] == 1:\n            e += i % k\n        else:\n            s += i % k\n    max_diff = abs(e - s)\n    return max_diff\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tab_types[i - 1]) % k\n    \n    max_diff = 0\n    for i in range(1, k):\n        # Count tabs with information for the test and social network sites\n        e = prefix_sums[k] - prefix_sums[i]\n        s = prefix_sums[n] - prefix_sums[i - 1]\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab % k for tab in tab_types)\n    \n    max_diff = 0\n    \n    # Iterate over possible deletion points\n    for i in range(1, k):\n        # Calculate the new remainder after deleting i-th element\n        new_remainder = (remainders_sum - tab_types[i - 1] + tab_types[-1]) % k\n        \n        # Update the maximum difference found\n        max_diff = max(max_diff, abs(new_remainder))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_types = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_types[i:] % k) for i in range(n)]\n    \n    # Initialize variables to store the maximum absolute difference\n    max_diff = 0\n    \n    # Iterate over the module tab numbers\n    for i in range(1, k):\n        # Update the maximum difference based on the current module tab number\n        max_diff = max(max_diff, abs(mod_sums[i] - (mod_sums[-i] + mod_sums[0])))\n    \n    # Print the maximum absolute difference\n    print(max_diff)\n\n# Call the solve function to run the solution\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tabs[i:] % k) for i in range(k)]\n    \n    max_diff = 0\n    \n    # Iterate over the module tab numbers that we delete\n    for i in range(k):\n        # Update the sum for the current module\n        mod_sums[i] += tabs[i]\n        \n        # Calculate the difference between the amounts of remaining tabs of different types\n        diff = abs(sum(mod_sums))\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    # Calculate the sum for each value modulo k\n    sums = [sum(tabs[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        max_diff = max(max_diff, abs(sums[(i+1)%k] - sums[i]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum for each value modulo k\n    mod_sums = [sum(tab_info[i::k]) % k for i in range(k)]\n    \n    # Count the total sum for the whole array\n    total_sum = sum(tab_info)\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for mod_sum in mod_sums:\n        diff = abs(total_sum - mod_sum * k)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    mod_sum = [0] * (k + 1)\n    for tab in tabs:\n        mod_sum[tab % k] += 1\n    \n    for i in range(1, k):\n        e += mod_sum[i]\n        s += mod_sum[k - i]\n    \n    max_diff = abs(e - s)\n    for i in range(k + 1):\n        max_diff = max(max_diff, abs(mod_sum[i] - mod_sum[k - i]))\n    \n    print(max_diff)\n\nsolve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[i]\n        s = sum(num for num in arr if num % k != i)\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum for each value modulo k\n    mod_sums = [sum(tab_info[i] % k for i in range(n)) % k for _ in range(k)]\n    \n    max_diff = 0\n    # Go through the module tab numbers that we delete\n    for i in range(1, k):\n        # Update the answer\n        max_diff = max(max_diff, abs(mod_sums[i] - mod_sums[k-i]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum of remainders when divided by k for each tab\n    remainders = [tab % k for tab in tab_info]\n    \n    # Count the total sum of remainders\n    total_sum = sum(remainders)\n    \n    # Find the maximum absolute difference between the sums\n    max_diff = 0\n    for remainder in remainders:\n        diff = abs(total_sum - remainder * n)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for i in range(n):\n        mod_sum[arr[i] % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        e = mod_sum[(i + 1) % k]\n        s = mod_sum[i]\n        max_diff = max(max_diff, abs(e - s))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * (k + 1)\n    for num in arr:\n        mod_sum[(num + k) % k] += 1\n    \n    ans = 0\n    for i in range(1, k):\n        ans = max(ans, abs(mod_sum[i] - mod_sum[k - i]))\n    \n    print(ans)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(1, n+1):\n        if tabs[i-1] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n    \n    max_diff = 0\n    \n    for i in range(1, n+1):\n        if tabs[i-1] == 1:\n            e_sum -= i % k\n        else:\n            s_sum -= i % k\n        \n        diff = abs(e_sum - s_sum)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e_sum = s_sum = 0\n    for i in range(n):\n        e_sum += tabs[i] % k\n        s_sum += (-tabs[i]) % k\n    \n    max_diff = abs(e_sum - s_sum)\n    \n    for i in range(1, n):\n        e_sum -= tabs[i-1] % k\n        s_sum += tabs[i] % k\n        max_diff = max(max_diff, abs(e_sum - s_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(n):\n        if tab_info[i] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n    \n    max_diff = 0\n    \n    for i in range(1, n // k + 1):\n        new_e_sum = e_sum - i * k\n        new_s_sum = s_sum - i * k\n        \n        diff = abs(new_e_sum - new_s_sum)\n        \n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * (k + 1)\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(1, k):\n        diff = abs(mod_sum[i] - mod_sum[k - i])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    mod_sum = [0] * k\n    for i in range(n):\n        mod_sum[arr[i] % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        max_diff = max(max_diff, abs(mod_sum[(i + 1) % k] - mod_sum[i]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(n):\n        if tabs[i] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n            \n    max_diff = abs(e_sum - s_sum)\n    \n    return max_diff\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of each value modulo k\n    mod_sums = [sum(tab_info[i] % k for i in range(j, j + n)) for j in range(1, n)]\n    \n    # Find the maximum absolute difference between the sums\n    max_diff = max(abs(s - t) for s, t in zip(mod_sums[1:], mod_sums))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for i in range(n):\n        mod_sum[(arr[i] + i) % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        max_diff = max(max_diff, abs(mod_sum[i] - mod_sum[(n - i) % k]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tabs = data[2:]\n    e, s = 0, 0\n    for tab in tabs:\n        if tab == 1:\n            e += 1\n        else:\n            s += 1\n    mod_k = [sum(tabs[i:i+k]) % k for i in range(0, len(tabs), k)]\n    max_diff = 0\n    for diff in mod_k:\n        max_diff = max(max_diff, abs(e - s - diff))\n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for i in range(n):\n        if tab_info[i] == 1:\n            e_sum += i % k\n        else:\n            s_sum += i % k\n    \n    max_diff = 0\n    for i in range(1, n):\n        if tab_info[i] == 1:\n            e_sum -= i % k\n        else:\n            s_sum -= i % k\n        \n        max_diff = max(max_diff, abs(e_sum - s_sum))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate prefix sums for each mod k value\n    prefix_sums = [0] * (k + 1)\n    for i in range(1, n + 1):\n        prefix_sums[(tab_info[i - 1] + i) % k] += 1\n    \n    # Calculate the total sum for each mod k value\n    total_sums = [0] * (k + 1)\n    for i in range(k + 1):\n        total_sums[i] = prefix_sums[i] * (i + 1) // 2\n    \n    max_diff = 0\n    # Iterate through each possible tab to be deleted\n    for b in range(1, n + 1):\n        # Calculate the sum of tabs to be deleted\n        delete_sum = 0\n        for i in range(1, n + 1):\n            if (tab_info[i - 1] + i) % k == b:\n                delete_sum += 1\n        \n        # Calculate the new total sums after deleting the tab\n        new_total_sums = [total_sums[i] - delete_sum for i in range(k + 1)]\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, abs(new_total_sums[1] - new_total_sums[0]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k for each tab\n    remainders_sum = [sum(tab_info[i] % k for i in range(n)) % k for _ in range(k)]\n    \n    # Find the maximum absolute difference between remainders sums\n    max_diff = max(abs(remainders_sum[i] - remainders_sum[(i + 1) % k]) for i in range(k))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum of remainders when divided by k\n    remainders_sum = sum(tab % k for tab in tab_info)\n    \n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate over possible starting points for deleting tabs\n    for start in range(1, n):\n        # Calculate the sum of remainders for the deleted tabs\n        deleted_remainders_sum = sum((tab - start) % k for tab in tab_info[start:])\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, abs(remainders_sum - deleted_remainders_sum))\n    \n    print(max_diff)\n\n# Call the solve function\nsolve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tab_info[i - 1]) % k\n    \n    # Calculate total sum modulo k\n    total_sum_mod_k = sum(prefix_sums) % k\n    \n    # Calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(1, n + 1):\n        diff = abs((total_sum_mod_k - prefix_sums[i]) % k)\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e_sum = s_sum = 0\n    \n    for tab in tabs:\n        e_sum += tab % k\n        s_sum -= tab % k\n    \n    max_diff = 0\n    \n    for i in range(1, k):\n        new_e_sum = e_sum - (tabs[i - 1] % k)\n        new_s_sum = s_sum - (tabs[i - 1] % k)\n        \n        diff = abs(new_e_sum - new_s_sum)\n        if diff > max_diff:\n            max_diff = diff\n            \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for tab in tabs:\n        if tab == 1:\n            e_sum += tab\n        else:\n            s_sum += tab\n    \n    max_diff = 0\n    \n    for i in range(1, k):\n        if (e_sum - s_sum) % k == 0:\n            max_diff = max(max_diff, abs((e_sum - s_sum) // k))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    mod_sum = [0] * (k + 1)\n    for num in arr:\n        mod_sum[num % k] += 1\n    \n    max_diff = 0\n    for i in range(1, k):\n        max_diff = max(max_diff, abs(mod_sum[i] - mod_sum[k-i]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    mod = [sum(arr[i::k]) % k for i in range(k)]\n    max_diff = 0\n    for m in mod:\n        max_diff = max(max_diff, abs(sum(arr[m:]) - sum(arr[:m])))\n    print(max_diff)\n\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    tab_info = list(map(int, input().split()))\n    \n    # Calculate the sum for each value modulo k\n    mod_sums = [sum(tab_info[i] % k for i in range(j * k, (j + 1) * k)) for j in range(1, n // k + 1)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        max_diff = max(max_diff, abs(mod_sums[i] - (n // k - i) * mod_sums[k]))\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * (n + 1)\n    for num in arr:\n        mod_sum[num % k] += num\n    \n    max_diff = 0\n    for i in range(1, n):\n        diff = abs(mod_sum[i] - mod_sum[(n - i) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nsolve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    # Calculate the sum of each value modulo k\n    mod_sum = [sum(arr[i::k]) % k for i in range(k)]\n    \n    # Initialize the answer\n    ans = 0\n    \n    # Iterate through the module tab numbers that we delete\n    for i in range(1, k):\n        # Update the answer\n        ans = max(ans, abs(mod_sum[i] - mod_sum[(i+k)%k]))\n    \n    print(ans)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate the sum modulo k for each tab\n    mod_sums = [sum(tabs[i:] % k) for i in range(n)]\n    \n    # Find the maximum absolute difference between e and s\n    max_diff = 0\n    for i in range(1, n):\n        diff = abs(mod_sums[i] - mod_sums[0])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    import sys\n    input = sys.stdin.read\n    data = list(map(int, input().split()))\n    n, k = data[0], data[1]\n    tab_info = data[2:]\n    \n    # Calculate the sum of each value modulo k\n    mod_sum = [sum(tab_info[i::k]) % k for i in range(k)]\n    \n    # Find the maximum absolute difference\n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - (mod_sum[(i + 1) % k] + mod_sum[(i + 2) % k]))\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    # Calculate prefix sums modulo k\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = (prefix_sums[i - 1] + tabs[i - 1]) % k\n    \n    # Find the maximum difference\n    max_diff = 0\n    for i in range(k):\n        diff = prefix_sums[n] - prefix_sums[k - i]\n        if abs(diff) > max_diff:\n            max_diff = abs(diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e_sum = 0\n    s_sum = 0\n    \n    for tab in tabs:\n        e_sum += tab % k\n        s_sum -= tab % k\n    \n    max_diff = abs(e_sum - s_sum)\n    \n    for i in range(1, k):\n        max_diff = max(max_diff, abs((e_sum + i * k) % k - (s_sum - i * k) % k))\n    \n    print(max_diff)\n\nsolve()",
    "def solve():\n    n, k = map(int, input().split())\n    tabs = list(map(int, input().split()))\n    \n    e, s = 0, 0\n    mod_sum = [0] * k\n    \n    for tab in tabs:\n        if tab == 1:\n            e += 1\n        else:\n            s += 1\n        \n        mod_sum[tab % k] += 1\n    \n    max_diff = 0\n    for i in range(k):\n        diff = abs(mod_sum[i] - mod_sum[(k - i) % k])\n        max_diff = max(max_diff, diff)\n    \n    print(max_diff)\n\nif True:\n    solve()",
    "def solve():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    mod_sum = [0] * k\n    for i in range(n):\n        mod_sum[i % k] += arr[i]\n    \n    max_diff = 0\n    for i in range(k):\n        total_sum = 0\n        for j in range(n):\n            if j % k == i:\n                total_sum += mod_sum[j % k]\n        max_diff = max(max_diff, abs(total_sum))\n    \n    print(max_diff)\n\nsolve()"
  ],
  "rewards": [
    0.023255813953488372,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.06976744186046512,
    0.11627906976744186,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.046511627906976744,
    0.046511627906976744,
    0.0,
    0.046511627906976744,
    0.023255813953488372,
    0.0,
    0.023255813953488372,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.09302325581395349,
    0.0,
    0.0,
    0.06976744186046512,
    0.0,
    0.0,
    0.046511627906976744,
    0.0,
    0.0,
    0.0,
    0.11627906976744186,
    0.0,
    0.023255813953488372,
    0.0,
    0.0,
    0.023255813953488372,
    0.023255813953488372,
    0.0,
    0.0,
    0.13953488372093023
  ],
  "train rewards": [
    0.023809523809523808,
    0.07142857142857142,
    0.023809523809523808,
    0.07142857142857142,
    0.023809523809523808,
    0.0,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.0,
    0.0,
    0.09523809523809523,
    0.0,
    0.0,
    0.023809523809523808,
    0.16666666666666666,
    0.0,
    0.16666666666666666,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.0,
    0.19047619047619047,
    0.023809523809523808,
    0.0,
    0.09523809523809523,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.07142857142857142,
    0.19047619047619047,
    0.0,
    0.023809523809523808,
    0.0,
    0.0,
    0.047619047619047616,
    0.0,
    0.09523809523809523,
    0.0,
    0.23809523809523808,
    0.0,
    0.19047619047619047,
    0.0,
    0.0,
    0.023809523809523808,
    0.023809523809523808,
    0.0,
    0.0,
    0.09523809523809523
  ],
  "time": 309.54786252975464,
  "sample times": 50
}