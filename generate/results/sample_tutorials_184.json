{
  "prompt": "\nQUESTION:\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n\n-----Examples-----\nInput\n1 4 2\n\nOutput\n6\n\nInput\n5 5 5\n\nOutput\n14\n\nInput\n0 2 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.\n\nTUTORIAL:\nHint: Dynamic programming problem. To handle repetitions we have to construct the number from right to the left and calculate the answer when we reach a number equivalent to 0 modulo k.\n\nSolution: Let's define count(i, j) as a recursive function that calculates the number of numbers consisting of n digits satisfying the conditions of the problem and with a specific suffix of length i, S\u1d62 such that S\u1d62 \u2261 j (mod k).\n\nWe want to avoid repetition so by constructing the number from the right to the left when we reach a state with j = 0 with suffix \u2260 0 we return the answer immediately so any other suffix that contains this suffix won\u2019t be calculated.\n\nSo the base cases are count(n, 0) = 1, count(i, 0) = 9 * 10\u207f\u207b\u2071\u207b\u00b9 : i < n.\n\nSo state transitions will be  \ncount(i, j) = \u2211\u208d\u2093\u208c\u2080 \u209c\u2092 \u2089\u208e count(i + 1, (j + (x * 10\u2071)) % k)  \n(We add a digit to the left).\n\nAnd we can handle j = 0 case coming from a zero suffix easily with a boolean variable we set to true when we use a digit \u2260 0 in constructing the number.\n\nTime complexity: O(n * k)\n\n\nInstructions:\n\n\nYou are a Python3 code generator.  Output **only** valid Python code. No explanations, no commentary, no filenames, no Markdown formatting. You will spit out a code block that can be pasted into any script. It must read the input, execute the logic and then print the output. Ensure that you invoke the main() or solve() function at the end if you're writing your code inside them.\nANSWER:\n",
  "codes": [
    "def solve(l, r, a):\n    def count(n, j):\n        if j == 0 and n > 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 0\n        for x in range(10):\n            if j + x * 10**n % k == 0:\n                res += count(n - 1, (j + x * 10**n) % k)\n        return res\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left_half = total // 2\n    max_left = min(left_half, l)\n    \n    max_team = 0\n    for left in range(max_left + 1):\n        right = left_half - left\n        if right <= r:\n            max_team = max(max_team, left + right + a)\n    \n    return max_team\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a)]\n    \n    # Base cases\n    for i in range(l + r + a):\n        dp[i][0] = 1\n    \n    # Fill the DP table\n    for i in range(l + r + a - 1, -1, -1):\n        for j in range(10):\n            if j == 0:\n                continue\n            for x in range(10):\n                if i + 1 > l + r + a or dp[i + 1][(j + (x * 10)) % MOD] == 0:\n                    continue\n                dp[i][j] = (dp[i][j] + dp[i + 1][(j + (x * 10)) % MOD]) % MOD\n    \n    # Calculate the result\n    total = 0\n    for j in range(10):\n        if j == 0:\n            continue\n        total = (total + dp[0][j]) % MOD\n    \n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return j == 0\n        if j == 0 and n > 1:\n            return 0\n        ans = 0\n        for x in range(10):\n            if j + x * 10**(n-1) % k == 0:\n                ans += count(n-1, (j + x * 10**(n-1)) % k)\n        return ans\n    \n    max_size = 0\n    for i in range(1, l+1):\n        for j in range(1, r+1):\n            for k in range(1, a+1):\n                total = count(i+j+k, 0)\n                if total % 2 == 0:\n                    max_size = max(max_size, total)\n    \n    return max_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    def count(i, j):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * (10 ** (n - i - 1))\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(i - 1, (j + (x * 10 ** i)) % k)\n        return ans\n    \n    n = l + r + a\n    k = 2\n    ans = 0\n    for i in range(n // 2):\n        ans += count(i, 0)\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    def count(n, j):\n        if j == 0:\n            return 1 if n == 0 else 0\n        if n == 0:\n            return 9 ** (n - 1)\n        \n        res = 0\n        for x in range(10):\n            if x != 0 and j > 0:\n                res = (res + count(n - 1, (j + (x * 10)) % MOD)) % MOD\n        return res\n    \n    total = l + r + a\n    left_count = (total // 2) * l\n    right_count = (total // 2) * r\n    ambidexter_count = (total // 2) * a\n    \n    max_team_size = 0\n    for i in range(left_count, min(right_count, ambidexter_count) + 1):\n        for j in range(min(right_count, ambidexter_count) + 1):\n            if i + j == total // 2 and i <= j:\n                max_team_size = max(max_team_size, count(i, j))\n    \n    return max_team_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "```python\ndef solve(l, r, a):\n    def count(i, j):\n        if i == 0:\n            return j == 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        res = 0\n        for x in range(10):\n            if x != 0:\n                res += count(i - 1, (j + x * 10**i) % k)\n        return res\n    \n    n = l + r + a\n    k = 10\n    ans = 0\n    used = False\n    for i in range(n):\n        for j in range(k):\n            if i == 0 and j == 0:\n                continue\n            if j == 0 and not used:\n                used = True\n                continue\n            if j == 0 and used:\n                break\n            if i > 0 and j == 0:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j == 0 and not used:\n                continue\n            if i > 0 and j == 0 and used:\n                break\n            if i > 0 and j ==",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        if j == 0 and not used_zero:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if x != 0 or not used_zero:\n                new_j = (j + x * 10**(n-1)) % k\n                ans += count(n-1, new_j)\n        used_zero = True\n        return ans\n    \n    k = 2\n    total = 0\n    while True:\n        if count(l, 0) + count(r, 0) + count(a, 0) >= total:\n            break\n        total += count(l, 0) + count(r, 0) + count(a, 0)\n        k *= 2\n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * (MOD + 1) for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(MOD + 1):\n            if j == 0:\n                dp[i][j] += dp[i - 1][(j + 1) % MOD]\n            else:\n                dp[i][j] += dp[i - 1][(j + 1) % MOD] * 9\n            dp[i][j] %= MOD\n    \n    ans = 0\n    for i in range(1, l + r + a + 1):\n        for j in range(MOD + 1):\n            if j == 0:\n                ans = max(ans, i)\n    \n    return ans\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print the result\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j, used):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * 10**(n-i-1)\n        if j == 0:\n            if not used:\n                return count(i-1, 0, True)\n            else:\n                return 0\n        res = 0\n        for x in range(10):\n            if not used and x != 0:\n                res += count(i-1, (j + (x * 10**(n-i-1))) % k, True)\n            else:\n                res += count(i-1, (j + (x * 10**(n-i-1))) % k, False)\n        return res\n    \n    n = l + r + a\n    k = 2\n    used = False\n    ans = count(n, 0, used)\n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    def count(n, j):\n        if n == 0:\n            return j == 0\n        if j == 0:\n            return 9 * pow(10, n - 1, MOD)\n        \n        ans = 0\n        for x in range(10):\n            if x != 0:\n                ans += count(n - 1, (j + (x * pow(10, n - 1, MOD))) % MOD)\n        return ans\n    \n    total = 0\n    if l > 0:\n        total += count(l, 1)\n    if r > 0:\n        total += count(r, 0)\n    if a > 0:\n        total += count(a, 1)\n    \n    return total % MOD\n\n# Main function to handle input and output\ndef main():\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))\n\nif True:\n    main()",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * (MOD + 1) for _ in range(l + r + a + 1)]\n    dp[l][0] = 1\n    \n    for i in range(l + r + a + 1):\n        for j in range(MOD + 1):\n            if j == 0 and i > 0:\n                continue\n            for x in range(10):\n                new_j = (j + x * 10**(i - 1)) % MOD\n                if new_j == 0 and i > 0:\n                    continue\n                dp[i][new_j] = (dp[i][new_j] + dp[i - 1][j]) % MOD\n    \n    ans = 0\n    for i in range(l + r + a + 1):\n        if dp[i][0] != 0:\n            ans = max(ans, i)\n    \n    return ans * 2\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    def dp(i, j):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * pow(10, i - 1, MOD)\n        \n        res = 0\n        for x in range(10):\n            if x != 0 and (i > 1 or j != 0):\n                res += dp(i - 1, (j + x * pow(10, i - 1, MOD)) % MOD)\n            elif x == 0:\n                res += dp(i - 1, j)\n        return res % MOD\n    \n    total = dp(l + r + a, 0)\n    \n    # Adjusting for the condition that there must be an equal number of players using their left and right hands\n    total -= min(total, l // 2)\n    total -= min(total, r // 2)\n    total -= min(total, a // 2)\n    \n    return max(total, 0)\n\n# Main function to handle input and output\ndef main():\n    input_data = list(map(int, input().split()))\n    result = solve(*input_data)\n    print(result)\n\nif True:\n    main()",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    def count(n, j):\n        if n == 0 and j == 0:\n            return 1\n        if n == 0 and j != 0:\n            return 0\n        \n        ans = 0\n        for x in range(10):\n            new_j = (j + x * (10**(n-1))) % MOD\n            ans = (ans + count(n - 1, new_j)) % MOD\n            \n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    left = min(l, r)\n    right = max(l, r)\n    \n    left_count = count(left, 0)\n    right_count = count(right, 0)\n    \n    if left_count > right_count:\n        left_count, right_count = right_count, left_count\n    \n    total_count = left_count + right_count\n    \n    if left_count == right_count:\n        return total_count\n    \n    return total_count // 2 + (left_count % 2 == 1)\n\n# Main function\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(10)]\n    dp[0][0] = 1\n    \n    for i in range(1, 10):\n        for j in range(10):\n            dp[i][j] = dp[i-1][(j+1)%10] + dp[i-1][(j+2)%10]\n            dp[i][j] %= MOD\n            \n    ans = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if i == 0 and j == 0:\n                continue\n            if i > 0 and j == 0:\n                continue\n            if i == 0 and j != 0:\n                continue\n            if i > 0 and j != 0:\n                continue\n            if i > 0 and j > 0:\n                continue\n                \n            if i == 0 and j == 0:\n                ans += dp[i][j] * (l + r + a)\n            elif i == 0 and j != 0:\n                ans += dp[i][j] * l\n            elif i != 0 and j == 0:\n                ans += dp[i][j] * r\n            else:\n                ans += dp[i][j] * a\n                \n            ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0 and j == 0:\n            return 1\n        if n == 0:\n            return 9 * 10**(n-1)\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(n - 1, (j + (x * 10**(n-1))) % k)\n        return ans\n    \n    k = 2\n    while True:\n        if count(l + r + a, 0) >= 2 * (l + r):\n            break\n        k += 1\n    \n    return 2 * (l + r)\n\n# Read input\ninput_data = list(map(int, input().split()))\n\n# Solve the problem\nresult = solve(*input_data)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    def count(n, j):\n        if j == 0 and n != 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 0\n        for x in range(10):\n            res += count(n - 1, (j + (x * 10**(n-1))) % MOD)\n            res %= MOD\n        return res\n    \n    total = (l + r + a) // 2\n    if total % 2 != 0:\n        return 0\n    \n    left = total // 2\n    right = total // 2\n    \n    left_count = count(left, 0)\n    right_count = count(right, 0)\n    \n    if left_count > right_count:\n        left_count, right_count = right_count, left_count\n    \n    return left_count * 2 + right_count * 2\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(10)]\n    dp[0][0] = 1\n    \n    for i in range(1, 10):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += dp[i-1][(j+1)%MOD]\n    \n    total = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if j == 0:\n                total += dp[i][j]\n            else:\n                total += dp[i][(j+1)%MOD]\n    \n    total *= 2\n    total %= MOD\n    \n    if l > r:\n        total -= l - r\n    elif r > l:\n        total -= r - l\n    \n    total += a * 2\n    total %= MOD\n    \n    if total < 0:\n        total += MOD\n    \n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j, used):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if not used[x]:\n                new_j = (j + x * 10**(n-1)) % k\n                if new_j == 0 and not used[0] and x != 0:\n                    continue\n                ans += count(n-1, new_j, used | {x})\n        return ans\n    \n    k = 10\n    total = l + r + a\n    max_size = 0\n    for i in range(total//2):\n        for j in range(k):\n            if count(i+1, j, {0}) > max_size:\n                max_size = count(i+1, j, {0})\n    print(max_size)\n\n# Main function\nif True:\n    l, r, a = map(int, input().split())\n    solve(l, r, a)",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    \n    # Base cases\n    for i in range(l + r + a + 1):\n        dp[i][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            for x in range(10):\n                new_j = (j + x * 10**(i - 1)) % MOD\n                if new_j != 0:\n                    dp[i][new_j] = (dp[i][new_j] + dp[i - 1][j]) % MOD\n    \n    ans = 0\n    for j in range(10):\n        if dp[l + r + a][j] > 0:\n            ans = (ans + dp[l + r + a][j]) % MOD\n    \n    return ans\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    \n    @cache\n    def dp(i, j, used_left):\n        if i == 0:\n            return int(j == 0)\n        \n        ans = 0\n        for x in range(10):\n            new_j = (j + (x * 10**(i - 1))) % MOD\n            if new_j == 0 and not used_left:\n                continue\n            if used_left:\n                ans += dp(i - 1, new_j, False)\n            else:\n                ans += dp(i - 1, new_j, True)\n        \n        return ans\n    \n    total_players = l + r + a\n    if total_players % 2 != 0:\n        return 0\n    \n    half_players = total_players // 2\n    left_handers = min(half_players, l)\n    right_handers = min(half_players, r)\n    \n    # Calculate the maximum number of players using both left and right hands\n    max_team_size = dp(left_handers, right_handers, True)\n    \n    return max_team_size\n\n# Example usage:\nl, r, a = map(int, input().split())\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(n, j):\n        if j == 0 and n > 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 0\n        for x in range(10):\n            if x != 0:\n                res += count(n - 1, (j + x * 10**(n - 1)) % MOD)\n        return res % MOD\n    \n    left_count = count(l, r)\n    right_count = count(r, l)\n    \n    total_count = left_count + right_count + a\n    if total_count % 2 == 0:\n        return total_count // 2\n    else:\n        return 0\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(i, j):\n        if j == 0 and i > 0:\n            return 0\n        if i == 0:\n            return int(j == 0)\n        res = 0\n        for x in range(10):\n            res += count(i - 1, (j + (x * 10**i)) % MOD)\n        return res % MOD\n    \n    max_size = 0\n    for i in range(l + r + a + 1):\n        if i % 2 == 0 and count(i // 2, 0) == count((l + r + a) // 2, 0):\n            max_size = max(max_size, i)\n    return max_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * 10**(n-i-1)\n        ans = 0\n        for x in range(10):\n            if j != 0 and x == 0:\n                continue\n            ans += count(i - 1, (j + x * 10**i) % k)\n        return ans\n    \n    n = l + r + a\n    k = 10\n    dp = [[0] * k for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k):\n            for x in range(10):\n                if j != 0 and x == 0:\n                    continue\n                if i >= 2 and j == 0 and dp[i-2][0] > 0:\n                    dp[i][j] += dp[i-2][0]\n                dp[i][j] %= 10**k\n    return dp[n][0]\n\n# Example usage\nprint(solve(1, 4, 2))  # Output: 6\nprint(solve(5, 5, 5))  # Output: 14\nprint(solve(0, 2, 0))  # Output: 0",
    "def solve(l, r, a):\n    MOD = 1000000007\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            if j != 0:\n                ans += count(n - 1, (j + x * pow(10, n - 1, MOD)) % MOD)\n            else:\n                ans += count(n - 1, 0)\n        return ans % MOD\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    half = total // 2\n    \n    # Calculate the number of ways to choose half players from each group\n    left_half = count(half, 0)\n    right_half = count(half, 0)\n    \n    # Calculate the number of ways to choose half players from ambidexters\n    ambidexter_half = count(half, 0)\n    \n    # Total number of ways to form the team\n    result = (left_half * right_half * ambidexter_half) % MOD\n    return result\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    \n    def count(n, j):\n        if n == 0 and j == 0:\n            return 1\n        if n == 0:\n            return 0\n        \n        res = 0\n        for x in range(10):\n            if x == 0 and j == 0:\n                continue\n            res = (res + count(n - 1, (j + x * 10 ** n) % MOD)) % MOD\n        \n        return res\n    \n    left = (l + a) // 2\n    right = (r + a) // 2\n    \n    if left > right:\n        left, right = right, left\n    \n    return (left + right) * 2 % MOD\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a):\n        for j in range(10):\n            if j == 0 and i > 0:\n                continue\n            if j == 0:\n                dp[i][j] = (dp[i - 1][j] * 9) % MOD\n            else:\n                dp[i][j] = ((dp[i - 1][j] * 9) + dp[i - 1][(j - 1) % 10]) % MOD\n                \n    max_size = 0\n    for i in range(l + r + a):\n        for j in range(10):\n            if j == 0 and i > 0:\n                continue\n            if j == 0:\n                max_size = max(max_size, dp[i][j])\n            else:\n                max_size = max(max_size, dp[i][j] + dp[i - 1][(j - 1) % 10])\n    \n    return max_size % MOD\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        if j == 0:\n            return 9 * count(n - 1, 0)\n        res = 0\n        for x in range(10):\n            if j + x * (10**(n-1)) % MOD == 0:\n                res += count(n - 1, (j + x * (10**(n-1))) // MOD)\n        return res % MOD\n    \n    total = count(l + r + a, 0)\n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(n, j):\n        if j == 0 and n > 0:\n            return 0\n        if n == 0:\n            return 1\n        res = 0\n        for x in range(10):\n            res = (res + count(n - 1, (j + (x * 10**(n - 1))) % MOD)) % MOD\n        return res\n    \n    left = l + a\n    right = r + a\n    total = (left + right) // 2\n    if total % 2 != 0:\n        return 0\n    return count(total // 2, 0)\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    \n    # Initialize dp array\n    dp = [[0] * 10 for _ in range(l + r + a)]\n    \n    # Base case: one digit with value 0\n    dp[1][0] = 1\n    \n    # Fill the dp table\n    for i in range(2, l + r + a + 1):\n        for j in range(10):\n            if j == 0 and not used_zero:\n                continue\n            if j != 0:\n                used_zero = True\n            for x in range(10):\n                new_j = (j + (x * 10**(i - 1))) % MOD\n                dp[i][new_j] += dp[i - 1][j]\n                dp[i][new_j] %= MOD\n    \n    # Sum up all possible values of j\n    total = sum(dp[l + r + a])\n    total %= MOD\n    \n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(i, j):\n        if i == 0:\n            return j == 0\n        res = 0\n        for x in range(10):\n            if j + (x * 10**i) % MOD == 0:\n                res += count(i - 1, (j + (x * 10**i)) % MOD)\n        return res % MOD\n    \n    left = min(l, r)\n    right = min(r, l)\n    \n    total = 0\n    for i in range(left, right + 1):\n        total += count(i, 0)\n        total %= MOD\n    \n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal ans\n        if j == 0 and i > 0:\n            ans += 1\n            return\n        for x in range(10):\n            if i == 0 and x != 0:\n                continue\n            if j + x * 10**i >= k:\n                continue\n            count(i + 1, (j + x * 10**i) % k)\n    \n    ans = 0\n    k = 10\n    count(0, 0)\n    return ans\n\n# Example usage:\nprint(solve(1, 4, 2))\nprint(solve(5, 5, 5))\nprint(solve(0, 2, 0))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    \n    def count(i, j):\n        if j == 0 and i != 0:\n            return 0\n        \n        if i == 0:\n            return 1 if j == 0 else 9 * pow(10, i - 1, MOD)\n        \n        ans = 0\n        for x in range(10):\n            if j + x >= 0 and (j + x) % MOD == 0:\n                ans = (ans + count(i - 1, (j + x) % MOD)) % MOD\n        \n        return ans\n    \n    total = (l + r + a) // 2\n    left_count = total // 2\n    right_count = total // 2\n    \n    if l > left_count:\n        left_count = l\n    if r > right_count:\n        right_count = r\n    \n    max_team_size = 0\n    for i in range(left_count + 1):\n        if i > 0:\n            max_team_size = (max_team_size + count(i, (left_count - i) % MOD)) % MOD\n        max_team_size = (max_team_size + count(right_count, i % MOD)) % MOD\n    \n    return max_team_size\n\n# Read input\ninput_line = input()\nl, r, a = map(int, input_line.split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    def count(n, j):\n        if j == 0 and n != 0:\n            return 0\n        if n == 0:\n            return 1\n        ans = 0\n        for x in range(10):\n            ans += count(n - 1, (j + x * 10 ** n) % k)\n        return ans\n    \n    k = 10 ** 8\n    mod = 10 ** 9 + 7\n    dp = [[0] * 10 for _ in range(k)]\n    dp[0][0] = 1\n    for i in range(1, k):\n        for j in range(10):\n            dp[i][j] = dp[i - 1][(j + 1) % 10]\n            if j != 0:\n                dp[i][j] = (dp[i][j] + dp[i - 1][(j + 9) % 10]) % mod\n    res = 0\n    for i in range(1, k):\n        res = (res + dp[i][0]) % mod\n    return res\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        res = 0\n        for x in range(10):\n            if j + (x * 10**(n-1)) % k == 0:\n                res += count(n-1, (j + (x * 10**(n-1))) % k)\n        return res\n    \n    total = 0\n    if a > 0:\n        total += count(l + a, 0)\n        total += count(r + a, 0)\n    else:\n        total += count(l, 0)\n        total += count(r, 0)\n    \n    return total\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j, use_left):\n        if n == 0:\n            return int(j == 0)\n        \n        ans = 0\n        for x in range(10):\n            new_j = (j + (x * 10**(n-1))) % k\n            if new_j == 0:\n                if not use_left:\n                    continue\n            if x != 0:\n                ans += count(n-1, new_j, False)\n            else:\n                ans += count(n-1, new_j, True)\n                \n        return ans\n    \n    k = 10\n    total = l + r + a\n    max_size = 0\n    \n    for i in range(total//2+1):\n        left_count = min(i, l)\n        right_count = total - left_count - a\n        if left_count > 0 and right_count > 0:\n            max_size = max(max_size, 2*left_count + right_count)\n    \n    return max_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * (MOD + 1) for _ in range(l + r + a + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, l + r + a + 1):\n        dp[i][0] = 9 * dp[i - 1][0]\n        dp[i][0] %= MOD\n    \n    # State transitions\n    for i in range(1, l + r + a + 1):\n        for j in range(MOD + 1):\n            for x in range(10):\n                new_j = (j + x * pow(10, i - 1)) % MOD\n                if new_j == 0 and i > 1:\n                    continue\n                dp[i][new_j] = (dp[i][new_j] + dp[i - 1][j]) % MOD\n    \n    ans = 0\n    for j in range(MOD + 1):\n        if j == 0 and i > 1:\n            continue\n        ans += dp[l + r + a][j]\n        ans %= MOD\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    def count(n, j):\n        if j == 0 and n > 0:\n            return 0\n        if n == 0:\n            return 1\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(n - 1, (j + (x * 10**(n-1))) % MOD)\n            ans %= MOD\n        return ans\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    half = total // 2\n    left = min(half, l)\n    right = min(half, r)\n    ambidexter = min(half, a)\n    return (left * right * (ambidexter * 2 + 1)) % MOD\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print the output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j, use_left):\n        if i == 0 and j == 0 and not use_left:\n            return 1\n        if i == 0 or j == 0:\n            return 0\n        if use_left:\n            return count(i - 1, (j + 10) % 10, False)\n        else:\n            return count(i - 1, (j + 1) % 10, True) + count(i - 1, (j + 0) % 10, True)\n\n    total = 0\n    for i in range(1, min(l, r) // 2 + 1):\n        total += count(i, i, False) + count(i, i, True)\n    for i in range(min(r, l) // 2 + 1):\n        total += count(i, i, True) + count(i, i, False)\n    for i in range(a):\n        total += count(i, 0, True) + count(i, 0, False)\n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return int(j == 0)\n        \n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(n - 1, (j + x * 10**(n - 1)) % k)\n        return ans\n    \n    k = 10\n    max_size = 0\n    for i in range(1, l + r + a + 1):\n        if i % 2 == 0 and count(i // 2, 0) == count(i // 2, 1):\n            max_size = max(max_size, i)\n    \n    return max_size\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nresult = solve(l, r, a)\n\n# Print the result\nprint(result)",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        res = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            res += count(n - 1, (j + x * 10 ** n - 1) % k)\n        return res\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    k = 2\n    while True:\n        max_count = count(total // 2, 0)\n        if max_count > 0:\n            break\n        k += 1\n    \n    return max_count\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve and print output\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j, used_left):\n        if n == 0:\n            return 1 if j == 0 else 0\n        ans = 0\n        for x in range(10):\n            new_j = (j + (x * 10**(n-1))) % k\n            if not used_left and new_j == 0:\n                continue\n            ans += count(n-1, new_j, used_left or x != 0)\n        return ans\n    \n    k = 10\n    max_size = 0\n    for i in range(1, l+r+a+1):\n        for j in range(k):\n            size = count(i, j, False)\n            if size > 0:\n                max_size = max(max_size, size)\n    return max_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal dp\n        if i == 0:\n            return int(j == 0)\n        if dp[i][j] != -1:\n            return dp[i][j]\n        ans = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            ans += count(i - 1, (j + (x * 10**(i - 1))) % k)\n        dp[i][j] = ans\n        return ans\n    \n    k = l + r + a\n    dp = [[-1] * k for _ in range(l + r + a)]\n    \n    res = 0\n    for i in range(k):\n        if count(l + r + a, i) >= (l + r + a) // 2:\n            res = max(res, i)\n    \n    return res if res else 0\n\n# Read input\nl, r, a = map(int, input().split())\n\n# Solve the problem\nprint(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        nonlocal dp\n        if i == 0:\n            return j == 0\n        if (i, j) in dp:\n            return dp[(i, j)]\n        ans = 0\n        for x in range(10):\n            if j != 0 and x == 0:\n                continue\n            if j == 0 and x == 0:\n                ans += count(i - 1, 0)\n            else:\n                ans += count(i - 1, (j + (x * 10)) % k)\n        dp[(i, j)] = ans\n        return ans\n    \n    dp = {}\n    return count(max(l, r), 0)\n\n# Main function\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(n, j):\n        if n == 0:\n            return 1 if j == 0 else 0\n        res = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            res += count(n - 1, (j + x * 10**(n - 1)) % k)\n        return res\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    k = 10\n    dp = [[0] * k for _ in range(total // 2 + 1)]\n    \n    for i in range(total // 2 + 1):\n        if i <= l:\n            dp[i][0] = 1\n        if i <= r:\n            dp[i][0] = 9 * dp[i][0]\n    \n    for i in range(1, total // 2 + 1):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][(j - (x * 10**(i - 1))) % k]\n    \n    ans = 0\n    for j in range(k):\n        if j == 0:\n            ans += dp[total // 2][j]\n        else:\n            ans += dp[total // 2][(j - (x * 10**(total // 2 - 1))) % k]\n    \n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * 10**(n-i-1)\n        ans = 0\n        for x in range(10):\n            if j != 0 and x == 0:\n                continue\n            ans += count(i-1, (j + (x * 10**(n-i))) % k)\n        return ans\n    \n    n = l + r + a\n    k = 10\n    mod = pow(10, k, k)\n    ans = 0\n    for i in range(k):\n        if count(n, i) > 0:\n            ans += count(n, i)\n            break\n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n\nif True:\n    l, r, a = map(int, input().split())\n    solve(l, r, a)",
    "def solve(l, r, a):\n    def count(n, j, used_left, used_right):\n        if n == 0:\n            return 1 if j == 0 else 0\n        if j == 0 and not used_left and not used_right:\n            return 1\n        res = 0\n        for x in range(10):\n            if x != 0 and not used_left:\n                res += count(n - 1, (j + (x * 10)) % k, True, used_right)\n            elif x != 0 and not used_right:\n                res += count(n - 1, (j + (x * 10)) % k, used_left, True)\n            else:\n                res += count(n - 1, (j + (x * 10)) % k, used_left, used_right)\n        return res\n    \n    k = 10\n    ans = 0\n    for i in range(1, min(l, r) // 2 + 1):\n        ans += count(i, 0, False, False) * 2 * count(i, 0, True, True)\n        ans += count(i, 0, True, False) * 2 * count(i, 0, False, True)\n    ans += count(min(l, r) // 2 + 1, 0, False, False) * 2 * count(min(l, r) // 2 + 1, 0, True, True)\n    ans += count(min(l, r) // 2 + 1, 0, True, False) * 2 * count(min(l, r) // 2 + 1, 0, False, True)\n    ans += count(min(l, r), 0, False, False) * 2 * count(min(l, r), 0, True, True)\n    ans += count(min(l, r), 0, True, False) * 2 * count(min(l, r), 0, False, True)\n    ans += count(min(l, r) + a, 0, False, False) * 2 * count(min(l, r) + a, 0, True, True)\n    ans += count(min(l, r) + a, 0, True, False) * 2 * count(min(l, r) + a, 0, False, True)\n    return ans\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    def count(i, j, used_left):\n        if i == 0 and j == 0:\n            return 1\n        if i == 0:\n            return 9 * 10 ** (-i - 1)\n        ans = 0\n        for x in range(10):\n            if x != 0 and not used_left:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k, True)\n            else:\n                ans += count(i - 1, (j + (x * 10 ** i)) % k, False)\n        return ans\n    \n    k = l + r + a\n    used_left = [False] * k\n    max_team_size = 0\n    for i in range(k // 2 + 1):\n        for j in range(k // 2 + 1):\n            if i + j == k // 2 and count(k // 2, i, used_left) > max_team_size:\n                max_team_size = count(k // 2, i, used_left)\n    return max_team_size\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 1000000007\n    \n    def count(n, j):\n        if n == 0:\n            return j == 0\n        \n        res = 0\n        for x in range(10):\n            if j == 0 and x != 0:\n                continue\n            res = (res + count(n - 1, (j + x * 10**(n - 1)) % MOD)) % MOD\n        \n        return res\n    \n    total = l + r + a\n    if total % 2 != 0:\n        return 0\n    \n    max_team_size = 0\n    for i in range(total // 2):\n        for j in range(MOD):\n            if count(i, j) > 0:\n                max_team_size = max(max_team_size, 2 * i)\n    \n    return max_team_size\n\n# Example usage\nprint(solve(1, 4, 2))\nprint(solve(5, 5, 5))\nprint(solve(0, 2, 0))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * (MOD + 1) for _ in range(r + 1)]\n    \n    # Base case: one digit with value 0\n    dp[1][0] = 1\n    \n    # Fill the dp table\n    for i in range(2, r + 1):\n        for j in range(MOD + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][0]\n            else:\n                dp[i][j] = sum(dp[i - 1][(j + x * 10) % MOD] for x in range(10))\n    \n    # Calculate the result\n    total = 0\n    for j in range(MOD + 1):\n        if j == 0 and not (l > 0 and r > 0 and a > 0):\n            continue\n        total += dp[r][j]\n        total %= MOD\n    \n    return total\n\nif True:\n    l, r, a = map(int, input().split())\n    print(solve(l, r, a))",
    "def solve(l, r, a):\n    MOD = 10**9 + 7\n    dp = [[0] * 10 for _ in range(l + r + a + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, l + r + a + 1):\n        for j in range(10):\n            for x in range(10):\n                new_j = (j + x * 10**(i - 1)) % MOD\n                dp[i][new_j] += dp[i - 1][j]\n                dp[i][new_j] %= MOD\n                \n    ans = 0\n    for j in range(10):\n        if j == 0:\n            continue\n        ans += dp[l + r + a][j]\n        ans %= MOD\n        \n    return ans\n\n# Main function\ndef main():\n    input_data = list(map(int, input().split()))\n    l, r, a = input_data\n    print(solve(l, r, a))\n\nif True:\n    main()"
  ],
  "rewards": [
    0.125,
    0.0,
    0.025,
    0.05,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.875,
    0.0,
    0.0,
    0.2,
    0.05,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.125,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.025,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "train rewards": [
    0.10256410256410256,
    0.0,
    0.10256410256410256,
    0.02564102564102564,
    0.0,
    0.0,
    0.02564102564102564,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.0,
    0.10256410256410256,
    0.0,
    0.07692307692307693,
    0.0,
    0.02564102564102564,
    0.0,
    0.0,
    0.0,
    0.6666666666666666,
    0.0,
    0.0,
    0.10256410256410256,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.0,
    0.07692307692307693,
    0.0,
    0.0,
    0.1794871794871795,
    0.0,
    0.10256410256410256,
    0.0,
    0.0,
    0.0,
    0.0,
    0.02564102564102564,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.02564102564102564
  ],
  "time": 361.2320168018341,
  "sample times": 50
}